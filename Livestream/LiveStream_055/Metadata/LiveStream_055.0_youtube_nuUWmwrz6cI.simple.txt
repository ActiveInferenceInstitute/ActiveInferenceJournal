SPEAKER_00:
all right hello and welcome everyone it is october 24th 2023 and we're an active live stream number 55.0 on realizing synthetic active inference agents okay welcome to the active inference institute we're a participatory online institute that is communicating learning and practicing applied active inference you can find us at some of the links on this page

This is a recorded and an archived livestream, so please provide feedback so we can improve our work.

All backgrounds and perspectives are welcome, and we'll be following video etiquette for livestreams.

Head over to ActiveInference.org if you want to learn more about participating in livestreams or other activities.

All right, well, we're in Livestream 55 series with a goal to learn and discuss these two very interesting papers on realizing synthetic active inference agents, part one on epistemic objectives and graphical specification, part two on the variational message updates.

As with all videos, it's an introduction for some of the ideas, not a review or a final word.

We're going to introduce ourselves, then jump into a fairly lengthy background section that will prepare us to ask the questions and get to a place where the paper's contributions can be figured out.

So let us begin with introducing ourselves and saying hi and saying maybe something that was exciting to us or made us want to participate in this series.

So I'm Daniel.

I'm a researcher in California, and I was interested to go a little deeper on message passing.

It's something that's brought up a lot in the textbook and implicitly in other papers, but this was an opportunity to tackle it head on.

And I'll pass to Bert.


SPEAKER_02:
So I'm Bert, I study civil engineering in the Netherlands and I struggle with the math of active inference, but recently I picked up reinforcement learning and together with this paper, I think it really helps.


SPEAKER_01:
Hi, I'm Jakob.

I'm also a researcher in California and I'm

really excited about this paper from a number of different angles.

I guess the graphical notation and the notation that the paper introduces, I think, can have really profound impact on the field from both a computational and a theoretical viewpoint.

And I'm interested to learn more about the implications of


SPEAKER_00:
the new notation for further research yep new notation just dropped okay there's a pair of papers as mentioned and the information is here so

of us can phrase the big question that brought us to the paper but i wrote it this way which is right there in the title there's at least a triple play a triple pun tendre and there's a dyad of papers so what is this realizing in the context of the title well in one sense we're realizing something

terms of implementing it or manifesting it they're deploying something that is being realized so there's a accomplishment sense of realizing also the work calls attention to our own realizing process our relevance realization how we come to appreciate and interact with synthetic intelligence ours

And then we're also talking about building agents that do some kind of realizing in themselves, like realizing agents in that sense.

So what kind of ending starts off with a triple play?

I don't know.

Bert or Jakob, what big questions brought you to the paper?

What do you think the paper takes on?


SPEAKER_01:
I think in terms of creating scalable active inference models that are reproducible across a variety of settings is quite exciting.

So maybe realizing in that sense across a number of different domains is part of the meaning here.

And of course, the triple play that we were exploring with our own work from going from just a simple graphical representation to a mathematical description of the generative model and the algorithm for message passing and updating the generative model through time to then a code implementation that can be deployed in various dynamic setting.

That is also what I think is an important part of this paper.


SPEAKER_02:
Oh, yeah.

And for me, especially as not an expert on active inference, but someone who is more interested in applying it, their work on working towards a PyTorch of active inference is really valuable.

and i think their way of deconstructing the mechanisms of expected and variational energy and to combine them into one function makes it simplifies it a lot i think cool so we're gonna look deeper at the papers of course soon but just a few of the aims of the paper


SPEAKER_00:
Part one, they construct a purely synthetic approach to the active inference framework, motivated from the point of view of engineering rather than neurobiology.

And we're going to talk about what synthetic is.

And in part two, they use a variety of technical phenomena, variational calculus, message passing, and reactive programming to simulate a perception action cycle on the teammates.

Okay.

Okay.


SPEAKER_01:
one of you would you like to read the first abstract and then the other can read the other abstract whoever wants to go first um I can read the the first one so the free energy principle FEP is a theoretical framework for describing how intelligent systems self-organize into coherent stable structures by minimizing a free energy functional

Active inference is a corollary of the FEP that specifically details how systems that are able to plan for the future

function by minimizing particular free energy functionals that incorporate information seeking components.

This paper is the first in a series of two where we derive a synthetic version of active inference on free form factor graphs.

The present paper focuses on deriving a local version of the free energy functionals used for active inference.

This enables us to construct a version of active inference which applies to arbitrary graphical models and interfaces with prior work on message passing algorithms.

The resulting messages are derived in our companion paper.

We also identify a gap in the graphical notation used for factor graphs.

While factor graphs are great at expressing a generative model, they have so far been unable to specify the full optimization problem, including constraints.

To solve this problem, we developed constrained Forney-style factor graph.

cffg notation which permits a fully graphical description of variational inference objectives we then proceed to show how cffgs can be used to reconstruct prior algorithms for active inference as well as derive new ones the latter is demonstrated by deriving an algorithm that permits direct policy inference for active inference agents circumventing a long-standing scaling issue that has so far hindered the application of active inference in industrial setting

We demonstrate our algorithm on the classic team-based task, ensure that it reproduces the information-seeking behavior that is a hallmark feature of active inference.

Thank you.


SPEAKER_00:
And the second paper.


SPEAKER_02:
Yes.

The free energy principle describes biological agents as minimizing variation of free energy with respect to a generative model of the environment.

Active inference is a corollary of the FEP that describes how agents explore and exploit the environment by minimizing an expected free energy objective.

In two related papers, we describe a scalable epistemic approach to synthetic active inference agents.

By message passing on free-form Forney-style factor graphs, FFGs, a companion paper, part 1, introduces a constrained FFG notation that visually represents free energy objectives for active inference.

The current paper derives message passing algorithms that minimize generalized free energy objectives on a constrained Forney factor graph by variational calculus.

A comparison between simulated BAT and generalized free energy agents illustrates that synthetic active inference influences the behavior on a team-based navigation task.

With full message-passing accounts of synthetic active inference agents, it becomes possible to derive and reuse message updates across models and move closer to industrial applications of synthetic active inference.


SPEAKER_00:
Great, thank you.

Here's the roadmap section titles of the first paper.

Here are the section headers of the second paper.

So before we jump into the background and then the papers,

let's just have one last train stop what is synthetic and what's synthetic about active inference so as it being 2023 we went to the language model and we asked for some adjectives that are in the semantic neighborhood of synthetic and you can see them here artificial lab created synthetic counterfeit phony deceptive inauthentic unnatural

A lot of these are somewhat negative associations semantically.

So how does synthetic come to be meaning something negative or deceitful?

And then in what ways is that a similar or a different sense of synthetic than referring to the unified compositionality of something that's blended?

And similarly, we could talk about artificial, like artificial intelligence.

Is that artifice, like crafted?

Or is it artificial, like phony, bogus, false?

So...

the context of the paper there's probably a bunch of different ways that we can draw with the authors and a little bit here too what is being synthesized if you have any thoughts on this but what else might be synthetic it might refer to something that's not just a hypothetical like a real synthesis a realized synthesis it might refer to information risk and synthetic intelligence

might refer to synthetic judgments those whose predicates are wholly distinct from their subjects and then recently at the topos institute there was a great talk by jonathan sterling synthetic domains in the 21st century

So there's a lot of very interesting references and ways that synthetic is used.


SPEAKER_04:
Do you have any preliminary thoughts on what you think about these papers?

I think


SPEAKER_01:
I guess building on what you already said, part of the synthesis could be decreasing the gap between the mathematical description of a model and its graphical representation and its subsequent code implementation.

So the focus on graphical models, on constrained Forney style factor graphs,

combines the aspects of generalized free energy or betty free energy which is motivated by a forney style graph structure with the actual implementation

of a synthetic agent or an artificial agent in code or in synthetic settings, which themselves are trying to model some part of reality.


SPEAKER_00:
cool we'll explore okay so to Bert for background part one and thank you for all the work leading up to this dot zero Bert so take it away with the background just let me know when to switch slides yeah all right uh so for the background of part one uh it will delve into what are base crafts and how do you do an inference over these crafts


SPEAKER_02:
and then the authors use make extensive use of arcangeln to optimize over the graph at a foreign factor graph and then some miscellaneous stuff that will be relevant to the play smaller parts in the paper all right next slide

So first off, base graphs, working up eventually to 4D graphs, but starting with the simplest one, which is just a Bayesian network.

And then the classical example is the earthquake network.

So each circle is a random variable, and they represent a particular state.

So whether, for example, the alarm goes off, yes or no.

and these variables can be continuous or discrete and so the total generative model is the joint probability of all these random variables and you can factorize them so they only relate to one or two or several others at least a limited set of other variables and then moving on from that is the hidden Markov model where you add time so you have multiple time steps so in this case x1

X0, X1, X2.

And this works under the Markov assumption, which is that all the relevant information of the past is in the current time step.

So you only need to consider the current.

And on top of that, you cannot observe hidden states directly, so you need an observation error.

So that's the E.

And then the next step, building on top of the hidden Markov model, is the partially observable Markov decision process, which is a lot of words.

But really it's the same, where you have a hidden state, S, with an observable state, and you transition from states.

But now you add an action, and the action acts the policy, and that acts on the B, the transition.

So an example would be I expect S1 to have a certain value given my action, and this observation O2 should be in line with that.

And the policy is selected using the expected free energy.

All right, next slide.

And then how do you actually figure out the values of a base graph?

And that requires inference.

And there are multiple ways.

So the first one is exact inference, which is what you would do if you calculated by pen and paper, which is really only practical for small discrete models, like the example model on the last slide.

And if you want to go to bigger models, more complex models, you need approximate inference.

And within that Monte Carlo sampling is a key pillar, and there are a bunch of algorithms that apply it, that use it.

but the core idea is the same you sample many times from an idealist distribution to approximate another distribution of interest another method is method which you may be familiar with this variation of the energy which yeah active inference uses a lot and then you indirectly minimize the difference between two distributions using the KL divergent

You try to minimize the KL divergence, but you cannot do that directly.

So instead, you maximize the elbow.

And this works with a family of distributions.

And a family is, for example, gaussians or exponentials, but you have to pick one.

An embedded free energy works on this.

It's also a free energy, but it has the assumption that only local interactions matter.

So instead of going over the entire generative model, you only look at one factorized part at a time.

And optimization, which is also used in the paper to find some parameters.

And it's Newton's method, but you have a function and you want to know where this function goes through the x-axis.

So you can take the slope and iteratively take more slopes until you get at approximately the point where it goes through the x-axis.

Next slide.

And then I'll just use a paper.

And so to quickly introduce this, it is a method to describe an objective function with constraints.

So in the first derivative of the Lagrangian, if you set it equal to zero, those are the optimal points.

So that would be where the blue and red curve intersect in this picture.

And the Lagrangian multiplier lambda is the rate of change the objective function will change if you relax a constraint.

So in this example, it will be the same as changing the constant b of the red function.

So concretely, if the lambda was positive here,

then increasing B would result in objective function also increasing.

So you have some leeway to work to improve the function even further.

So you can optimize more.

That's what it's saying.

Alrighty, next slide.

And that's some miscellaneous stuff.

So the term entropy is used a lot, especially in terms of epistemic foraging.

But for now, it's just a measure of how uncertain a distribution is.

And in general, sampling an uncertain distribution gives you more information than sampling a certain one.

For example, if it rains every day, seeing rain again doesn't tell you much because it rains every day anyway.

A direct delta function is a probability distribution that is one for a single point and zero elsewhere.

And then a statistical moment

In mathematics, the moments of a function are certain quantitative measures related to the shape of a function's graph.

If a function is a probability distribution, then the first moment is the expected value, so the average, the second is the central moment of variance, the standard deviation, the third is the skewness, and the fourth is the kurtosis.

And finally, the Kullback-Leibnag control, which is a term from control theory, which basically attempts to make a system converge to a set prior and adjust it by minimizing the KL divergence.

Yes.


SPEAKER_00:
Thank you.

Great background.

So that kind of speed runs Bayesian stats first layer.

Now we're going to head into a second layer of background that's going to bring us into the Forney graph space.

And after the second background part, we'll be in a position to understand two papers a little better.

So here's the big picture on background part two.

Even with all of background part one in hand, there's also some more modern, important act-inf as well as non-act-inf related advances that are going to get us up to speed.

So for a lot of the concepts here, we're just overviewing it first, and then we'll be talking more to the authors about them.

And so I'll take a more narrative overview of recent updates and then we'll steer towards the technical.

So first, graphical models, active inference, and belief propagation.

Over the last years, Carl Friston et al.

have been collaborating with the lab and collaborators of Bert de Vrij.

And around 2017, they released several very important papers.

One was a factor graph description of deep temporal active inference, and another was the graphical brain belief propagation and active inference.

So as Bert alluded to earlier, many of the operations or formalisms of active inference can be understood as manipulations of parameters or variables that might reflect data, observations, priors, precisions, different kinds of variables.

And that is given exact form in the graphical model, specifically the Bayesian graph.

And here we see the familiar figure 4.3 from the 2022 textbook.

Now, the nodes on that graphical model are variables, and edges are their causal or their informational relationship.

And so especially after Pearl et al.

and the causal modeling developments in the 1980s and 90s,

This was adapted into a probabilistic or cybernetic setting where certain nodes on this graph were associated with action, with perception, with cognitive phenomena.

And so this is a causal model, a Bayesian graphical model.

It's the kind of thing that we see in very many active inference papers.

Now, the Bayesian graph is awesome.

It allows us to tackle some really challenging compute problems, get a lot of semantic interpretability, and so on.

However, there's also a few limitations or challenges in execution.

So first, just epistemically.

there's some side information that is needed to provide in order to get to a fully reproducible Bayesian graphical simulation.

And Livestream 54 shows how that information is provided formally by category theory.

But more to the pragmatic point for this discussion, in actual computational execution, whether you're running that Bayes graph on a single core, single thread, or whether you're using multiple computing elements,

a given or a particular generative model must be implemented in a certain way or order.

If we were doing a single agent or a multi-agent simulation, we might wonder, so should we update the perception of everybody and then let everybody make action?

Or should we do action and perception of number one, then number two, then number three?

But then isn't that unfair?

Because then isn't one of them always getting to see and act first and so on.

So just drawing the graph

doesn't give you the actual order of operations to carry it out reproducibly.

So that underspecification of the Bayesian graphical logistics or scheduling leads to a lot of degrees and freedom in model deployment.

Now this might be an issue or not be an issue for any given task.

However, whether you use an off-the-shelf or a custom solution to address this challenge, these different approaches might take time, they might not transfer, they might not be general, and so on.

Also, there might be different simulation outcomes or different computational costs that happen when you implement the same graphical model differently.

So that limits high reliability use and also transfer.

And then lastly, kind of related to computational complexity, estimations are difficult to understand just by looking at the base graph.

It'd be really nice if there was a way to have the model and then know how much it's going to cost or take to run.

so enter the forney factor graphs in 2001 forney wrote a technical paper called codes on graphs normal realizations just like normal 2001 stuff and this introduced some fundamental components let's ask the authors and find out what exactly those fundamental moves were

But what was introduced led to the development of what is now called a Forney factor graph, FFG, or a normal graph.

Again, another interesting question.

How is normal being used here?

The Forney factor graph representation is dual or informationally equivalent to any given Bayesian graph.

Importantly, though, FFGs enable message passing.

Message passing provides node, local, and whole graph scheduling logistics for messages in a way that allows for more tractability in execution.

Importantly, these messages are being passed amongst variables at a very granular level.

This is not referring to two bounded agents sending each other a postcard simply.

The network or the graph, it's a very general data structure.

So it's not surprising that we're going to be encountering multiple kinds of graphs, but it is relevant to know which kinds of graphs we're talking about.

And because this FFG representation can be applied to anywhere a Bayesian graph is used, people have applied both Bayesian graphs and, to a lesser or more recent extent, 40-factor graphs to a bunch of different statistical problems like filtering, smoothing, prediction, MDP, POMDP, and so on.

So to kind of lock this in...

here we see on the right figure 7.3 from par pazulo and friston's textbook so this is the standard discrete time partially observable markov decision process and on the left here is a figure from the graphical brain paper of 2017. so across the top these two bayesian graphs are actually identical they're the same exact type of graph and they're both the same base graph

And then the 2017 figure shows that that base graph has this one-to-one relationship with a Forney factor graph.

What is the difference with a Forney factor graph?

Why do we need to have a different format to describe what might at first glance appear to be the same information?

Let's go to Graphical Brain 2017.

We use graphical representations to characterize message passing under deep generative models that might be used by the brain.

We use three sorts of graphs to emphasize the form of generative models.

One, the nature of Bayesian belief updating.

Two, and how this might be accomplished in neuronal circuits.

Three.

So here's the three sorts of graphs that they're going to talk about.

First, Bayesian networks or dependency graphs.

That's the one that we see the most commonly.

Nodes correspond to unknown variables.

Edges denote dependencies amongst variables.

40-factor graphs have nodes that represent local functions or factors of a probability distribution over random variables, while edges come to represent variables per se, or more exactly, a probability distribution over those variables.

And finally, neural networks have nodes that are constituted by the sufficient statistics of unknown variables and other auxiliary variables like prediction errors, while the edges in those graphs denote an exchange of the functions of sufficient statistics.

Crucially, these graphical representations are formally equivalent in the sense that any Bayesian network can be expressed as a factor graph, and any message passing on a factor graph can be depicted as a neural network.

However, as we will see later, the various graphical formulations offer different perspectives on belief updating or propagation.

So this is a very rich topic.

This background section was to say that Forney graphs have a different style or format than Bayesian graphs.

However, they exist in this dual relationship.

So there's things like algorithms and procedures that you can do on FFG that you can't do on Bayes graphs, but it's all good because you can go from the Bayes graph to the FFG representation and then implement some procedure on the FFG.

So let's get to the papers.

The background one and background two sections have got us to perhaps the point where we're very excited to see how the authors implemented fully synthetic active inference agents using message passing, logistical and operational scheduling algorithms on 40-factor graphs representing Bayesian graphical models crafted to calculate a constrained beta-free energy

as a generalized or unified free energy imperative, unifying the variational and the expected free energy, for sense-making and decision-making in active inference agents.

So now we're heading into another double movement of the coming two papers.

The first paper is itself going to be like a background and a notational paper, but also one that adds to the literature.

And then the second paper will make the addition on top of the advance of the first paper.

So a lot of material.

Let's go into the first paper, Bert.


SPEAKER_02:
Yes, so for the first paper, we'll be going over it chapter by chapter.

To start with, setting up the Lagrangian, then defining

the epistemic objective and how to include it in a synthetic agent.

Then in chapter 4 they lay out what Lagrangian active inference means.

In chapter 5 they describe the notation for the constraint for an effector graph.

In six, they highlight why the original generalized classical active inference and the original generalized free energy algorithm are special cases of the Lagrangian active inference, so of that definition of the four-unit factor graph.

And then in seven, they do an experiment for policy inference.

Yeah.

And for chapter two, the Lagrangian approach to message passing.

So as Daniel described, phony vector graphs represent a factorized function over variables, which you can see in equation one and figure one.

So on the left, you see equation one that shows per node where V is.

So A is a node in the set of all nodes V.

And so on the height, you can see the image which says that each node is a factor of all the variables and the variables are on edges.

And that's really important.

And as mentioned in the background, approximate inference is used, in this case variational inference.

And so we start with a free energy function, an equation 3 on the left, which is used to approximate variational distribution Q star.

And Q star is the optimal distribution that we want to get to.

And we achieved it by minimizing it.

And so Beth free energy is distinct from variation of free energy by factorizing the calculation of free energy.

So instead of computing it all at once, you compute it per node and edge, and then aggregate the results, which you can see on the right.

Each local free energy will include entropy terms from all connected edges.

And since edges can be connected to two nodes, the entropy of these variables would be counted twice.

So one edge is a variable, and if you connect it to two nodes, you would be counting the same variable twice.

And so to cancel that out, they add the one minus degree of the edge.

And at the bottom, I've added that normally an edge has always a degree of two, which might sound weird because how can an edge have a degree?

Because normally nodes have degrees.

But in chapter five, we will show that it's possible to have dangling edges that are not connected, that are not factorized on one end.

So it is possible to have edges with degree one.

And last, three constraints ensure that the sum of probabilities for each node and edge equals one, and it's normalization.

And also that it is possible to retrieve edge and node probabilities from the joint distribution, so that the edge says something about the nodes, and the nodes say something about the edges.

Yes, next slide.

Cool.

Yeah, I've just got something to say.


SPEAKER_00:
Yeah, just that we have the variables on the edges of this graph, and the Fs are like functions or operations or little factories where variables can come in, potentially multiple variables can come in and some activity happens, but we're putting the variable that would be in the node of the base graph, and we're having it on an edge connecting functions.

So again, the information is identical or congruent, but everything that we're going to see now is flipped into this space where the edges are the variables, and that's what is going to enable the node local computations.


SPEAKER_02:
And then in chapter 3, defining epistemic objectives, the authors write that ages interact with the world they inhabit and entail a generative model of the environment.

Achieving future goals can be cast as free energy minimization.

And then they ask the question, what should this free energy functional look like and why?

And that sets up the rest of the paper, basically.

Only optimizing bad free energy or variation of free energy does not lead to exploration, but KL control, which means that only prior values are satisfied.

A hallmark of active inference is alternative functionals specifically made for inferring policies like expected free energy, which includes information collection.

And so epistemics arise from the optimization of approximate mutual information.

mutual information uh on the bottom height is a metric like the r squared if you make a linear and that it tells you it tells you how much one variable relates to another one

And to go back, mutual information between X and Z in equation 10 on the left.

To work on it, the uncertainty entropy of X. Yeah, that's in the height equation.

So it's how much you know about the one given that you know the other.

And so say X is an observation and Z is an eternal state.


SPEAKER_04:
then an agent can choose X to see information about set.

are related to each other.

And then how do you, how to define a functional that combines battery energy and .

So to have .


SPEAKER_02:
the energy and add negative mutual information and minimizing the free energy functional the elbow with a negative mutual information means maximizing the mutual information so you're trying to get as much information about internal and observation states


SPEAKER_00:
Yeah, just one comment there, Bert, and then Jakob, feel free to add anything.

That's a great comparison you made with the r-squared for linear regression.

So in a linear regression, r-squared summarizes how much the two axes, the x and the y-axis, resemble each other.

r-squared of 1 means they're exactly collinear.

They're on a manifold.

r-squared of 0 is there's no linear relationship, and r-squared of negative 1 would be a negative association.

Mutual information is kind of like that, but two characteristics that are importantly different.

First off, you can't have information on something.

The worst thing that two things could be, or the least that they could be, is just noise to each other.

So you can take the negative of the mutual information, but you can't have negative information on something.

And then secondly, it's not a linear relationship.

You could have something that is an inverted U, and the linear regression might find that that had a low R squared because the best regression line might go through the middle of the U.

But then if you just think about that a little bit more generally, of course one of those variables has information on the other variable.

And so it's kind of like moving a lot of our intuition and also some of the epistemic status of linear regressions into more of a pure information geometric space.

And it's a really important point too that the VFE doesn't

endogenously have an epistemic drive.

It's just about the real-time surprise level of beliefs and incoming data.

And so a hallmark of active inference is the construction of these functionals such as expected free energy or free energy of the expected future or generalized free energy.


UNKNOWN:
Okay.


SPEAKER_02:
And so expected free energy only works for future time steps, whereas variational and bad free energy work for past and the current time step.

And instead, the authors posted generalized free energy works for both at the same time, and it includes a part that tracks

time in equation 14.

But that's on the end, you have P with a curvy stripe, xk.

And that basically keeps count of which time step we have at this moment.

And also note that the policy or control is fixed.

So that's you with a roof on it.

So past time steps have observed data and are locked using the direct delta function.

which was the function with a probability of 1 at a specific value and 0 at the rest, whereas future timesteps are still open to be optimized using generalized free energy.

And so below that, you can see this free energy, how you lock some values and keep them open at other moments.

And so for a sneak peek on the figure in the right from paper two, you can see that as time goes on and time steps are observed, data constraints are added.

And that's the little black circle with a delta in it.

And committing to a full mode of specification up your limits what a generalize that you think you can do instead of making it fully local is synthetic active inference as the artist right.

Okay.

And then in chapter four, they discussed the Lagrangian active inference, which is the key of the paper.

And so with node-local generalized free energy, we can construct a Lagrangian for active inference.

And the goal is to have a distributed inference procedure solving for each node individually and constraining the solution as shown in equation 13.

So on the right.

And we need to assume that actual and approximate probabilities are about equal to each other.

We had to make that assumption.

So I guess we can ask that next week.

And now with this, messages can be derived as done in part two, which is the next paper.

However, in this paper, they attempt another way to arrive at the node-local generalized free energy.

And this is done in two steps.

So first, they apply a mean field factorization.

that ensures edges are independent for each node, which you can see on the right, where you have the factor of the node, sr, has a product for all edges, so they are independent.

And then the second move they make is that you can partition the connecting variables edges into two sets, one that is adjusted and the other that is left alone.

And to the adjusted set, they apply p substitution, which is very important.

And this basically replaces a local free energy with a local generalized free energy.

And on the bottom is the formula for applying p-substitution, which I also don't fully understand.

So maybe you guys know a little more about that.


SPEAKER_00:
Definitely will ask.

I'll just note here that the slash is used to mean except for.

I hope this is correct.

So here we're able to take something that contains all and we're able to kind of pull out one.

with this more intractable integral and then still do the simpler log but we'll ask


SPEAKER_02:
The second paper will show how p-substituted nodes are gradually removed from the Forney factor graph over time, as these nodes are now in the past and do not need to consider the future anymore.

Again, for a sneak peek, see on the right, everywhere you add the delta in the black circle, you remove the square.

And the square is the notation for p-substitutions.

And then to construct the active inference Lagrangian, it is important that p-substituted nodes work with different messages, generalized free energy instead of path-free energy.

And in this way, add epistemics.

The optimal points of the Lagrangian, where the first derivative is 0, are the stationary point of the message passing process, which means that nodes do not change anymore if you keep updating.

And so there's a very long formula for the Lagrangian.

And as I said, you split the nodes into two, one set that you p-substitute and the other that you don't.

And on top of that, you add three constraints, which have a lambda in front of them.

And that is the marginalization, the normalization of both nodes and edges.


SPEAKER_00:
That's very important about the stationary point of message passing being kind of, like, settled.

Where everybody can pass all the messages they want and nothing is changing.

And that's gonna be, um...

probably leveraged in the reactive message passing programming environment, where rather than needing to send all messages once to the calculate and send all messages again, it opens up the ability for different regions of the graph to be sending and receiving messages at different frequencies.

So if one sensor was sampling a thousand times a second, one was sampling one time per second,

No longer do you have to decide, should we coarse-grain to one second, or should we waste 999 cycles on the slower cycle sensor?

Now, with reactive message passing, because there's no local descriptions, it's possible to open up that implementational space.


SPEAKER_02:
And now we'll get into defining the notation for the constrained Forney factor graphs.

And so Forney factor graphs are useful for describing generative models, but it is important to know the exact functional to be minimized.

And the authors develop a new notation for writing constraints directly as part of the Forney factor graph.

because normal phony vector graphs do not show that.

Figure 4 on the right builds upon representing vectors with squares, nodes, and edges as variables that can be vectorized.

They add circular beads, which indicate constraints that define our family Q. That has to do with the variation of distribution.

A bead on an edge denotes that of the edge QSI, while a bead in the center of a node is QSA.

And then they build, they introduce four constraints that are needed as notation for the Forney factor graph.

So the first one is a factorization constraint, and it can either be a naive mean field or a structured mean field.

When a naive mean field is a stronger constraint, which means that every factor is independent, which is figure five, it's in the middle on the right.

and structured is less strong because you can factorize multiple variables together and i added some example formats many edges like needed for

If you want to have many edges, many variables into a factor, they introduce the notation with dots in between.

And this is useful when you have, for example, a Gaussian mixture model, which has a bunch of components.


SPEAKER_00:
We'll see if this is accurate, but let's imagine these four variables are coming in and meeting in the factory, four prerequisite components of the car assembly process.

The fully factorized way to represent that is shown here.

That's the mean field assumption that we can just treat those components separately.

Like if what we were doing was just multiplying, or I mean, adding the numbers together, maybe we could treat them separately.

But then also there are these intermediate structural factorizations where you can take four joint coming in

and then you could separate it into these two are separate and these two are connected or two pairs so it gives you the expressivity to do the continuum from fully joint to fully factorized mean field and everything between all the combinations in between in a per node fashion

rather than at the whole graph level, whereas that is often how it's discussed elsewhere.

Somebody constructs a big generative model and says, and then we took a mean field approach to the graph.

So here we have that kind of expressivity in a given node.


SPEAKER_04:
unmute, then continue, Bert.


SPEAKER_02:
Good call.

So the second is a form constraint, which enforces a particular function or distribution, really, on a local marginal of an edge or a node.

Figure 8 shows what enforcing a Gaussian constraint on an edge looks like.

And figure nine shows two different constraints on the nodes.

And the authors explicitly note that a constraint on an edge is independent of the nodes and that it factorizes into and vice versa.

So the messages pass.

And then after everything is done, it's like squeezing clay into a box.

It just has to fit.

But it's only after the fact.

And then they note dangling edges, which do not terminate on a node on one side.

So they wouldn't require a bead, but you need it to be able to do a form constraint.

So they still hide them in.

And that's why they add a sort of dummy factor node on one end.

And then the third constraint is a delta constraint.

The delta constraints and data points allow us to incorporate measurements into a model.

Equation 30 and figure 10 show this for data constraints.

These are special since they denote observations and block the flow of messages.

So these points are now fixed.

Nothing goes through it because it is already set.

And then another option is that when you don't know which value to fix it to, so the S I had,

Then you can optimize the value, and then it is called a delta constraint.

And the optimization of this is don't use an expectation maximization.


SPEAKER_00:
What I saw in this section was, let's just say that we were drawing height observations from

forest so one way to think about that is the the gaussian distribution that we're drawing from okay but now you get the data point and you could think about that data point as just an entry and a value you could also think of it as a dirac delta distribution parameterized exactly by the value of the data point and so thinking about data as being a dirac constrained

variable where here the variables are on edges brings unification between empirical uh data coming in from the outside or passed around internally and broader distributional perspectives


SPEAKER_02:
And then the fourth constraint is moment matching, which replaces the hard marginalization constraint used to include the entropy of edges.

And so this loosens the marginalization as now only the moments need to align.

And equation eight contains both node and edge terms since the moment matching constraint applies to both at the same time.

And they apply to both at the same time because of the top formula.

And the middle one, the middle formula shows the sufficient statistics described by T, capital T. And so basically what this means is that you pick a distribution and you only pick the moments.

So the first one would be the mean of the distribution and the second would be the standard deviation.

And so only those need to fit.

You don't care about the rest.

And P-substitution is the final piece needed to represent the active inference Lagrangian on a C-constraint for any vector graph.

Constructing the local generalized free energy using mean field vectorization and P-substitution was only done to represent the Lagrangian active inference on a constraint for any vector graph.

and recall that p-substitution involves substituting part of the model p for q in the expectation only.

And that is the formula on the bottom.

And it's represented with a square in the Forney factor graph.

And it shows the substitution on figure 13, replacing the local variation of free energy with a local generalized free energy.


SPEAKER_00:
rule replacing Q on the data or on Y with P that conditions on X and Z. This red piece is being called attention to, and we'll unpack that more with the authors.


SPEAKER_02:
And on top of that, lastly, the authors compressed the constraint for an effect to make it easier to read.

And only deviations relative to the default bed-free energy are shown.

And the bead chain is introduced as a series of beads connected by edges and is summarized if it contains no extra information.

And the others go really into depth, but I will just keep it to this, where they go from the left image to the right.

So the right is the cleaned up phony factor graph.

And then you can more easily compress it and make it smaller for very large diagrams.


SPEAKER_00:
Yeah, allow us to kind of compress or skip through the uninformative parts and just call attention to the new information that's being intersected.


SPEAKER_02:
And then in chapter six, they highlight how classical active inference and original generalized free energy algorithm are special cases of the developed Lagrangian active inference.

So an integral part of message-passing algorithms is the choice of a schedule, which Daniel already explained, which is the order of messages in which they are passed.

Iterative methods are sensitive to the order, and Lagrangian active inference is an iterative method and might be sensitive to the choice of schedule.

Choosing the schedule carefully allows us to recover classical active inference planning algorithms as a special case.

Figure 20 on the left shows the constraint for an effect graph of a composite node for Lagrangian active inference on discrete state spaces.

The equations on the right show the corresponding factors.

where HA is defined as a function of the transition matrix required for the order equation.

Figure 21 shows the message updates.

Some cannot be solved in closed form and instead require multi-color estimates.

U is the average free energy of the composite node and corresponds exactly to expected free energy issues in standard active inference.

where the composite notes the block with a striped block around it.

M of Z and M of A are solved differently than the rest.

They require Z-bar results using Newton's method, as it tends to fluctuate between multiple extremes.

And M of A is estimated using a sampling procedure.

And so below shows the generative model of a discrete prompt, and the equations

to below that show the factors.

And note again the hat on U, so the x's are fixed.

And calculating the generalized free energy is done using a forward sweep, which you can see with the arrows on the bottom right going from left to right, and summing the free energy terms over all the substituted composite nodes.

And these should then be equal to the result from the shown equation.


SPEAKER_00:
Cool.

These images are just so interesting, even without knowing what they are.


SPEAKER_02:
And reconstructing original generalized free energy method is then a matter of including past observations.

For past time steps, adding data constraints.

While for future time steps, adding piece substitution.

And a naive min field is applied to all the nodes.

The schedule, the order of messages is shown below.

The update equations of the generalized free energy using this model are the same as of the expected free energy.

And then the authors work on an example, which is the classic T-Maze task.

So the tools in this paper are not limited to restating prior work.

It offers more advantages, one of which is the ability to directly infer a policy instead of relying on post hoc selection, choosing actions which have the best energy terms.

Instead, you can do it immediately.

So the optimal action to take is therefore to visit... Well, the optimal action that he makes is to first visit 4 because you can get information about 2 and 3, rather than immediately try to go to 2 and 3.

And that is the hallmark of an active inference agent.


SPEAKER_00:
Yeah, a lot to explore here.

But instead of relying on the post-hoc comparison of energy terms, this is in reference to the way that usually expected free energy is used by taking in habit, the policy prior, and then iterating over every element in pi, the policy prior, and sharpening or updating them

according to the expected free energy with a pragmatic value in the epistemic value component.

So you get some policy posterior, and then you might select simply the best one, or you might take some temperature-guided sampling across the policy posterior.

So that's a post hoc comparison of expected free energy terms.


SPEAKER_04:
And with the...


SPEAKER_00:
that the generative models now have the ability to directly infer policy potentially without explicit consideration of counterfactuals or at the very least without this kind of a post hoc comparison.


SPEAKER_02:
And so they build on that and create another full model.

And note that in equation 47, they use a mixture model of candidate transition matrices indexed by UK.

So each action has a different transition matrix.

And yeah, a bunch of illustrations.

And figure 28 shows an agent that initially prefers the epistemic action, and so moves down to state 4, and subsequently exhibits a preference for either of the potentially rewarding arms, so of course left or right.

And this shows that the Lagrangian active inference is able to infer the optimal policy, and that approach can reproduce prior results of the teammates.

And then the authors do it again, but now by adding a data constraint.

And this is similar to using a maximum a posteriori estimate, which basically means that the action is yes or no.

So it's 100% or not.


SPEAKER_00:
Yeah, by pushing through the point mass constraint, kind of like that Dirac delta constraint, all that can be shared is the first moment, which is just the data points value.

So here it's like, you might have a 70% chance of doing thing 1, 20%, 2%, 1%, but then...

the action selected is decisive and so you have this decisive passing of action and the the decisive realization of location even if also there's like a location distribution that includes support over the entire maze or a policy distribution that includes support overall policies


SPEAKER_02:
And then to conclude, in this paper, we have proposed a novel approach to active inference based on Lagrangian optimization, which we have named Lagrangian active inference.

We demonstrated Lagrangian active inference on a classic benchmark problem for the literature and found that it enhanced epistemic drive to this hallmark feature.

It presents three main advantages over previous algorithms.

First, an advantage is the computational efficiency afforded by being able to pass backwards messages instead of needing to perform forward rollouts for every policy, like a tree search, so it scales linearly over time.

A second advantage is that it allows for directly inferring posteriors over control signals instead of relying on model comparison, like Daniel just explained.

And thirdly, it is inherently modular and consequently works for freely definable constraints for any factor crash, while prior work has focused mostly on specific generative models.

And they have also introduced a notation for hiding down constraints and piece substitutions on a Forney graph.

The constraint factor Forney graphs are useful not only for active inference, but for specifying free energy functionals in general.

And the authors hope that this can become a standard tool similar to Forney factor graphs when it is desirable not just to write the model, but also a family of distributions.

In the future, we plan to extend the work to more node constructions to further open the scope that can be attacked with active inference.


SPEAKER_00:
Awesome work, Bert.

Great job preparing it.

Jakob, anything you want to add on part one?

No, at the moment.

Okay.

Scaling linearly in time is really fascinating.

Like, if you planned 10 time steps, should the 11th step be a 10% bump in difficulty?

Or should it be another combinatoric explosion every little kilometer deeper into the future?

So, second paper.

Okay, first just going in deeply to the first sentences before accelerating across.

So they begin the paper saying, free energy principle postulates that the behavior of biological agents can be modeled as minimizing a variational free energy.

And this is commonly brought up, that we can model biological agents as or through or with minimizing variational free energy.

Just like saying we can model this regression by fitting an L2 norm, we can model this biological agent by fitting the ELBO or the VFE.

Active inference, which is AIF in this paper, is a corollary of the FEP that describes how agents propose effective agents by minimizing an expected free energy objective that internalizes a generative model, GM, of the agent's environment and prior beliefs about desired outcomes.

So,

VFE is the real-time behavior minimization.

EFE brings it into the prospective setting by introducing epistemic imperative and also talking about observations that haven't happened yet.

Variational objectives for active inference can be minimized by message passing on a Forney style factor graph representation.

So everything we know about Bayesian graphical models transposes into the FFG space.

The FFG is not a kind of Bayes graph.

It is a dual, a different kind of graph conveying the same information in a restructured format that we can then optimize or implement differently.

Several authors have attempted to scale active inference under message passing framework.

However, agents based on these approaches lack crucial epistemic characteristics.

So, one question, why was that?

Was it that previous authors only modeled VFE but not EFE?

Or was there some failure of the EFE loading on epistemic value?

I think the answer is the first one.

In part one, they identified this hiatus in the specification space, and they introduced the CFFG, and then...

In part two, which is the current paper, we use the CFFG notation as introduced in part one to define locally constrained variational objectives and derive variational message updates for GFE, generalized free energy, base control using variational calculus.

The resulting control algorithms introduce epistemic behavior in synthetic active inference agents.

We reason purely from an engineering point of view and do not concern ourselves with biological plausibility.

What a sentence.

In this paper, our contributions are threefold.

They use variational calculus to derive message update expressions for GFE control.

They derive specialized messages for discrete variable model.

And they implement the results in a reactive programming framework simulating a perception action cycle on the T maze.

With a full message passing account and reactive implementation of GFE optimization, it becomes possible to derive and reuse custom message updates across models and get a step closer to realizing scalable synthetic active inference agents for industrial applications.

So what is it about their contributions that makes the industrial and the engineering work more transferable or scalable?

Then they summarize the coming sections.

Section 2 reviews variational base.

Section 3 reviews active inference, perception, learning, and control in terms of message passing on the CFFG.

Section 4 focuses on the constraint definitions around a submodel of two facing nodes, hashtag Alice and Bob, and derives stationary solutions and messages for GFE-based control.

Section 5 applies the results to a specific discrete variable goal observation submodel that is often used in AIF practice.

They then work towards implementation in a simulated setting and describe a perception action cycle in terms of time-dependent constraints, section six.

The team A's task is described in section seven and simulated in a reactive programming framework in section eight.

Section nine has a summary of related work and the conclusions are in section 10.

It's also useful to put table one and table two up here.

Table one is an overview of notational conventions.

nice list of letters would be awesome to connect to the active inference ontology.

And then table two has a bunch of acronyms

Okay, section two, review of variational message passing.

So this section briefly reviews variational message passing as a distributed approach to minimizing variational free energy.

So first, they review variational base, 2.1.

Then 2.2, they review Forney-style factor graphs.

2.3, they move to the Beth-Lagrangian optimization.

Using Lagrange multipliers, we can convert the optimization on Q to a free-form optimization problem of the Lagrangian, where the Lagrangian multipliers enforce local constraints.

The fully local optimization then becomes this expression.

Again, more to say, they're using the Lagrangian constraint framework.

and the Bethe flavor of free energy, which is already node-local, to provide a very constrained, which is to say, possibly more solvable and tractable node-local computation.

And now they get to the constrained Forney-style factor graphs.

As we heard in part one, an FFG alone does not unambiguously define a constrained VFE objective.

Interesting question.

What is needed for that unambiguous identification of the VFE?

And so here they review their CFFG notation.

Here's figure one.

And we can again see that they go from the initial factor graph on the top left with an explicit CFFG on the top right,

Then they compress it down to the bottom left.

And then that uniquely identifies a logistical or an operational schedule.

Section 3, review of active inference by variational message passing.

In this section, we work towards a message passing formulation of synthetic active inference.

We start by reviewing active inference and the CFFG representation for a GFE objective for control.

So 3.1, they define active inference.

3.2, they define generative model.

Now they go to message passing.

In this section, we formulate a synthetic active inference as a message passing procedure on a model of past and future states.

Inference on a model of past states relates to perception and learning, while inference on a model of future states relates to control.

What is control, if not just perception and learning we haven't had yet?

Figure 3.

Constraint 40 style factor graph representations for variational objectives on models for past, left, and future states right.

I don't know if one has to cross their eyes or do some other magic visual experience here.

There are some small differences, like here there's a dashed box that's not here.

There's a data constraint clamp dangling edge here.

whereas that constraint is open here.

However, the rest of the figure looks pretty similar, and that tantalizingly points to some similarities between learning and memory in the past where we can clamp down part of the model to be data

and consideration of the future which is to say action and control where the observations are distributional beyond the dirac and they haven't happened yet and we have agency over them happening any thoughts on that either of you

It's kind of cool, and it's kind of forsaged in some of the other graphical models, but we'll ask the authors.

331 talks about past states, and then 332 goes into the model of future states.

So, a lot to read in the paper, but that key idea.

Because future outcomes are by definition unobserved, we include goal priors on the future observation variables.

Those are preferences.

We expect there to be observations, and we know that they will become constraints to a Dirac-like form, but in anticipation, we take a distributional approach to observations that haven't happened.

Now, what if we had uncertainties about the past, and we were doing kind of a policy-like search in our fuzzy memory?

Then where would time be?

section four they get to general gfe based message updates in the model for future states the goal prior and observation model impose simultaneous constraints on the observation variable in the corresponding cffg this configuration is modeled by two facing nodes so i i believe those nodes might be the two in the dash box tier

In this section, we derive the general GFE-based message updates for pair-facing notes.

We express the local optimization problem as Lagrangian.

Using variational calculus, we then derive local stationary solutions from which we obtain general update expressions for GFE-based messages.

So they describe the goal and the observation model.

4.2, local Lagrangian.

after the substitution of the factorization and applying P substitution to the local variational free energy objective, they get the local GFE.

The GFE is all set up to construct this Lagrangian and to do a variational optimization on that Lagrangian to get Q star.

4.3, local stationary solutions.

We are now prepared to derive the stationary points of the node-local Lagrangian.

We start by considering the node-local Lagrangian as a functional of the variational factor q sub x. Lemma 1.

Stationary points of L as a functional of q. What does lemma 1 do or show?

Lemma 2.

We derive stationary points of equation 4 as a functional of q sub z.

Note that by symmetry, a similar result applies to Q sub theta.

What does lemma 2 do or show?

In this section, we show that the stationary solutions of section 4.3 correspond to the fixed points of a fixed point iteration scheme.

Theorem 1, theorem 2.

What do these theorems do and show?

4.5, convergence considerations.

some further considerations and a corollary one what does it do or show now we get to five application to a discrete variable model in this section we apply the general message update rules of section 4-4 to a specific discrete variable model that is often used in aif practice using the general results we derive messages on this specific model and so here we see figure five with

It's been taken all the way to the point of the logistics of the messages for those two facing nodes.

Five three, data-constrained message updates.

The message updates for a data-constrained VFE objective, figure six on the left, reduced to standard variational message passing updates as derived by citation 28 and appendix A. So here we have those two nodes with a DROC

intervening.

Here we had X intervening in figure five.

So we had a distributional bandwidth.

Now we're dealing with a Dirac distributional bandwidth or channel, which is to say a data point being passed.

Now we get to section six, perception action cycle.

In this section, we formulate a perception action cycle that extends upon the GFE formulation.

Specifically, we illustrate how CFFG notation allows us to be explicit about local constraints.

As a result, the perception action cycle can now be visualized as a process that modifies constraints over time.

Pretty cool.

At the initial time, t equals one, no observations are available, and we initialize the perception action cycle with the CFFG of figure seven on the top.

We got a sneak peek earlier.

Now it's real figure seven.

As actions are executed and observations become available, data constraints replace the P substitution on the observation variables.

So it's almost like the P substitution prepared us to flip it out with data in some way.

Like data constraints are a secondary or a further constraint that is enabled through the P substitution.

When the time horizon is reached and all observations are available on the bottom, data constraints replace the p-substitution on the observation variables.

So it's kind of like we'll know when we'll know, and then it'll all be inferenced like memory.

But before we know what we later found out, it's more like control.

So whether we're in a retrospective memory setting,

a real-time sense-making setting or a prospective control-theoretic setting, it would be pretty cool to have like a mega-unified imperative and a tractable local procedure to do it, which in a sense is what they do.

So the perception action cycle with time-dependent constraints thus unifies the tasks of perception, control, and learning under a single generative model

and schedule.

This is the huge piece.

It's only through the FFG and then the constrained FFG can we get to not just making a base graph of perception, cognition, and action, cool enough, but bringing in an explicit node-local scheduling and logistics approach.

Wow.

The experimental protocol is summarized in algorithm one.

All it requires is a generative model and a variational distribution with associated constraints.

And then it's kind of like a dance.

Do, infer, act, execute, observe, slide.

We then get to section 7 with the experimental setting.

In this section, we describe a team-based task that serves as a classical setting for investigating epistemic behavior, citation 10.

The setup closely follows the definition in 30.

Citation 10 is Friston et al., 2015, Active Inference and Epistemic Value.

And citation 30 is from Fis Vandelaar et al., same authors.

in 2022, active inference and epistemic value in graphical models.

So here we have the T maze that was shown earlier with a smiley face.

No smiley face here.

And it's laid out and labeled starting position O, Q, C. That's where the epistemic value is.

And then L and R, the two reward arms.

And just for those seeking continuity, here's figure 7.4.

from the 2022 textbook.

Here we have the 2022 active inference mouse in a TMAs.

And, from 2021, here's our active InferAnts simulation, where it's actually appropriate, the nestmate is, like, much smaller.

So, for the nestmate, they can wander around a lot inside the teammates that, for the mouse, it only has one location it can be in.

So...

It's not as closely allied as 7.4 is with figure 8 here, but it's like the same... You could do it in the same lap.

They further specify the teammates and the probabilities of different things happening.

They further specify the teammates and the probabilities of things happening, and then

In Figure 9, they get to a CFFG describing the TMAs.

Let's go through it with the authors and annotate what it means.

We execute the same experimental protocol as before and plot the minimal free energies in Figure 10, top right.

The BFE-based reference agent fails to identify epistemic modes of behavior.

The specific choice of prior for the observation matrix prevents any extrinsic information, at least initially, from influencing policy selection.

By the lack of an epistemic drive, the BFE-based agent sticks to policies that confirm its prior belief without exploring possibilities to exploit available information in the TMA's environment.

A histogram of the number of wins per run is plotted in Figure 11 on the left.

The histogram suggests a bimodal distribution with a large mass group to the right and a smaller mass in the middle.

For reference, dashed curves indicate ideal performance for agents that already know A from the start.

For agents that first must learn A, deviations from ideal performance are expected.

The smaller middle mass then indicates that GFE optimization offers no silver bullet for simulating fully successful epistemic agents.

Namely, for some choices of initialization, the GFE agent may still become stuck in local optima.

Section 9.

I won't read it.

They describe a wide swath of related work, ranging from early work on the introduction of fornigraphs on through expected free energy and active inference.

and in section 10 they conclude they took a constraint-centric approach to synthetic active inference they simulated a perception action cycle through message passing derived from a single generalized free energy objective and dot dot in this paper we have adopted a purely engineering point of view and we have not concerned ourselves with biological plausibility

Specifically, the derived message updates come with considerations about stability and non-standard expressions.

Although we have engineered solutions to overcome these complications, it seems unlikely to us that the brain resorts to such strategies.

Interesting mic drop, but very humble.

And so now, as we give our last thoughts...

We've always held up the side-by-side at the Institute with a minimum of two.

And we've talked about that before in the textbook figure 4.3 setting with continuous and discrete time.

But there have been many other Min 2 experiences that we've all shared together.

And not just with this dyad of papers, but with this new intelligibility

of the relationship between Bayes graphs and different styles and constrained forms of Forney graphs were in yet another min-2 setting.


SPEAKER_04:
So that's what I would like to say in closing as we conclude the .0.


SPEAKER_02:
Yeah, I look forward to the point one and point two.

I have a bunch of questions about, for example, what piece substitution really means and for example, the time window, how many time steps you need to give your model already or whether it can unfold automatically and just in general to hear what they have to say because it is a very interesting topic.


SPEAKER_01:
yeah um same here also interested to um hear what the authors have just have to say and um i think yeah whenever there's um um

Whenever there's a generalization that, at least in the semantic space, affords a wider connection to different methods, and especially in the context of models represented on the graph, I'd be interested to

learn more about how we can represent agents in different kinds of graphs or how these constrained Forney style factor graphs afford different types of optimization methods to be performed on them.

and how this work can help Active Inference to interface with other domains which try to solve similar problems or perhaps different problems from a different angle.


SPEAKER_00:
Awesome.

My last thought is like, we planned to learn

at least to try here.

So I commend you both for that policy selection.

And now looking back, it's like data or a memory.

And then in science, it's like, oh, it's 1994.

This new genome is available, or like this new thing is exciting.

And here's the next step.

And it's like,

one must be as excited as can be in making the right measured decision then which later becomes an observation

at a different time point, yeah, and a different perspective.

So there are probably many exciting and important syntheses that this work is going to build our skills and our expressivity around, and the computational element is just excellent.

So thank you again, Bert and Jakob.

See you fellows in the dot one.


SPEAKER_04:
All right.