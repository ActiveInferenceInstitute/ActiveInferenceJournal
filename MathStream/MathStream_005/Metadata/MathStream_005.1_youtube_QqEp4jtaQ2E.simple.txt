SPEAKER_00:
hello and welcome it's july 17 2023 we're here in active inference math stream number 5.1 with chris bodner on topological deep learning graphs complexes and sheaves so thank you for joining chris looking forward to your presentation and discussion


SPEAKER_02:
Yeah, thanks all for having me.

So yeah, as I was just saying, this is my PhD thesis, which I finished a couple of months ago.

It's also kind of public online.

So if you want to go into the details, just kind of look this up on the internet and you should be able to find it easily.

Obviously, there's lots of stuff in there.

So I kind of try to give an overview of the day and maybe also go in a little bit more detail in certain aspects.

um since there's you know not a lot of time to go through everything um so now i'm on my microsoft research so this is some basically all work that i did in the past then when i was at university of cambridge um all right so let's let's get uh started

Right, so let's start very easily.

Now, I'm actually not sure exactly what's kind of the background of the people who are watching, but in machine learning, there's all these kind of subfield that emerged a few years ago, which is called geometric deep learning, which is essentially looking at how to apply these kind of deep learning neural network architectures on data, leaving on all sorts of

you know, kind of structures or geometries or spaces, if you want.

And this has a lot of application, especially in the life sciences.

And there's kind of been a lot of instances of this in kind of, you know, very famous publications, some of which you see here.

But, you know, just to give some examples, for instance, if you have proteins or molecules or things like that, they usually represent it as graphs.

And you kind of have some data living on these graphs, like kind of the properties of certain atoms and so on.

So these kind of things and so far this kind of

spaces or these kind of problems learning problems if you want uh they have been approached mostly uh kind of with a geometrical mindset as the kind of name of the of the subfield um also mentions um but um something that you know i would argue is that geometry is not everything that you need and there's kind of other non-geometrical aspects when you are in such a setting um

And this is kind of quite obvious once you realize that the spaces that kind of show up in the field and in many applications, they are very heterogeneous.

So as I mentioned, for instance, you could have graphs that could represent anything.

In this case, it's the caffeine molecule that you see here on the left.

And you want to have some models that predict certain properties of this molecule and so on.

But for instance, you can have grids.

And we see grids all the time.

and data living on grids, and I'm referring to images, videos.

They are all kind of pixels living on a grid.

And then you can have more sophisticated things.

You could have some meshes, for instance.

they're all over in computer graphics, and then you could have some sort of manifold.

So for instance, if you're doing maybe weather modeling or something, we live on a sphere, topologically speaking.

So you might want to model your data as living on a sphere and so on.

But nonetheless, even if these spaces are kind of geometrically kind of heterogeneous, and some of them don't even have a geometrical structure in kind of a strict mathematical sense, they all have what's called a topological structure, which is kind of like a weaker kind of structure.

But it's kind of more general.

And I'm going to talk a bit in a few seconds about what that means.

But in general, when you do kind of mathematical physics, you kind of have a ladder of structures where you kind of keep building on top.

And the more structure you have, the more sophisticated things you can do and so on.

And kind of at the base of this diagram, just a set, just kind of a collection of elements with no kind of extra structure.

And then you kind of keep going up in this ladder.

you add stuff on top of sets and so on.

And as I was saying, kind of most of the work is kind of focused on maybe the top levels of this hierarchy, but it's kind of topological level, which are kind of the weakest kind of level you can

and on top of that has kind of been neglected to a large extent.

And part of what I've been doing in my PhD thesis was essentially looking at this kind of learning problems on these kind of spaces from a more topological perspective and, you know, kind of try to fill in these blanks.

So this is kind of the overview.

And now, okay, so if we are to adopt this topological perspective, what would that actually mean or how would that look like?

I guess it could look in different ways, but in what I've done in my faces, it looks kind of like this.

So we have horizontally, we kind of have a space that could be anything.

It's just kind of an abstract space.

You know, it could be a grid or an

So things like we've seen in the previous example and kind of vertically attached to the regions of the space we have data.

So data is kind of this vertical component and you kind of see these flags kind of being, you know, kind of anchored in these regions.

So that kind of signifies you have some data that's kind of associated with that region.

So that's kind of the high level perspective.

And I'm going to make that a bit more concrete a bit later.

And there's kind of two essential things about this picture.

A first thing is locality.

So the data is attached to some regions of this space, this topological space.

And in that sense, it's local.

So it's kind of associated with the region.

And maybe to give a concrete example, if you kind of have a temperature sensor somewhere in space, you could think of whatever that sensor is measuring is kind of a property of kind of the immediate surrounding

you know, around that sensor.

So it's kind of describing some property of a region in space.

So that would be kind of a good example.

And another kind of axiom that we're starting with is that the space has structure.

So the space has kind of, it's kind of made up of various regions and these regions intersect in various ways.

so the and that implicitly also makes our data structure because the data is attached to these regions so so there is kind of some some structuring in the data um all right so that's kind of the picture and actually many of these things relate to category theory i'm not going to go in depth into this because it's kind of sophisticated and i'm not an expert myself in category theory um but kind of the the high level here is that

category theory is kind of a nice way to translate between different structure in mathematics and kind of discuss about properties of certain kinds of objects and translate that to some different kinds of objects and find all these kind of relations and connections.

And a concrete example is, for instance, if you want to study some manifold, some surfaces, you could associate some groups to the surfaces and then

any sorts of relations between these kind of surfaces also translating some relations about these groups or some other algebraic structures so you could study these manifolds by doing algebra instead of doing you know geometry or topology or something else um so also in this case this kind of manifests in the fact that we kind of translate these um

from spaces to data.

So because we associate the regions in a space with certain kinds of data, this is how this translation manifests in what I've just described in the previous picture.

You could think of this as some sort of translation or mapping from spaces and regions in that space to data attached to that space.

But yeah, I'm not going to go in a lot of detail into this, but it's just to keep in the back of your mind.

that there's there's this stuff lurking in the background um all right so this is i i promise this is the only math definition i'm giving in this talk and then then i'll stop um but just because i'm mentioning topological space spaces quite often i just wanted to kind of um give this axiomatic definition um which might sound sophisticated but i have a picture at the end and hopefully it'll be clear um so

Yeah, so what is it?

So it's just a set.

As I was saying, we start with sets and we put stuff on top, right?

So you start with a set, and then you also have a collection of subsets of the set called the open sets that need to satisfy certain axioms.

So you could think of these open sets as kind of regions of the space, very informally speaking.

So something that kind of has to be satisfied is that, well, the empty set and the set itself need to be open sets.

So in some sense, you could think of this as saying the set itself is a region of that space very informally, which, you know, it's kind of, let's say, obvious.

And then there's some

kind of constraints about intersecting and taking units of this region so uh if we take the intersection of two regions we should get another one of these regions um and if we take a union of these regions we should take we should get another region um and uh there is some constraints again like okay how big this intersection should be there should be finite intersections but you could have infinite unions but that's a technicality and uh we can just skip

anyways but to see a picture so on the left you just see the set x itself and here i put like a potential neighborhood structure kind of like open set structure on this space so we have an open set here another open set v by this axiom the intersections would also be an open set so you see this intersection in the middle being another opposite and then the set itself is another open set so it's just kind of a splitting stuff into regions kind of you could think of it like that

All right, so this is a topological space.

And now let's add data, right?

So we mentioned that we have data and then we put, sorry, we have a space and then we add data on top.

So, so far we've seen how a topological space looks like.

Now let's add this kind of vertical stuff, these flags that you saw before.

We just put some data on top of these regions.

And if we put data on all the regions of the space on all the open sets,

um we get these uh structures that in category theory like in algebraic topology also geometry they are called pre-sheets um which which sounds very fancy but all is just kind of a definition of uh what i was already describing essentially you have some data for each region these these f of so for instance for uh region u you have this f of

u which is kind of the data attached to region u so you could think of f of u some some set with with describing the data that lives there in that region um but there's also an extra thing you you have some some sort of maps going between these kind of uh pieces of data um and these are called restriction maps and and why is that it's kind of they provide you a way to uh

zoom in if you want.

You have the data attached to the whole set X, and then you could think, okay, how do I take this data?

How do I go from this data to data on a smaller region on X?

There's kind of a way to zoom in on that data.

essentially and i'm going to show some some example in a second so these are called um pre-sheaves and just to see an example our uh space here is kind of one of the simplest kind of space you can think of it's just one d a horizontal line right it's just the real line um and then you have some regions which are just given by open intervals uh on on these uh

And then some pieces of data could be functions, like continuous functions on those regions.

So here's some sample data on this first interval.

Here's another function on the second interval.

Here's some data on this third interval.

And actually, in this case, it happens that all these

functions agree on the overlap, so where these regions overlap, they take the same values, and we can actually glue them together in a single function over the entire region.

So this is just an example of a pre-shift, and it's called the pre-shift of continuous functions.

So our data in this case is continuous functions and the space is just the real line and we put these functions on top of the real line.

But it turns out because of this kind of special property that we can kind of glue data and we uniquely get some other piece of data, right?

We can take these three pieces, it's just exactly like a puzzle, right?

We put these things together and we get a fourth thing which is kind of a single function where we just overlap these functions, right?

These pre-sheaves that satisfy this kind of properties where you can kind of glue them to get a unique piece of data, they're called sheaves.

And basically the pre-sheave of continuous functions is actually a sheave.

So this is kind of a way to formalize data attached to these things.

It's going to get less technical in a second.

So just to give more examples.

So for instance, in this way, we could describe data on a sphere.

And let's say this data is just some vector field on a sphere.

So let's say this is

earth right this could be some wind vector field right like if we do weather modeling or something you just have a vector field describing the wind uh on on the surface of earth right um and you might want to do some machine learning on top of this where this kind of vector field has a shift structure and you could think of it as a shift because you know if you have like some vector field on the red region a vector field on the yellow region

I can kind of glue them together uniquely if they agree on the overlap, and we get the vector field on this bigger region.

But something that's quite nice is that even if we have a very, very different kind of space, namely a graph,

which is very different from a sphere in all points of view, we can still apply the exact same kind of axioms and terminology and kind of definitions, and we can have a shift over a graph.

So in this way, we could have, for instance, some features associated to the nodes of the graph,

some features associated with the edges of the graph.

And there's another node which has its own features.

And this is actually the exact same thing we have in graph machine learning.

So this is quite nice for this kind of topological perspective allows us to do is, you know, we kind of have a unified way of thinking, if you want, about very kind of heterogeneous spaces, and we can model on all of them.

data attached to them by using this kind of shift terminology and other ways as well.

But I'm not going into that in this talk.

All right.

So this is kind of an overview of what I've been doing in my thesis.

And just to kind of dive a bit deeper into this, I just wanted to go into one paper that we did at NeurIPS.

last year yeah so this was last year um on uh what's called shift diffusion so essentially how can we use what i've just described to do some useful stuff when doing machine learning on graphs

um all right and this was a collaboration with francesco di giovanni ben timberlane uh pietro leo my advisor and uh michael bronstein um okay so before i dive into this i just want to give some background in case people are not familiar with this um so the kind of

favorite architecture of people doing machine learning on graphs these days are these things called graph neural networks, which are actually very simple kind of models.

So in this setting, you have some features.

So each node in your graph will have some features.

This is what this H vector here denotes.

So it's the

vector h associated with node a at layer or time t whatever um so you have some features for each of these nodes and what you're doing each of if you're at a certain node you want to kind of compute a new representation or a new new features for for this node at the next layer um

So essentially, you're learning representations.

And what the graph neural networks are doing, this node will receive a message from all the other nodes that are neighbors with this node.

And this message can also be passed, can use some neural networks in there.

But essentially, it's some processing of these features of the neighbors.

These are aggregated into this message, so here in green.

And then this is passed through some update function that combines the message from the neighbors with the old representation of this node, and it gives you a new representation at the next layer.

And this happens for all the nodes, right?

So then you get some new representations for this node, and this is one layer.

And then you kind of keep repeating this for as many layers as you like.

So this is kind of how you do deep learning on graphs.

It's kind of a very very simple recipe and most models actually vary in the way they kind of compute these messages and in the way this update function is designed but that's kind of the parameters they most of these models use otherwise they all kind of respect this framework and work in this kind of particular way.

And to give you maybe an example for why you would want to do this, you might want to do node classification.

This is kind of a classic problem in graph machine learning.

There are others, but I'm just going to talk about this because it's easier.

So you have a graph, and this graph has nodes that have different labels.

Here, there's just two kinds of labels, these orange and blue.

And you have some edges between these nodes.

And what you want is you want to do this kind of message passing that I was describing to compute some representations for these nodes where you can easily classify the blue and orange nodes.

Now, something that's quite interesting is that for many kind of graph neural networks,

depending on the properties of these graphs and how these different nodes are connected, their performance might vary quite a lot.

So in particular, they're affected by this property called heterophily.

So this is a measure of how much opposites attract if you want.

It has a very simple formula.

Basically, you take the number of edges between orange and blue nodes and you divide by the total number of edges.

So basically, you kind of check how many connections we have in this graph between things that are opposite to each other versus connections that are between similar kind of nodes.

um so if you have this kind of a lot of these kind of heterogeneous connections then you have very high heterophily um and it turns out that many graphing and interjecting struggle in that setting it's very hard to to classify things in that setting um and intuitively you could kind of also you know figure out why because you know you could easily apply to some kind of reasoning

where you know oh this node looks a lot like this other node is connected to so they kind of must be in you know in the same community if you want or in the same label but it's much harder to do that when you know all things are kind of different from um from each other um and and these communities kind of don't form right even visually if you if you see a graph and it has some nicely clustered communities you know it's quite easy to draw a line between those and say oh this is

communities and other community.

But if things are very mixed, then it's quite challenging.

And it turns out it's also challenging for these models, not just for our intuition when we would have to do this.

So this is some problem where this topological perspective I was mentioning will be used to do some useful stuff.

OK, so coming back to sheaves on graphs.

And at this point, I think you can largely forget what I mentioned in the introduction.

Or if there's something you misunderstood there, we start from zero a bit here.

So there's no problem.

On the left, you just have a graph, which is kind of the incident structure of a graph.

I just wrote here the simplest possible graph that has two nodes, v and u. And then there's an edge between them.

So this is just a graph with one edge.

That's all that's going on here.

And I've just represented it by kind of in this kind of incidence structure kind of way, right?

Node v is incident to node e and node u, sorry, edge e, and node u is incident to edge e. So this is just an incident structure, and what this kind of triangle symbol is showing is just

this incidence structure is just a way to symbolize this incidence relation, if you want.

OK, so this is just a graph, right?

And a way we can kind of think of sheaves on graphs is just mapping these graph structures.

So this is kind of this categorical theory translation.

We translate this graph into something else, which looks

know very similar the structure is kind of the same it's just kind of the meaning of these uh things change so for each node v we have um here this will be a vector space so fov is a vector space for each node u we have f of u which is another vector space uh for each edge e we have this fe which is another vector space um so all nodes have their own vector spaces

and the features associated to those nodes leaving those vector spaces.

So basically for each node, we have a vector space of features.

That's all that's going on so far.

And also these arrows that these incidence relations also translate into something and they translate into the obvious thing, linear maps.

So if these are vector spaces, then these things should be linear maps or just some matrices essentially, right?

So for each arrow you see here, we have a matrix.

And

Something that I'll argue and show in a few slides is that basically message passing on graphs is very similar with group actions in group theory.

Let me explain exactly why.

We can think of what we have on the left, these arrows from the incidence relation.

We could think of these arrows as some buttons we can press.

So what do I mean by that?

So if we have this node V on the left, right, and this E, now, if we have some features, some feature living in FOV, right, we could just kind of press this arrow button here.

And then if we multiply this matrix by this feature, we will get an edge feature.

So it's kind of like, if you go along this arrow, this matrix will multiply this feature

this vertex feature, and it will give you an edge feature.

So you can think of these arrows as kind of giving you some sort of actions that you can play with to move features from vertex to edge and edge to vertex.

So in this case, it's kind of a left action.

So this is what I'm saying.

I'm taking this arrow, which is this one here, and I act on some features of node v, so this h of v that lives here.

And how I do that is I just take this matrix, this matrix associated with this arrow, and I multiply this vector HOV.

So just matrix times vector.

That's all.

And then we get an edge feature.

So this is just kind of a way to move from here to here.

So this already kind of looks a bit like message passing, right?

We're kind of passing a message from this vertex to this edge.

But now we also need to pass a message from this edge to this other vertex u. So we need to get from v to u. And we did that by passing through e. So by doing that, we could do that by going in reverse.

So we could have a right action, where instead of applying this matrix, we apply its adjoint matrix.

So those are the transpose matrix.

So if we want to go from here to here, instead of applying this matrix, we apply its transpose because we want to go the other way around.

So if we compose these things, then we can move features from V to U. So this is just a way that we can apply these actions to do message passing.

And these are called shift actions or pre-shift actions.

And I'm going to now show what's the relation with

between this and what we have in group theory.

So one way to represent the group is by kind of having some sort of graph like here on the left.

So we kind of have some star object.

It's just kind of a dummy thing there, but all the group structure is in these arrows, right?

So for each group element, so let's say this G is a 90 degree rotation, for instance,

uh let's say we do have a group of rotations just to have some concrete example these um so this arrow could correspond to a 90 degree rotation we have another arrow that does the opposite minus kind of 90 degree rotation that's the inverse of that transformation um so this is kind of the structure of this group and if we have we also do this kind of similar kind of translation as we've just seen um so basically basically we define a pre-shift on this group

uh we map this star to a vector space so the star kind of replaces the vertex uh we had before now we just have a single vertex uh and it's just these arrows we have um so the star is not this vector space that you showed here in in blue right um and now if we actually do group actions which are kind of a very well established concept in group theory um

Well, for instance, if you want to act on this vertex, sorry, not vertex, on this vector V right here, you have a vector in this vector space, and you want to act on it by this group transformation G. So essentially you want to press this arrow so you apply some action on it.

Then what you do is, well, because of this translation, this G has been mapped to some matrix, which is the rotation matrix, the corresponding rotation matrix.

and you apply this rotation matrix on v um and you get like a 90 degree uh rotation here um so this is what what's going on this kind of vertical vector is showing the rotated vector

So this is completely analogous with what we've seen on the previous slide.

This is how kind of sheaves connect these kind of actions.

So essentially what you could think of as message passing is same as group actions in group theory, but you just replace this group with a graph.

So it's kind of analogous to that, right?

So it's just kind of a different kind of translations

where we replaced the object on the left.

Now it looks like this is a graph.

This is a group.

But the rest stays exactly the same.

And this gives us a way to formalize, in a way, by looking in this topological perspective to connect all these symmetries and things that have been explored quite a lot in machine learning to message passing on graphs and to see one way in which they are related.

um okay so now you might say okay this was all very sophisticated and nice but you know what is this going anywhere basically um and i'm just going to show you kind of a very short example there there's more but you know the time is limited um and something we we showed is that

as I was saying in the beginning, many graph neural networks kind of struggle in these heterophilic graphs.

And what we've shown is that no matter how heterophilic or kind of weird your graph is, you can always kind of find some shift structure, essentially kind of a message passing neural network that

if you use sufficient layers, it will be able to disentangle the classes of the nodes.

So just to show you in this picture, what you have here on the very far left, the colors of the nodes, they show the class.

So we have

There's three colors here, so three classes, right?

And this is kind of the graph in the beginning.

And the position of the nodes in this box denotes the features.

So that's a way to kind of just visualize the features.

The position, the 2D position is actually the 2D feature vector of each node.

And you can see in the beginning, everything is kind of super messy and entangled, right?

Like if you want to classify these nodes, it's kind of very hard because their initial representations are very messy and kind of intertwined.

But as we stack more layers of a particular kind of sheaf or a message passing model, you see how progressively these classes get kind of more disentangled and more disentangled.

at each new layer and so these representations kind of collapse and they form these kind of clusterings right and then when you get with something like at the end you can kind of see these three communities very clearly and it's extremely easy to separate and kind of the essence behind these results was

we showed for different kinds of problems what sorts of chief or message passing models you need by using the theory to solve kind of problems.

And this is quite important because it kind of shows you some important bits and pieces in the architecture that you might want to kind of change or

or use in order to solve certain kinds of problems.

And we also had some sort of impossibility results.

So if you use a graph neural network of some kind, you can't solve this problem or you'll struggle to solve this problem.

And we also saw, okay, if you use some more general ones, then you might have a chance.

So this is kind of the high level view behind this theoretical stuff.

And what we actually do in practice is to essentially learn these message passing functions or to learn the sheet for these matrices.

So in practice, like when someone gives you a null classification task, it's very hard to know beforehand what exactly is the right chief or the right message passing model to solve that task.

and what we do is actually we learn that from data so we learn these matrices that do the message passing we learn them from data um by passing some using some neural networks which are shown here in red um and and then you learn how to kind of

transfer features between these vector spaces and kind of move them around so this is just showing how these vectors which are features of these nodes and edges how they're kind of moved around by kind of going through the by these matrices just some matrix multiplications um

And okay, so that's kind of a high level view behind this model.

And we evaluated this on some kind of real world heterophilic data sets where you have to classify nodes based on kind of various communities or different kinds of labels.

And these data sets going from

um right to left they are getting more heterophilic so in some sense more challenging for classic architectures and our models which are kind of inspired by all this stuff that i mentioned they score quite highly in in these benchmarks

and at the same time we also revealed some or justified some various choices that other models in this space have done but maybe they were not so well justified or maybe they had different kind of motivations we also managed to kind of show why various things they were already doing why they make sense from the point of view of this kind of

um theory um all right well that that's all um all i had um yeah thanks for for listening and yeah happy to chat more about this and also have lots of backup slides in case you know uh depending on how far we venture off with these questions


SPEAKER_00:
cool well awesome work thank you for the presentation for people who are in the live chat they can write some questions but there's many things i think we could talk about so i want to start with reading a quote from an abstract of the paper by

van der Laar, Coudal, and de Vries, just to kind of ground this in the active inference context and really justify why the message passing approaches that you are describing are helping in the active inference modeling.

The paper, it's two papers, it's called Realizing Synthetic Active Inference Agents.

they wrote with a full message passing account of synthetic active inference agents it becomes possible to derive and reuse message updates across models and move closer to industrial applications of synthetic active inference framework so how does knowing the message passing structure help reuse a model across different settings or like facilitate the legibility of the model


SPEAKER_02:
Right.

So first of all, I'm not super familiar with the kind of active inference literature.

You'll have to help me there a bit to anchor maybe the discussions a bit more into that.

But I think if I understand correctly, the kind of question you're getting at is basically how can message passing help us generalize in various kinds of settings or maybe from one graph to another and things like that.

this is an active area of research, how exactly this generalization is happening.

But something you could notice or something that, for instance, was shown, like these models are quite good at, for instance, plotting patterns or structures, depending on how exactly you implement them.

But for instance, let's say you have a triangle in your graph or

That'd be kind of the simplest structure, right?

You have a triangle or some other kind of gadgets in your graph, like particular subgraphs, right?

That might show up in different kinds of various graphs.

The graphs themselves might look completely different from each other.

But these kind of patterns might kind of be re-emerging in multiple, like local patterns might re-emerge in multiple graphs.

And that could help you a way to kind of generalize, right?

Like you could see, for instance, if you have clicks, they're super important in kind of when you do social network modeling and things like that.

because they kind of show this kind of um you know close group of friends right they all talk to each other so they kind of form a clique like everyone's connected to each other right and then you you might be able to use that then generally another completely different social context um where you know these agents are again kind of communicating in a similar matter or connected in a similar manner even if the kind of overall pattern is quite different um and

it goes way beyond just kind of structural similarities because there's also features in there.

So there's combinations of kind of structural patterns and features that, you know, give your even more complicated patterns, right?

Like you might have a triangle, but then also two of the features in this triangle are, you know, look in a certain way and one that looks in another way.

So, so that gives you even more kind of refinement and,

and even kind of richer pattern detection abilities.

So you have essentially this ability to kind of spot patterns at multiple scales as well.

So you could see this happening at multiple scales.

You could have patterns of patterns, right?

You could have entire communities connected in various patterns and so on.

And again, it's kind of also a research question.

How do you capture these hierarchical patterns and so on?

You know, in general, you have to do more message passing if you want to capture things that are further away from each other because otherwise they can't talk to each other, right?

So yeah, I don't know if that actually answered your question or if I was kind of going in the right direction there.


SPEAKER_00:
it's great it brings up a lot of different cool ideas like like this patterns all the way down but totally agree i i think we can now perhaps explore some more specific connections to active inference because hopefully the the um listenership or viewership of this it's kind of like a two-way street like some people may be coming from more of your background and then learning about active inference and generative models as a specific system of interest the first time but also certainly for a lot of people in the active inference space like

these methods coming from category theory have only recently come up to i guess more prominence in bayesian modeling at least where we are so it's kind of it's a cool connection to make yeah um

think one of the biggest touch points off the bat was like you mentioned multiplying a matrix by a vector and interpreting that as an edge so just in the in the inference part of the generative model of about sensory observations we always talk about the thermometer observation and an underlying hidden state temperature

so that like exactly describes that case and that's why we can represent the active inference generative models the perceptual parts and the action parts in terms of matrix multiplication it's why the matlab code for generative models does look mostly like matrix multiplication and it can all be done explicitly that way so how does that feel like are there models that don't have this feature

Or what do we gain by having all of our edges defined as a pre-sheaf action with a matrix and a vector in this setting of agent generative models with perception and action?

Any thoughts on that?


SPEAKER_02:
Yeah.

essentially the graph structure is telling you these things interact in some way.

So there's some communication between these

vertices if you you know if we're kind of in a graph setting right um and then kind of what the sheath is giving your or any message passing model essentially is expressing a way that in which way that connection should manifest in the model or in what way that connection should be used to process information um so in this case i was mentioning okay we you have like

linear maps because you could go on the type if your type of data are vector spaces then this transformation will be some sort of linear maps um but it doesn't necessarily have to be so for instance it could go to any non-linear transformation right like if and and this is what's happening in general in practice um you know if you if you have a neighbor the message coming from that neighbor could be modulated by any sort of transformation you want so it could be linear it could be non-linear it could be

something i don't know you you can specify it basically but essentially you could think of this as

you have a structure level telling you who should communicate to whom.

And then you kind of have some semantics that this kind of shift is adding on top saying how should these things communicate, right?

Like the first thing is who should communicate or what should communicate.

And then the semantics we add on top essentially describe how should that communication manifest essentially.


SPEAKER_00:
Very cool.

I think that maps exactly to how we talk about the sparsity of variables in the generative model.

So here, the topology of the nodes in the graph that we want to do message passing on are going to be describing the agent and the environment, or the generative model that includes perception, cognition, and action.

so a lot of people have proposed different sparsity architectures for integrated modeling of perception cognition action so one example would just be like kind of around the clock like action influences the environment environment influences perception back to cognition you could add a self loop

using a Markov blanket and different kinds of connectivities and that defines the sparsity topologically which is where you showed the stack and and you were on the second and the third levels um I think of the stack and then like what flows it has to be described how it actually what that Edge does so what what is that what is that that is also being provided


SPEAKER_02:
Yeah, yeah, exactly.

And it could even go to the extreme where, you know, does that edge actually do anything?

So for instance, if you have a matrix that's just the zero matrix, for instance, associated to that edge, it would just kind of multiply by zero, right?

And that gives you zero.

And it's kind of essentially pruning that edge, right?

Like I can't get rid of it.

I don't want that communication to happen.

But there's also kind of this possibility where these kind of semantics, they override the structural level.

where you say, OK, I don't need to communicate with this other agent, person, or whatever.

It depends on what these vertices actually mean and in what context you are.

And then there's also the case where you could do some sort of selective pruning where

this matrix depending on um so in kind of linear algebra the matrix has a kernel so that it's uh all the stuff that that matrix sends to zero so what vectors are sent to zero right but not everything will be sent to zero unless you're the zero matrix

So depending on the features of the neighbors, you could also just send some of the neighbors to 0.

And that removes those neighbors from the equation.

They're not factored in anymore.

So it's a way to get the sparsity, I guess, that you were also talking about.

where only maybe a small subset of the inputs or only a subset of the features are actually doing some meaningful stuff among the neighbors and everything else will be kind of zeroed out.


SPEAKER_00:
Yeah, that makes me think of the lasso regression, which tries to set most variables of having an impact of zero so that a few hopefully important variables really pop out in the analysis.

But also there's newer techniques, I guess, of attention modeling and reweighting that isn't just like, okay, set five of them to one and then the rest of them to zero, like more nuanced.

So I think that sparsity regression

with the expressivity is basically the the best of both worlds because you do want to have a situation where there is an edge but the attention being paid to it is zero so functionally that doesn't have an update on the belief state even though the in principle the edge exists and that's why we can model situations where like the

agent believes they have impact in the world but actually just because the edge in principle exists doesn't mean that it has any given impact and so that allows like the articulation of these models where they factorize and keeps interpretable motifs in terms of just little clusters of motifs here in our case describing the action perception and cognition

types of systems of interest, but people I believe already implicitly do this.

Like they will often add an adjective and refer to X kind of active inference.

So like deep active inference with a temporal horizon, sophisticated active inference with this kind of nesting.

And those are pointing to a given feature, but of course those features as we're hoping should be composable.

And so this seems to be bringing

tools that are even more general than just action perception modeling because they're at a lower level of abstraction than like any specific system of interest but where this work and kind of timeless thinking around cybernetic systems come together through the active inference generative model as a base graph it gets very exciting


SPEAKER_02:
Yeah, yeah.

And maybe also something worth emphasizing here is that even if this kind of semantic level can get rid of some edges, right, by doing this kind of pruning, something it cannot get rid of is the computation.

So something that kind of that structural graph level forces you to do, it kind of tells you what should you spend compute time on, right?

Because like if

even if you're going to decide to prune an edge, you still need to decide that, which takes compute time.

So you still need to look at all your neighbors if you're a node and decide what to prune or maybe you don't prune anything or whatever, but you have to look at every edge.

And one way to look at this is the graph structure defines your computational graph or kind of a computational

yeah a series of computational steps you have to execute and then the kind of the shift structure or the message passing model actually specifies what those steps are and you know in what particular way they they look exactly um and so yeah that's one point and yeah you also mentioned attention and actually

Yeah I'm glad you did because this is actually quite related and in certain ways more general than attention and actually maybe going back to this slide it might be a nice way to see this.

So here basically what happens in attention, instead of learning these matrices that we learned here in attention, you learn attention coefficients here.

So you just learn a scalar.

That's the attention coefficient.

How much attention should I pay to essentially this overall edge, let's say, which will be just a scalar.

What we do is kind of a bit more complicated because you just learn, how do I transform these neighbors?

So it's kind of a whole matrix rather than a single scalar.

But there's also some subtle differences.

But in a follow-up work we did, we also combined this with attention and went a bit more general and that also worked quite well.

But the kind of underlying idea is very similar.

You want to modulate the way you transform information based on the information itself, right?

So you have this kind of one level of recursivity, if you want, or kind of, yeah, that we're also alluding to in that

you know it happens in active inference where okay you're you're so if i'm node v right my name are you it has some features and based on these features which are x u i'm gonna find out the matrix that will be used to process x here right so it's kind of very recursive and it's what happens with attention right based on the features of node u i'm gonna compute an attention coefficient that i'm gonna apply to these

feature or view, right?

I'm going to decide based on this feature, how much attention should I pay to it?

And here we decide, how should I process it more generally in a linear way?

So you have this kind of loopiness structure embedded in there.


SPEAKER_00:
Awesome.

bring up a few more points because i think there's there's so many great pieces so toby saint claire smythe who we recently discussed his dissertation in livestream 54 introduced a term or at least a phrasing the compositional cognitive cartography and so thinking about the compositionality of cognitive systems

and i think what you're describing here with this notion that the mappings are more general than the kind of attention mechanisms known famously today that those represent like a lower dimensional special case of one kind of architecture makes me think about how the bayesian graph is kind of semantic in principle

and can have all of these nice categorical formalisms around them, but then, and you can even build the connector to empirical data with the pre-sheaf and the sheaf, which may be news to even many empirical researchers doing data analysis, certainly was for me, but the message passing provides a rigorous translation from whatever semantic model is proposed topologically to an implementation procedure

that can be planned for.

and execute it in linear time or at least with definable characteristics.

So message passing plays a really important part in going from like the abstract what is possible to the implementations of any of these actual models.

And it does it in a really general way where is it accurate to say that we hope that implementation with message passing compatible generative models will kind of roll out better

because we won't have some of the engineering challenges that less reusable abstractions might carry?


SPEAKER_02:
It's hard to say.

I think there's also certainly some limitations to this paradigm.

as well so just kind of doing this kind of message passing thing as you you were mentioning one thing is that it kind of scales up uh quite easily like linearly with the size of the graph but that also come at the cost so there is certain results showing this has limiting expressivity um so if you actually want to to

go beyond this.

For instance, you have to, instead of just looking at pairs of nodes, you have to look at tuples and these kind of high order groupings of nodes in order to kind of get higher expressivity.

There's all sorts of techniques to do that.

But yeah, and there's always this kind of tension between

being more expressive and being efficient that you know will always be there in any sort of algorithm or method so it's kind of hard to say I mean it's definitely we can definitely say this is kind of not the ultimate solution let's say if you want to do things message passing in itself you know but you know maybe doing some sort of computations on graphs you know could be

Maybe also something that's maybe missing a bit in the GraphML setting is the context where you assume your graph is known and you need to have some graph structure, or at least a sensible way to construct it.

But for many more, I don't know,

more how should i phrase that um i guess for less clearly defined things like okay if i'm an agent doing perception in the real world or something right like

If I'm trying to create a graph of the world, what's an object?

What do I create a node for?

If I want to have one node per object and there's some connections between objects and things like that, I know it's some wild example that comes to mind.

I don't know if you actually want to do that, but let's say you want.

Then there's also all these blurry things like what's an object and what's not an object?

somewhere in between maybe you know is that a node is that so it's kind of like the what i'm trying to say that the graph structure is kind of very discreet right like it's kind of the node is either there or it's not there and edge is there is not there

But then the world is kind of really fuzzy.

So if you use graphs as a model for your world, then there probably has to be some decision to be made somewhere about these kind of fuzzy concepts.

Do they actually translate in a concrete graph entity, like an object, an edge, or whatever, or not, based on some kind of inference procedure?

And I don't know if we did that or not as kind of humans, as intelligent agents, but that's, you know, kind of some interesting thing to think about.

Maybe you could also, well, maybe one way to solve that is also kind of stuff like soft edges and things like that.

And in some way, you know, if you have attention coefficients, it's a bit like that, you know, like if an edge has a weight of 0.001 or something, it's almost like not being there, but, you know, it's still kind of there.

It's a bit of a soft graph architecture.

So I guess at the edge level, you can implement this softness.

But I think it's a bit harder at the node level.

How do you model a node that's there and not there?

Yeah, just some random thoughts.


SPEAKER_00:
That's very interesting about the fuzzy object identification and similarities and differences between nodes and edges, even though in some ways,

have some similarities too um or interoperabilities too one other point of contact was like an underlying hidden space that we understand topologically that projects a vector space at in from different places so that could be a vector of thermometer readings and we want to have a smooth path within the homeostatic

range defined up to a boundary point not saying that that's the structure of the world but a structure of a very heuristic and simple model might be to aim for continuity and have a defined hidden state space that has continuity underneath

and is able to emit vectors so that kind of brings some of these classifier type discussions that you brought up and like the kind of fundamental impossibility of geometric classification because you're you are going to end up with gray zones whereas even if it takes a bitwise description you can separate the network so that gives an actual completeness measure and that allows

measures like i mean amount of computational resources or in a more like statistically principled way like the bayesian information criterion so how many nodes should we have we should be on some trade-off front in some modeling space i don't know what to tell you it's a map not the territory and that's because that's more justifiable and so uh even lifelike organisms might want to self-evidence staying emitting from a living state

and so that provides a really simple graphical architecture to cybernetic systems and then active inference explores a lot of different more specific motifs within that broader blanket persistence picture and the path of least action so that's what enables the physics in that space and why these methods which as far as i understand are often used in quantum mechanics

or being able to come together with active inference this way.


SPEAKER_02:
Yeah, something that comes to mind when you mention this, I think there's also like a recent avenue of research in this area where people, and it's again kind of generated by the fact that you don't know the graph beforehand many times.

And I think kind of the old school approach was, well, you construct it based on some rules, right?

Like you're going to say, oh,

I don't know, some things are similar, I'm going to put an edge between them, and you define similar in whatever way you like and so on.

And there was this kind of recent trend where what you try to do is kind of latent graph inference, or some people call it manifold learning, if you think of the graph as some sort of manifold, but this kind of very informally speaking.

and essentially what you would do is like you would map whatever you try to learn the raw observations um into some latent space and that's where you actually construct the graph you construct the graph in the latent space rather than kind of in in the you know raw space so that might be kind of a way to um deal with fuzziness as well right like because then i guess you might lose some

some of these kind of very concrete one-to-one mappings because you might learn some node in the latent space that maybe corresponds to three or four concepts kind of mixed together and you know there's all these kind of nice experiments with neurons in the networks kind of visualized and you know they learn maybe a kind of a mixture of concepts like if you see what actually you know activates that neuron is actually you know maybe a few classes or different kinds of things it's not necessarily a single thing

So it could be something very similar here, where you have some very entangled representations that are still in this latent graph.

And then, at least in concept space, even if in the latent space, that's still a very clear combinatorial structure with respect to your raw observations.

that that structure kind of can still kind of encode the fuzziness of the world to some degree because you have this kind of mixture of concepts that got distilled in the same node or things like that or maybe some concepts could be represented by multiple nodes uh depending on you know in what way you see these concepts there might be all sorts of variations or concepts or points of view and so on so um i think you know kind of latent graph inference could be

uh you know quite an interesting way maybe to address some of these um issues where we were discussing although i think uh it kind of died off a bit in in the recent year at least as far as i've seen there were a few you know slightly fewer papers on the topic well certainly the agents


SPEAKER_00:
proposed latent structure of the world, the causal structure of the world, is just mapped on a territory, and so it enables maybe some of those coarse grainings.

Could you go to the slide where there was a mapping between a smooth sphere and then a regular geometric shape?


SPEAKER_02:
Yeah.

Let's see.

In this one?


SPEAKER_00:
yeah just wanted to make one one point see if you had any um comments at the heart of some of the relationships that you're describing and where you pulled back to in kind in terms of generalization helps us understand

this relationship between the the sphere and the geometry and one place that that and the implications for data processing and all of the computational science areas is if you are preserving or learning or analyzing geometry but not topology or the other way around you might get these different like data set aberrations like you might have the topology of the coffee cup but it looks like something totally different

And so what we would really want to do would be understand the relationship between geometry and topology, because if we could understand it in principle, like you have it on the left side, and then in practice with the data scheme on the right side, or insert your own left and right side there, then we'd be able to do data analysis in a way that respected slash preserved

both the topology and the geometry so it's like two compatible perspectives that have their different like strengths and weaknesses and heuristics and so understanding that relationship between geometry and topology and the implicit um spaces that geometry requires and so on that has tremendous

use and it just in closing reminds me of buckminster fuller's synergetics which uses a close packing architecture and a tetrahedron centric model of coordinates to find more continuity between surface area and volume and between the smooth surfaces and the great circles on them and like the points of connectivity on shapes so i think it's an incredibly deep area and really has fundamental

impacting active inference helps us think about our models in this way kind of like the inflated balloon and with the fuzziness and the architecture and the finiteness it really brings a lot to active inference and so i appreciate you sharing the work with us today and um continuing to work in this way thanks out any last thoughts


SPEAKER_02:
Yeah, I think what you mentioned, I think it's been all over my thesis, this kind of tension between topology and geometry.

And maybe what I want to emphasize is that I'm not saying the previous perspective of looking maybe more geometrically at things was wrong in any way.

And on the contrary, actually, there's lots of interesting places where these things intersect, even in this shift

uh paper i briefly went through like if you actually read the paper there's uh there's a lot of beautiful intersections actually my main collaborator uh francesco he he's a differential geometer so um he actually had lots of kind of inputs from from that side and um indeed i think you know we should try to use all these kind of layers of structure uh you know in the best way possible uh for all our methods


SPEAKER_00:
Awesome.

All right.

Thank you.


SPEAKER_01:
Till next time.

Thanks for having me.