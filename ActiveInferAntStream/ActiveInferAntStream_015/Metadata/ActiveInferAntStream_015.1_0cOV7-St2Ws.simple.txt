SPEAKER_00:
all right it's september 3rd 2025 this is active inference stream 15.1 been a little bit but we're back we're in the start repo start.activeinference.institute and this should be a very fun multi-level stream right off the bat this is where we're going to get through today i'm running run.sh from the top of the repo

and several functionalities are shown which we're going to go through the first is the system checkup the second is an environment setup step the third is the generation of custom curriculum this is going to use lom's generative ai to write custom active inference onboarding curricula depending on a given audience or entity and then translate that into whatever language you want and then the fourth

option is the Repository Manager where we will clone into a variety of repos.

So, I am going to get a few of those cooking.

Welcome this fine evening.

Looking forward to everyone's comments and questions.

First, in this one, I'm gonna get the repository cloning going.

clone the available repositories, and get that going in the background.

Then I'm going to open up another run.sh instance, .slash run sh.

On the second one, I'm going to start up a custom curriculum generator.

As soon as somebody types in the live chat a given entity that they'd like to see, I'll add in another one as well.

So let's get in there.

We will go to three, generate curricula.

Initializing the epistemic and pragmatic aspects of consciousness.

Connecting to the free energy principle.

okay here we go what this interactive curriculum generator gives us is uh some options some interactive options for what kind of domain we want to do research into and what

audience we wanna tailor the material to and what language.

So we'll start out with either entering an existing domain like physics or we can add a new domain.

This is gonna be coffee tasting.

Yes, it's a new domain.

Target entities, we can pick a given entity.

We'll go with,

Tulsi Gabbard just as the first listed entity there and then we can pick a target language and we'll go with Ancient Greek okay it's a new language that's fine all right coffee tasting Tulsi Gabbard Ancient Greek yes proceed with that

Okay, while that's proceeding, check in on the cloning.

This is going into the clones subfolder under SRC.

And that is cloning into a variety of repos, some of which are explored in other streams, others which I've made some major updates to over the previous few days.

So we're going to look into some in a little bit more detail.

Let's pull back to this agenda.

So again, welcome.

This is the start slash here, a map and what might happen next.

There's a repo that goes along with this.

Just expanded the browser window.

This repo is at github.com slash Active Inference Institute slash start.

and it is an advanced AI powered system for creating personalized active inference and free energy principle curricula and more and much more.

It's also connected with a documentation local and cloud hosted documentation strategy.

So active inference institute.github.io slash start will give you some hosted documents and also they will pop up locally.

And some quick links are shown.

To run the experience, you can do dot slash run dot sh.

That's what we did.

Or let's open up another window and use the other top level run script, which is dot slash run underscore docs.

Oops.

dot slash run underscore docs.

So what that's going to do is run the document checking and rendering, preparing any packages that are needed along the way,

And then pop up here in the browser window is a locally rendered at IP address 127.0.0.1 port 8003.

So this is the locally implemented server for documents, or you can look at the exact same material in the GitHub document pages.

so we'll keep that in mind and we'll kill the dock runner okay just crashed okay we're back

All right.

So, so

We're live in the stream.

I look forward to anyone's comments and let's just go over what is going to happen.

First, what is the start here repo?

Well, this is just to get it out in an inference stream and show a little bit of the behind the scenes.

But this repo, broadly speaking, gives an interactive and well-linked landing page into the Active Inference ecosystem and institute.

Now, elsewhere, we have some

welcome page that has a lot more interactive material and a lot of hyperlinks to our living document, but there isn't any code execution in Coda.

so what i've been working on is this start repo which has a little bit more of a seamless experience in terms of not just linking to resources but actually making a repo that runs them so this repo gives a fun interactive matrix themed uh landing page into the institute and ecosystem

It renders, as we've seen, into local documentation as well as updated GitHub pages.

It uses generative AI to write custom curriculum.

We'll see if that worked.

That looks like it's still going.

And it also helps us clone and deploy repositories.

So, for example, what we have clones, while that was all happening,

is ActiveInference.jl, which I have made a fork in some modifications to, Axiom, which is the recent open source architecture by Versys, Cerebrum, which is the linguistic approach to modeling case systems and other linguistic aspects in models,

the cognitive repo which is a large underlying obsidian formatted markdown knowledge repository that you can open up with foam or in obsidian

Generalized Notation Notation for notation and metaprogramming with generative models.

LeanNiche, which has been a bit of a fun collaboration with Jason Larkin, and we've been using the Lean Theorem Prover to explore a few aspects of probabilistic dynamical systems in the FEP.

PyMDP, which I've made some heavy modifications to that we'll go through.

RxInfer examples, also a fork of which I've heavily modified, and template repo, which is a repo for setting up a scientific paper rendering pipeline involving code and figures and equations and all that.

So this is just an example, you can add more repos to get cloned in, but Start is hosting all of these different repositories as options to download in.

So those repos just mentioned, and many other implementations exist, can help bring together open source implementation type frameworks.

like PyMP, Active.jl, RxInfer.jl, Axiom, etc.

And all kinds of emerging tools, be they related to synthetic intelligence, LLM, etc.

And also anything that you want to bring in in terms of adding in another custom repo or just having another repo in this clones folder.

Attack of the clones!

that is a cool setup landing page nexus there's a few themes and ideas that i think we'll revisit but what i will do next is look at these themes get a first pass on the themes

Then we will look at some of this custom generated curriculum material.

Then we will turn to the pyMDP and actinf.jl forks where I have made the most of the modifications.

So, themes and ideas.

Start here now.

or actin for surf whatever you prefer just jumping in active is about action and perception it's about inbound outbound about joint distributions for agents and niche gripper gripped duck rabbit all this kind of stuff that we're always talking about and in our own learning and application and contribution journeys we just start here now or there now or then if that's a better one

but it is about doing it is about starting where and how you are not waiting for something else to be the case unless that's where and how you are cartographic pluralism the name of the stream is a map not the map it is a map it's not the only map it's gonna version even during the stream and also cartographic realism cognitive realism

open source intelligence ecosystems and we're talking about ecosystems that are we're mapping the ecosystem in terms of sharing links and resources and signposts so we're mapping the ecosystem of maps of minds like mice people ant colonies llm that map months or not might might map another mind there or it could just map something

We're mapping the ecosystem of maps of mines, generative models, that do mapping.

There are multiple implementation frameworks for active inference.

There are many ways to build up along the low road.

We see that just by the juxtaposition of all of these implementation frameworks right here.

And with GNN, we'll even have each of them implementing, where possible, some of the exact same models and state spaces.

So even for a given state space, there might be one or more accessible ways to implement it with different trade-offs.

So implementations do not negate each other in active inference.

shipping the docks and docking the shipment whether we approach this from a vibe coding or kind of uh

developer perspective or just the relationship between making sure that we're documented all along the way and documenting what we ship and shipping the docs and this idea of notes to navigation and the ways to include the things that we're noting along the way in our field work and get through some really dense sites in one sitting.

Okay.

We cloned the repos.

Let's close that window.

All right.

Let's exit the matrix.

So the generated content there is in the learning data.

So the domain research.

Here's the coffee tasting research that was using perplexity.

I will push this to GitHub just so we can look at this a little bit in a rendered form.

here was inference stream 8.1 that was from December 15th 2024 and that was uh oh it was uh 8.1 symbols greetings and that was the first iteration of the start repo okay so here's the audience research here's Tulsi Gabbard

We also have that domain research with the coffee tasting research.

And then here's the written curriculum.

Here's the Tulsi Gabbard curriculum.

Here's the complete Tulsi curriculum.

So it includes a little bit of information on the person's background, their motivation, what kinds of core materials we're going to share with them,

what kinds of assessments, how to connect it to the person's background.

So this is just a starting point for, of course, that person or for any person or for the system that generates it, but it gives some really fun and exciting starting points.

So let's see, a little William Blake.

backgrounds again it's to be discussed explored played with how much do you want to meet william blake where he's at versus just have a sort of um attractor that isn't personalized so it's not that there's a oh wow look at this look at this gibberish part

incredible um it and uh then we have the translations so that is in translated curriculum it looks like the the translation stage is pretty slow i didn't run it by default but we can see that there's these translations of copy roasting and so on okay

here we go starting to look a little bit at the uh live chats by way of oh it's still writing the uh still writing some of the material okay so let's go to some of the live chats

okay so dean hello deed wrote i have no technical background with any of these repos but i do want to take advantage of the curriculum generator what's my first step do i need to learn how priors with active no you don't need to have priors with active

you need to have it just this is this starting point clone this repo start find out from help or ai or videos how to use github clone the repo go to the environment example file copy it into a file called dot env

that just then add in in the real ENV, which is your secret file, add in the API keys for at least perplexity in OpenRouter.

Then top level of the repo, .slash run.sh.

it's going to go through these setup phase these this is not a loading screen I think we can put we can put different custom messages there I wouldn't say it's overly dramatic okay then when it pops up here we are in that interactive terminal three generate curricula

So we'll just get this chugging along because it'll take a little bit in the background while we address the other one of your comments, Dean, and look at some of the repos themselves.

Okay, select domain.

Let's do islands navigation using boats.

yes new domain target entity this is it could be skipped or you can come up with another entity um i'll do bill gates created us a new entity uh employee at microsoft and

just call them a common character target language in here we'll do ancient latin yes create that new one proceed all right so that's all that takes and a little bit of time to generate a new curriculum and this is just the version that we have today so future versions you can imagine a a graphical interface or um

we can even make that right now so here add another script in this folder called generate curriculum GUI which pops up a simple browser window

with the same fields and information as the interactive terminal one yielding a GUI for custom active inference curriculum generation and then while it is working it says

working with status bar estimate, and then when final results are ready, it shows them in GUI.

Thanks, GPT-5.

All right, so we have the Bill Gates curriculum developing in the background.

And meanwhile, I'm going to quickly review a few of these forks of cloned repos that I've been working on over the last few days, and we'll keep an eye out on anyone's comments, questions, and live chat.

All right, so here we go.

Well, there's several interesting ones.

They're all very interesting.

But I want to show mainly the PyMDP.

So this is all within this PyMDP fork.

And just to show where this is in the browser, this is the doxology.

So my personal GitHub account fork of PyMDP.

And the branch...

is called textbook so all that information is is open source available okay but here we'll look at it through the interface of start opened up in cursor and we are in cursor 1.59 okay so couple of modifications and things in this textbook

First is the examples from PyMDP, which is just a copy over from the examples

like the agent demo and grid world, copy them over in their most minimal form.

And then the examples from pyMDP underscore modified, which is where modified versions of the scripts are made that output more data and more visualizations than the notebook forms do.

So if you want to, the output of all of the scripts are run there.

So purely just for getting a better handle on the PyMDP examples and to understand what they look like.

that examples from PyMDP modified is pretty cool, pretty useful, very open to further developments that people can do in, of course, the PyMDP examples in the underlying repo or their own Forex or improving and making these examples more flexible.

But the examples, so just examples, is where I have made 12 new examples

they get run by this script called runAll.

So runAll.sh will run these 12 scripts and here are the outputs.

So this is about to be like a rapid,

review kind of like the 2022 part all textbook that brings together the fundamentals of probability and the bayes rule in module one and two then module three four five and six are related to sense making and perception

Module 7, 8, and 9 are about active inference, policy inference.

And then examples 10, 11, 12 are relating to the POMDP, the partially observable Markov decision process.

So here's what the outputs look like.

starting from one.

Probability basics.

This is going to talk about a few different distribution types.

So here's a categorical distribution on the top, three discreetly different options, the Gaussian or normal distribution in the center row, and then a Poisson or a rate parameterized distribution on the bottom.

And each of those are shown in three different forms.

terms of three different parameterizations so it's like categorical you're talking about things that differ discreetly and all of them across the categories sum to one and that could be like a third a third a third or it could be bimodal or it could be peaked gaussian you can move around on the x-axis or you can make it narrower or wider that's variance or precision and then this is a few of the different lambda parameterizations that was solved

in module 2 bayes rule there is this is a summary of the information gain and variational free energy for two different settings the first setting is the classic medical diagnosis setting where there's a prior belief about how likely a disease is to be present which could be the population

overall frequency it could be some other prior belief and then there's a test which has a 90 percent sensitivity true positive and a 95 percent specificity true negative and so when you get a positive test conditioned upon the observation of a positive test

not to overly simplify, but the frequentist says, I mean, 90 or 95% that the person has the disease because that's what the accuracy of the test is.

So that's what the most likely outcome is.

Whereas here with the base, we can see, well, depending on your prior, that's gonna update what happens when you update after the posterior.

So that's shown here, and then in the sequential example is weather, where you don't know whether it is raining or not.

I guess you're trapped inside of a bunker or something, and you're just seeing whether umbrellas or no umbrellas are going with people walking by.

So you have an initial prior, 70% likely to be sunny, and then you see sequences of umbrellas or not.

So that's kind of background statistics, good info to know.

Module three.

and the sort of cousin of three, refactored three.

These have to do with observation models in PyMDP.

So these are ways sometimes called the A matrix or the ambiguity matrix, where you have the mapping between observations and latent states.

And that can be like the identity matrix, which is to say a noiseless perfect mapping.

So basically just like a Markov decision process, not a partially observable MDP.

Or

different levels of noise off diagonal symmetric matrices all these different things

State inference uses the infer.states method of PyMDP to use variational methods to update priors into posteriors given observations.

Sequential inference in the fifth module is a little bit more about different patterns of sequential evidence accumulation, which is worth going into.

So for example,

initially we have a uniform prior over latent state a b or c one third each first time step we see observation zero this updates our belief that it's 80 15.5 second observation time step comes in it's zero again we increase our posterior belief

from 0.8 to 0.96.

Then third observation coming in, observation one.

So then that goes from 0.03 to 0.22.

And for each of these, we can calculate the information gain per update.

We can look at the components of the variational free energy.

We can look at the validation of the normalization in pi MDP.

That's five.

six is a beginning point for a multi-factor example so here there's two independent factors there's the weather and the location so three possible locations two factor two um uh options for the weather factor and then that sets up six possibilities and so there's different beliefs over joint states okay so that's getting through the sense making stuff

7, 8, 9 are about action inference.

So 7 gets you a little bit familiar with the B matrix or the transition matrix in terms of it being modeling from two latent states, but no action selection yet.

8 is going to go into action selection using preferences and pragmatic value in the expected free energy.

So this setting, there are three different options for location.

Left, center, and right.

the C or the preference variable is set so that the left has a negative preference, it's disfavorable, the center is neutral, and the right has a positive preference value.

And then we can see how conditioned upon your starting state,

different moves have different pragmatic value here the epistemic value is zero for all and then we can see how softmax over the negative expected free energy yields updated action posterior probabilities that get sampled from from the same action prior which is the habit or the e matrix so for example if you're starting in the left

state then move left which in this situation keeps you in the left or stay they lead to the same expected outcome observation so they are equally likely to be selected whereas right has a higher preference zero higher than negative two so that has a higher it's more expected to be the case this is how we

get preference and goal-oriented behavior without a reward distribution or reinforcement learning to training data is we have things do what they expect they they change their mind and change the world to observe what they expect here starting in the center it's especially disfavored to go to the left somewhat disfavored to stay highly favored to go right and then for starting in the right position we see that there's again the same

normalized probability of selecting either moving right which is staying or staying which is analogous to the starting on the left situation and staying left so that is the eighth module which gets in and also this is a separate one in eight talking about like different preference distributions for the sweet lever and the health conscious taster

tm1tap wrote wtf is going on here and why is it recommended to me yeah let me know when you find out okay ninth module is a similar example where uh i don't think the coloration on the heat maps is all perfect

The epistemic status of all of this is functional and improvable.

So I'm sure you and our Synthetic Intelligence viewers will find many places to improve.

Please make that contribution, make that GitHub request.

So here we're in a situation where there's four states and the left three are equally neutrally preferable and the right state is preferable.

So then we can see that just from reactive planning, we rarely end up with a reward, but if we're able to plan and look ahead, we can, it's a trivial example, but it's just demonstrating how the expected free energy is used for pragmatic value.

And then 10, 11, 12 go through the POMDP example and shows the matrices and

how that state space gets set up and then how beliefs evolve through time what action and observation sequences happen 10 is the T-Maze setting 11 is the grid world some blank visualizations there grid world setting and 12 is another T-Maze

with a bit more and different information.

So that is intended to be a useful resources.

Again, that's the doxology fork of the pyMDP repo textbook folder.

Examples are the 12 examples that I wrote up with help, obviously.

And then the examples from pyMDP modified, if you wanna stick closer to the

general purpose examples in PyMDP, then those are the ones to go with.

Okay?

Let's see how the

Okay, let's go over to the updates in ActiveInference.jl.

So Active.jl here, this is a Julia-based package, and I have also made a textbook branch and subfolder.

So in this case, there are five examples.

So it's structured a little bit differently.

The first example has to do with the mathematical foundations.

Second example, this is just another, just a slightly different learning path.

Second module has to do with the variational free energy.

Third example, expected free energy.

Fourth example is going to use the POMDP.

Fifth example, hierarchical inference and multi-agent coordination.

And here's what the outputs look like.

So first the foundations.

that curriculum generation is still happening in the background it's pretty slow okay so here's the from the foundations module in the active jl repo fork pretty old computer i'm running it from pop os

Okay, maybe it'll be better to... Let's look at it within the browser.

Textbook.

Output.

Okay.

So there's the information theory.

So here we have four different distributions.

Observation comes in.

And then we have KL divergences calculated.

I'll just do it here.

VFE, the seconds unit.

yeah a little slow but c'est la vie like it's faster to load it through github than to load it in the ide tragic here is the uh vfe perceptual inference state inference process

We'll just let that one load.

Okay.

Similar examples in the EFE module.

We have analogous examples for the EFE.

and same as the pomdp and the uh multi-agent so kind of fun and then we'll look at the multi-agent trajectory okay we'll get this here we go so this is a uh multi-agent grid world

MetaGrid is probably a better framework for doing this kind of collective foraging multi-agents situation.

I'll just bring that up in the browser.

Yeah, David Blumen et al.

MetaGrid is better.

if you actually want to make like these kind of role-playing game meets collective foraging, multi-agent, flexible, active, reinforcement learning settings.

Okay, here we go.

Now the GUI has popped up.

So this was again prompted, just that was a two-shot prompt.

First just said make a GUI for what does the same thing as the typing.

so let's domain nursing entity elon musk language russian so there we go all right just to close off there if you really want to do a multi-agent setting and you want something that's really performing professional metagrid or some other option is probably a better choice but

the whole point of what's happening here is we can look at the expected free energy values and posterior beliefs and all this kind of stuff, and we can connect with how we learn and apply these implementation frameworks.

Okay, so that works.

Alright, now I'm going to return to Dean's previous questions and his new one.

So yeah, if anyone else has any ideas or questions or they want to see something happen.

Okay.

Whose map am I building?

Whose map am I building?

The curriculum that modifies a current mind model.

So a map outside both the curriculum designer and the curriculum subject.

Is the limit of my self-organization my ability to generate effective prompts?

It seems like I'm giving most of the organization tasks over to the processing agent, which isn't me.

True?

And then he wrote,

I see the AI generating and organizing.

Shouldn't I practice these tasks too?

Yeah, these are huge questions.

They're definitely things that I've been thinking about over these last few days working on it.

Let me have a sip of water and I'll think about what tack to enter here.

shouldn't you practice those tasks too well to the extent that we're going to be normative here pedagogically yeah i think that you should one should i should etc generate and organize and while the ai is doing a lot of the terminal generating and organizing in terms of writing the actual curriculum itself

First off, those are just intended to be intermediate artifacts produced for curation and secondary refinement.

So it's not that it's generating the final word, it's generating a blob of clay that might be close or far from your vision.

And it is organizing things in a way that has to be quite strongly typed in order to

find exact like to use the the entity research on uh some data to use the the entity research on barry bonds yes it has to be organized into the right fields and all of that but there's a higher level organization

that is organizing that kind of syntactic organization and then there's the the syntax and the semantics of generating these systems that do this thing and that is its own kind of spring training practice um

Is the limit of my self-organization my ability to generate effective prompts?

Yeah, there's a lot of layers to look at that question at.

In some ways, you can ask for an effective prompt on some, you can ask for a kind of prompt, like write a good prompt for doing this.

And that's like off-sourcing more of your exact semantics

in exchange for what might yield a more compliance output, especially structurally, but only you are going to be able to generate what you can do.

However, aren't we seeing that with even a few words or an image, it's possible to,

mimic quite well it seems like i'm giving most of the organization tasks over to the processing agent which isn't me yeah i think that well at first i wonder to what extent was that thought in the calculator days or in the steam engine days or in the early automobile days or the video recorder days or the excel early days or whatever it is

We are doing different things.

Okay.

Is limiting my self-organization my ability to generate effective prompts?

Short answer, no.

Prompt skill helps, but the ceiling on self-organization is set more by your systems than by phrasing alone.

How do you raise the ceiling?

Define artifacts plus DOD.

Probably not that one, but interesting.

Add tight loops.

Use scaffolds.

Externalize context.

That's kind of the context engineering angle.

Stable interfaces.

Automate verification.

Prompts are one lever in that system.

Useful, but not the limiting factor.

Hmm.

Huh.

Bill Gates' SAT score.

Um... Yes.

The GUI is still plugging away.

MetaGrid for multi-agents.

Translations into custom languages.

Local and GitHub documents for a lot of machine readability, and we can translate these documents into other languages as well.

Okay, then just briefly the last of the implementation framework where I've been adding a lot of work is in the SRC clones.

It didn't clone RxInfer.

I'll just show it in the browser.

here in the research folder on my branch or my fork of RxInfer examples are several fun methods related to RxInfer generalized coordinates

hierarchical Gaussian filter, integration with LLM, the POMDP, the infinite data stream situation, visualization methods, and then here's one that I will show, which is the Manim package.

So people may be familiar with the three blue, one brown math education channel.

who makes videos like this.

And there's a open source package called Manim.

And so I use the Manim package to go through all of the Rx and Fur examples.

So it's like we have this kind of like mini documentary

procedurally generated starting point for each of the models in Arcs and Fur.

So there's two different styles of model.

One of them is going to have a... I'm just picking two random examples.

There's the...

there's the source code that's just going to have this source code kind of pop up on screen, and then there's the dot graph.

So it's not going to display in the... But it's a good starting point.

So extra usable setup utilities and examples in ActiveJL, RxInfer, .jl, and in PyMDP.

uh recapitulating the examples in those repos and adding these textbook folders and each of those are just cloned sub repos within this start repo the start repo

has the ability to generate more materials like we're seeing, and then also it has this starthere.md.

So the idea is, welcome.

This is a simple, actionable landing page into the Active Inference ecosystem and institute centered on this repository.

If you only read one file to begin, make it this one.

Why this repo exists?

Learning by doing.

Generate, visualize, and translate curriculum content grounded in real data.

Build end-to-end.

No mocks.

Real IO, reproducible scripts, and tests.

And contribute to the ecosystem.

Improve docs, scripts, and learning materials for the broader community.

Here's a bunch of links.

The Obsidian link.

is the one is the live sync version of the cognitive repo so if you want to play around in this kind of knowledge graph that's the cognitive repo you can just clone it in open it locally uh this here.md talks about a few things you can do with the repo and then talks about how you set up the repo with the uv package manager and run the run docs and the run

Also just a starting point, but gets a lot of it there.

and you can always go to welcome or obsidian for that kind of multimedia linked living document style however i think that uh the start repo is filling a critical service and role in the open source ecosystem which is this kind of meta repository management having set up scripts

that install uv if you don't have it then use uv to set up the environment and then use that set up environment to clone repos forks of those repos which themselves have setup scripts and uh so here's the setup.sh within the pyMDP fork

So by running this sequence of setup scripts, you will go from either a click or just one line entered into this cloned repo all the way on through having checked files that run and do different aspects that are important for understanding conceptually and building an active inference.

So here's the Axiom repo by Versus.

And then we can just go right in there and just say, okay, run the Axiom repo right from here.

I have a private fork of Axiom as well, but let's just see what happens with one-shotting it here.

Okay, so talked about the repo, about how it can generate material, talked about a few of these implementation strategies, covered up for these three, PyMDP, ActiveJL, RxInferJL, about the forks that I have been working on that are facilitating setup and examples.

for a later date maybe with the GNN Lean Niche Cerebrum and I think it takes us right up to the edge so just for that one line now we are running Axiom

So it's playing that video game, Explode.

I don't know what that is.

But it's a video game.

And that's the beauty of when a repository has its own setup materials and reproducibility.

Now we can just clone Axiom and run it.

So like,

so many cool ways to compose across repos cross render in and out of repos public repos private repos

There's RxInfer examples with neural networks, a lot of work across different repos in LLMs and other AI methods.

So for those who are curious or soon to be curious about how do you learn and apply synthetic intelligence and active inference, that's why we have a map.

Start slash here.

And then feedback along the way.

Just what parts were challenging?

Which parts were awesome?

What'd you like?

Where did you get held up?

Did you like being held up?

Where would you have wanted something different?

And then either raise your hand and give the feedback or reduce your uncertainty by making that change yourself and figure out how to fix it on your own local version.

And you'll be contributing to open source software in no time.

Okay, let's see how that educational material went while Axiom is running.

We'll do it through GitHub.

Okay, just pushing it.

All right.

Thank you, Dean.

Oh, it's in data.

It used to be in the learning folder.

Okay.

Audience research.

Translate a curriculum.

We'll just look at it in the browser.

Translated.

Okay.

Here's the, from one minute ago, ancient Greek.

So here's the Myrmecology curriculum for active inference translated into ancient Greek.

I will leave it to a speaker or reader to evaluate.

Here's the audience research as a JSON.

And then here's the written curriculum for those domains and entities.

So let's see, we have the Elon Musk and the

island navigation using boat.

Then I'll just see if there's any last comments, otherwise that'll be it.

Okay.

again we can update the prompts we can have mermaid diagrams we could have more links we can base it off of uh whatever material is put into synthetic fep active this is the material that's used to generate so that that can be versioned

and yes careers and educational foundations in island navigation wow perplexity or open router i don't know which one of them is yielding it probably the open router look at some of these

i think it's using uh like the llama scout 4 or something like that but whoa as recorded class expenses valued everyone machine gron blind likewise quotes request conscious integrity understand entered podcast associates straw credential

All right.

I'll just wait one minute unless anyone has a final comment or question.

As usual, I hope this is interesting or fun for you.

I put all of these out in the open source spirit for people's feedback, their commenting, their engagement.

There's a lot of fractal ways to contribute.

You could make your own repo and then we can have it cloned in.

Or you could make a pull request or raise an issue

right here in the repo so that is all for tonight i will leave to you to do the who's on first and all of the uh dramatic readings and everything just wanted to get that out there hope that this is a place where you can say where should i go where do i return

and we can make these links accessible rigorous applicable so thanks for watching along and uh enjoy