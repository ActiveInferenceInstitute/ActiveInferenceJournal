[
  {
    "start": 9.7,
    "end": 36.366,
    "text": " all right hello welcome everyone i'm going to start this stream with a github push all right it is june 8th 2025 and this is active inference stream 14.2 first where we're going today in terms of",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 37.915,
    "end": 42.072,
    "text": " AI art to quickly give a little visual beginning.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 44.24,
    "end": 45.967,
    "text": "No.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 45.987,
    "end": 46.71,
    "text": "I'll just show.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 48.597,
    "end": 52.484,
    "text": " Sorry about that, I was just working up to this last moment to get this going.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 53.266,
    "end": 65.528,
    "text": "Where we're headed is using RxInfer multi-agent trajectory planning example and using GNN to give an exact reconfiguration.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 66.069,
    "end": 72.681,
    "text": "So we're going to be using generalized notation notation to yield",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 75.277,
    "end": 105.267,
    "text": " this simulation in rx infer so there's a couple steps to go over uh this is just sort of a live working uh presentations and to be refined and polished i just wanted to get it all into this one stream given all these recent updates so to the stream agenda and also people watching live i will look forward to your comments and ideas",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 106.057,
    "end": 110.423,
    "text": " Let's start with looking at the areas we'll go into.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 114.069,
    "end": 115.551,
    "text": "First, just some overview on the tools.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 115.651,
    "end": 118.355,
    "text": "I'm using Cursor 1.0, which came out recently.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 118.715,
    "end": 120.618,
    "text": "GNN, Generalized Notation Notation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 120.698,
    "end": 123.182,
    "text": "Check out Stream 14.1 if you want to see more.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 124.003,
    "end": 131.153,
    "text": "Using LLMs via Cursor, mainly Clod 4, and it's going to be about reverse and forward engineering in the RxInfer setting.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 131.538,
    "end": 138.153,
    "text": " Okay, where we're headed is a robust information supply chain from plain text configuration to executable simulation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 138.855,
    "end": 141.762,
    "text": "So here's what that is going to look like again with AIR.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 142.303,
    "end": 144.889,
    "text": "We have GNN, the plain text GNN,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 146.168,
    "end": 174.808,
    "text": " moving through all of these stages the triple play graphical on through executed simulation so whether we think about that as meeting in the middle between the forward specification of GNN and all of these different kinds of things that we might want to do with GNN like the type checking all the modules of the package and the golden spike moment is meeting in the middle",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 174.856,
    "end": 198.973,
    "text": " with the reverse engineering of Rx and Fur examples and the forward engineering of the GNN package so that we can end up with this meeting in the middle between the plaintext, which gives us all these benefits of plaintext, reproducibility, et cetera, and all these functionalities of GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 201.029,
    "end": 219.73,
    "text": " In the main first section, I'll go over what that specifically was, talk about the reverse engineering in the RxInfer example, from script to more of a package, and then meeting that package with a forward engineering pass from the GNN schema and pipeline on through the needed configuration.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 219.71,
    "end": 240.604,
    "text": " and that's the golden spike again just a metaphor uh there have been many changes to the gnn package and still a few more that could occur with logging and so on but i'll go through a few sections of change and documentation a little bit more on the golden spike and the analogy",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 243.824,
    "end": 263.723,
    "text": " then we'll see what people comment where that goes and I have a little bit of manual writing as well in terms of thinking about what that means from a organizational perspective and for active inference and for the Institute and all that okay going to the package",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 271.212,
    "end": 282.491,
    "text": " All right, in the doc RxInfer folder, the first thing is this short script clone RxInfer examples.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 283.433,
    "end": 293.49,
    "text": "And this clones a repo, which is a fork of the main RxInfer examples that I have on my personal GitHub account.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 294.196,
    "end": 302.03,
    "text": " And this, I sync it up with the main examples repo, which is awesome that they're putting out more and more and different.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 302.791,
    "end": 309.844,
    "text": "And then in the support folder on my fork, first there's a setup Julia script to get your environment ready.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 310.385,
    "end": 316.997,
    "text": "And then there's a notebooks to scripts Julia, which takes the notebooks from the examples and it",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 316.977,
    "end": 321.823,
    "text": " turns them all into scripts just by extracting out the code blocks.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 321.843,
    "end": 328.532,
    "text": "So they don't all necessarily work on the first pass, but it gets all the content.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 331.136,
    "end": 334.059,
    "text": "Again, to this forward reverse engineering idea.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 334.88,
    "end": 336.302,
    "text": "Here's the process.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 338.625,
    "end": 344.453,
    "text": "So first... And the links to all this are in the video description.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 345.091,
    "end": 351.485,
    "text": " First use that notebooks to scripts script to convert the notebook into a script.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 351.605,
    "end": 352.848,
    "text": "Sometimes it might run away.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 353.068,
    "end": 355.954,
    "text": "Other times you might need to change certain things about the control flow.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 356.676,
    "end": 360.243,
    "text": "And first step is to just lock in the single script.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 361.366,
    "end": 364.753,
    "text": "So what that looks like in the case here,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 367.467,
    "end": 369.691,
    "text": " So then it clones in.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 370.272,
    "end": 376.463,
    "text": "This is work I did on the fork to get, this is the reverse engineering part with RxInfer.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 377.024,
    "end": 383.615,
    "text": "Scripts, advanced examples, multi-agent trajectory, archive.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 385.639,
    "end": 392.631,
    "text": "So this is the working single script version of the multi-agent trajectory model.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 394.467,
    "end": 409.223,
    "text": " Just for context, where this takes us is these four agents that do a negotiation of avoidance collision and obstacle avoidance.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 409.583,
    "end": 411.645,
    "text": "So different collision avoidance.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 412.426,
    "end": 421.015,
    "text": "And that's happening with, at the heart of it all, this at model block, as always, in RxInfer.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 421.315,
    "end": 426.141,
    "text": " that is used by the path planner inference step.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 426.161,
    "end": 427.528,
    "text": "This is the",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 428.673,
    "end": 458.528,
    "text": " kind of the kernel and then rx infer is making that kernel of the generative model the explicit probabilistic joint distribution makes it look a lot more like the math or the analytical description of the generative model and everything else is pushed into the inference methods so that's that kind of idea of writing shorter at model blocks that distinguish different generative models and then everything else is like",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 458.508,
    "end": 487.62,
    "text": " rendering that out into the graphical model with the stereotyped inference routines from that single script take it to more of a configular modular approach so that was probably several hours several dozen prompts but not something that couldn't be done eventually in an automated fashion to split up that single script",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 490.334,
    "end": 507.077,
    "text": " that which was only lightly modified from the notebook format which is 339 lines to modify it from single script into in this case almost 10 different scripts some of them are really short",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 507.057,
    "end": 513.106,
    "text": " but they clarify and there's other ways that it probably could have been disassembled or disarticulated.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 513.146,
    "end": 523.881,
    "text": "This separates out different functions and also adds a lot of visualization and logging methods.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 525.603,
    "end": 532.693,
    "text": "Third step, from that multi-script package,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 534.158,
    "end": 558.09,
    "text": " all the hard-coded variables take it out to a config toml file so this is like a little domain specific language just for this one example in this one case where this gives all the configuration needed so instead of just having the values coded in the scripts look to this central config standalone file",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 559.808,
    "end": 572.873,
    "text": " There's multiple ways or stages of generalizing the variables like the dimensional state spaces, initial parameterizations, constraint variables, number of agents, simulation variables like time steps into this config block.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 574.422,
    "end": 582.574,
    "text": " That is going from, and all along the way, confirming that the simulation is still running.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 583.515,
    "end": 586.219,
    "text": "So that was the reverse engineering of RxInfer.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 586.499,
    "end": 601.02,
    "text": "So it's kind of like the original notebook was like a handmade chair, and this was like reverse engineering it so that we could have this cartridge, which gets run like a disassembled Ikea factory,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 601.0,
    "end": 628.611,
    "text": " separating out the methods whereas the original example is great and really informative in terms of a blog post readable introduces things sequentially and shows what rxinfer is doing and gets to those exact simulations this shows like one path through the flow",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 629.097,
    "end": 631.219,
    "text": " and it's a custom made artifact.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 631.52,
    "end": 643.914,
    "text": "And again, that reverse engineering process was taking it into these different disassembled components, but exactly reproducing it and then pulling out all the configuration into a config.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 647.097,
    "end": 650.281,
    "text": "So that's the reverse engineering of the RX in Fursight.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 651.142,
    "end": 656.488,
    "text": "Now in the forward rendering,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 659.641,
    "end": 664.606,
    "text": " This is going from a GNN file to that config.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 665.187,
    "end": 684.687,
    "text": "Because if we know from that reverse engineering phase that getting to that config is going to allow the execution of the simulation, then the other side of that meeting in the middle is getting the GNN file into that config format.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 686.017,
    "end": 701.558,
    "text": " So here is in this examples folder, a GNN style markdown file with all of the parameters that need to be specified in the config.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 701.578,
    "end": 714.235,
    "text": "So that when you're in SRC and you run main, main is going to run all of the steps which are turned on",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 717.539,
    "end": 725.288,
    "text": " of the 14 steps, which are each their own numbered script with the same name module.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 726.249,
    "end": 739.024,
    "text": "Whichever ones you have enabled, which is in the new file in pipeline module config,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 740.253,
    "end": 744.837,
    "text": " you can turn whichever of these modules on or off.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 746.018,
    "end": 747.76,
    "text": "That's different from last time.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 749.101,
    "end": 759.731,
    "text": "And that RxInferGNN example gets passed through step one, checks the files.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 760.431,
    "end": 763.114,
    "text": "Step two, does set up to the virtual environment.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 763.134,
    "end": 764.495,
    "text": "Step three, does any tests.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 765.096,
    "end": 768.859,
    "text": "Step four, type checker, output.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 770.172,
    "end": 796.578,
    "text": " we can look in the type checking and see, for example, that RxInfer, even though these resource estimates are not currently specifically accurate, especially compared across different packages, but the resources are calculated for that RxInfer example just by virtue of it being a GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 797.799,
    "end": 798.88,
    "text": "Then there's",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 801.003,
    "end": 813.697,
    "text": " Let's continue looking through the... Step five, exports into a bunch of different outputs.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 813.717,
    "end": 814.858,
    "text": "Six makes visualizations.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 815.239,
    "end": 821.485,
    "text": "And then of interest here is nine, which renders what we want into the Toml.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 822.106,
    "end": 823.888,
    "text": "And 11, it's going to call the LLM.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 824.847,
    "end": 825.688,
    "text": " Here's the exports.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 826.589,
    "end": 840.188,
    "text": "This is the re-export of the GNN file and the export of the GNN file in other formats like XML and other graph formats.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 840.208,
    "end": 840.809,
    "text": "That's step five.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 841.57,
    "end": 842.892,
    "text": "Step six, visualization.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 846.517,
    "end": 847.058,
    "text": "We get",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 848.202,
    "end": 878.04,
    "text": " the matrix visualization of all of the state spaces and ontology assertions of this model so like this is an interesting example in this engineering rx infer notation namespace a is often used for state transitions whereas in the active inference textbook",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 878.02,
    "end": 879.521,
    "text": " B is used for state transitions.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 879.581,
    "end": 886.207,
    "text": "But it's an example of why we don't want to have a welding between letters and ontology terms.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 886.868,
    "end": 894.855,
    "text": "We want to have the flexibility to use the same letters for different ontologies and language in different settings.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 895.816,
    "end": 907.707,
    "text": "So it's a perfect example of that, of just the ontology assertion space and all the variables can be described just because it was GNN file.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 908.733,
    "end": 914.142,
    "text": " Now we get to step nine.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 918.549,
    "end": 919.591,
    "text": "Oh, it didn't run completely.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 920.873,
    "end": 925.862,
    "text": "To run it again, Python 3 main.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 930.409,
    "end": 934.977,
    "text": "This will run in the render",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 941.352,
    "end": 952.505,
    "text": " In the render folder in SRC, in the RxInfer section, there's a TOML generator.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 953.526,
    "end": 966.381,
    "text": "So this will read in the GNN and then output the TOML, which is the one that we knew that we wanted from the RxInfer site.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 967.745,
    "end": 980.382,
    "text": " Then this script in the RxInfer folders and doc demonstrates the GNN RxInfer pipeline for multi-agent trajectory planning.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 980.542,
    "end": 981.884,
    "text": "It performs two-step validation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 982.645,
    "end": 991.838,
    "text": "So first it runs a baseline execution from the clone of the RxInfer examples.jl, which doesn't use GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 993.34,
    "end": 995.743,
    "text": "Then those",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 997.107,
    "end": 1019.689,
    "text": " files for the example are all copied over into this uh folder right here multi trajectory planning and then it's logged in the running of the script that the config was replaced with one regenerated from the gnm so it's a clean um",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1021.07,
    "end": 1048.933,
    "text": " functional replacement experiment to show that the GNN structured file here can be used as part of this bigger pipeline which includes the type checking the category theory all these different kinds of ontology connections",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1049.943,
    "end": 1072.525,
    "text": " and yield the target toml that we know will make the simulation work for the reverse engineered disarticulated rx infer example so hope that that has been conveyed",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1074.952,
    "end": 1094.682,
    "text": " It took a long time, I think, overall to get here, but it had long been the triple play vision that we would have a unified plain text format for the math diagrams and visualizations and executable code.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1094.662,
    "end": 1121.158,
    "text": " so it's like okay how do we get triple play integrity so we could have things like okay well you change the visual representation with a drag and drop and then it changes the executable code it's like how is that going to work formally well a lot of the examples scripts and scientific papers used like a all-in-one script which can make reproducing the example",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1121.645,
    "end": 1137.882,
    "text": " simpler and more monolithic but then give fewer degrees of freedom because you might be just like 700 lines in the middle of the script and it's not clear how you change certain aspects more structural about the um",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1139.296,
    "end": 1166.35,
    "text": " model so how do we get to the ability for there to be a triple play where changes in one can be traced to changes in the other and that was where jacob and i were thinking maybe we have some sort of intra or infra lingua with the generative a generalized notation notation",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1168.895,
    "end": 1171.459,
    "text": " Let's find that quote.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1177.227,
    "end": 1195.172,
    "text": "So Oryx and Fur or any other software we could try doing a reverse engineering of a PyMDP script gives the ability to set everything needed",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1197.667,
    "end": 1224.079,
    "text": " accept the state space of the generative model so there's still a lot to be explored in terms of how do we customize control flows and more simulation environment scale factors um and also a lot more to say um but suffice to say that for",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1224.548,
    "end": 1235.503,
    "text": " simple reproducing of standalone examples this reverse engineering sort of forensic phase is a very important proof of concept",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1248.899,
    "end": 1258.834,
    "text": " So in active inference, research models are often conveyed through assemblages of natural language, pseudocode, programming language, analytical formulas, and pictorial representations.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1259.475,
    "end": 1272.375,
    "text": "In this paper, we present GNN as a flexible and expressive language tailored for expressing active inference models and encompassing various relevant aspects of languages, including ontology, morphology, grammar, and pragmatics.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1272.355,
    "end": 1287.875,
    "text": " By leveraging GNN as an active inferlingua or interlingua, infralingua, supralingua, intralingua, we aim to bridge and respect gaps among different modeling approaches in order to facilitate interdisciplinary research.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1288.917,
    "end": 1291.62,
    "text": "So how can this be used?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1293.783,
    "end": 1301.333,
    "text": "Well, for our education, we can have these",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1302.865,
    "end": 1328.367,
    "text": " well-tempered generative model infrastructural pipelines and specific well-documented interpretable configurations that help us understand and communicate figure out what different generative models and process flow elements are doing there's also a lot of engineering uses so",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1330.372,
    "end": 1338.729,
    "text": " There could and will be many use cases where GNN is not a front feature of the product.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1338.909,
    "end": 1349.089,
    "text": "It's just a useful, increasingly useful open source and stack for connecting the dots",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1349.525,
    "end": 1377.085,
    "text": " between existing examples and ways to modify and design with those motifs, and then increasingly forward use of this kind of metaprogramming, program synthesis type approach to generative modeling, which is going to have all these benefits for making them easier to design, like just being able to prompt an LLM and say, make me a GNN file that represents this, like we'll do probably later in this stream.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1377.065,
    "end": 1393.842,
    "text": " All the way on through having the resource estimation, all these features that we want for any generative model can be abstracted and brought into this infrastructure grade pipeline so that",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1394.902,
    "end": 1417.197,
    "text": " once there are more and more paths and understanding about how do you get more and more generically or in all these different situations to executable simulations, using this pipeline and putting in the cartridge helps separate and give a lot of reproducibility and expressivity to the compute that happens in between.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1418.442,
    "end": 1426.782,
    "text": " So there's the reverse engineering approach, which is just taking scripts exactly as they are and within that language or in more of a port or transfer,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1427.774,
    "end": 1430.437,
    "text": " doing an exact reproduction effort.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1430.457,
    "end": 1440.669,
    "text": "And then from there, maybe certain pieces can be flipped out, but it's always good to know that we can exactly reproduce using the same variable names, the same ontology assertions.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1441.31,
    "end": 1448.959,
    "text": "So that becomes kind of like a substrate of, well, paper one modeled attention this way, and in natural language, they described attention this way.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1449.46,
    "end": 1455.587,
    "text": "Paper two in a different programming language in a different natural language said this about attention,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1455.567,
    "end": 1467.73,
    "text": " And here's how we can use ontology across the natural language and the computational elements to talk about where those are similar or different.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1467.75,
    "end": 1470.415,
    "text": "Buzzing can be used for different functions.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1470.636,
    "end": 1473.441,
    "text": "So for example, once we have the config,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1473.522,
    "end": 1486.297,
    "text": " and the ability to separate out these different variables, we could see what are the perturbations that are allowable because we didn't change any of the logic or the control flow.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1486.317,
    "end": 1502.837,
    "text": "So for example, if the number of agents were simply changed to 50, then as it is currently written, there might need to be some other refactorizations of state spaces, which just changing NR agents wouldn't exactly do.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1503.188,
    "end": 1508.995,
    "text": " it might just be part of a loop and then the loop would break because it's like, wait, there were only four because we only had four initial locations.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1509.536,
    "end": 1510.737,
    "text": "So then you go, okay, okay, okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1512.119,
    "end": 1530.681,
    "text": "How could we develop configuration spaces where a number of agents at a programmatic level had a relationship to instantiations of matrices and other features like knowing that you needed to have as many of these blocks",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1531.083,
    "end": 1558.778,
    "text": " as you do agents so in this exact situation again it was first just an exact reverse engineering but from that reverse engineering through insight and through program synthesis and fuzzing approaches we can explore like what happens when the dt is 0.01 or do a program sweep across generate simulations where dt ranges from this to this while the number of iterations ranges from that to that",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1558.758,
    "end": 1587.28,
    "text": " so then that gives this ability to explore what are the functional the performance aspects optimization and then we can go even further especially as the visualization and the disco pi features improve so here not every single variable was captured by the disco pi category theory description but",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1588.087,
    "end": 1591.692,
    "text": " It wasn't the focus here, but that would be something that could be worked on.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1591.792,
    "end": 1604.17,
    "text": "And again, in general, the goal is a wide range of defined and checked GNN formats, ranging from discrete time, continuous time, all these different kinds of scenarios.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1604.631,
    "end": 1614.465,
    "text": "We continue to build out that space and neighborhoods of different models, which can be interpreted a certain way.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1614.496,
    "end": 1617.74,
    "text": " So there's a lot of things that could happen with the processing pipeline.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1617.76,
    "end": 1624.308,
    "text": "Like, how do we know that this PyMDP one, we only want to render into PyMDP and the RX.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1624.348,
    "end": 1628.774,
    "text": "So, okay, should we include that information in the file and or in the file name?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1629.475,
    "end": 1631.337,
    "text": "How should that be handled by the different modules?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1631.437,
    "end": 1637.685,
    "text": "Those are the kinds of software improvements that would then allow us to, when we run it,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1637.665,
    "end": 1643.593,
    "text": " Right now, let's just say we had it perfectly working for rendering PyMDP to PyMDP and RxInfer to RxInfer.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1644.034,
    "end": 1651.264,
    "text": "We still might get 50% errors, and then it would try to chase around fixing, but it didn't need to be fixed.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1652.045,
    "end": 1665.664,
    "text": "But then if we had some examples, which are actually quite few, if any, where we have the same exact analytical situation being cross-rendered into PyMDP and RxInfer.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1666.91,
    "end": 1673.916,
    "text": " So those would be some interesting ways to check that all of the cross rendering is working well.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1682.772,
    "end": 1711.142,
    "text": " okay returning to the agenda and if anyone has any suggestions or questions write them otherwise I'm just going to try to get through the rest of the agenda go to some of the manual writing see if there's some interesting thing that we could look maybe look at the documentation and just kind of have this informal bringing together of all these recent developments over the last couple of days",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1711.122,
    "end": 1737.957,
    "text": " so that at least it's been worked through and put out there for for those who want to explore it and then it will return in in more forms over the coming months so the golden spike was meeting the middle between reverse engineering of the n equals one rx infer example into the components into the config form",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1741.48,
    "end": 1749.762,
    "text": " Pipeline execution summary is a JSON file.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1751.507,
    "end": 1756.941,
    "text": "So what's cool about this is different steps can be tucked in with the arrow",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1758.322,
    "end": 1765.554,
    "text": " So you can look at just the logging for each step and it probably makes it more machine readable as well.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1765.935,
    "end": 1773.027,
    "text": "But like here's the full logging for the step five and then step six visualization and so on.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1777.574,
    "end": 1780.92,
    "text": "In terms of how the pipeline overall has changed,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1782.638,
    "end": 1788.546,
    "text": " Big picture is still the exact same, which is all the documentation is in docs.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1788.867,
    "end": 1794.835,
    "text": "The RxInfer script is in there for now, just to be close to RxInfer cloned repo.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1794.855,
    "end": 1796.518,
    "text": "And all the source code is in SRC.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1797.079,
    "end": 1801.585,
    "text": "So you just delete the output folder and then run main.py.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1805.511,
    "end": 1805.731,
    "text": "Here.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1807.193,
    "end": 1810.097,
    "text": "It runs whichever...",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1812.068,
    "end": 1832.98,
    "text": " of the modules are configured to run in config.py it will run those sequentially each of them have a function and this is all very documented up in the repo",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1846.477,
    "end": 1869.126,
    "text": " okay GNN computational science deployment science multi-agent systems being able to design and describe these systems and it starts quietly being able to write and read and modify GNN files and Markdown that starts to flow out through more and different places better and better",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1870.253,
    "end": 1879.583,
    "text": " And that's just one trace through an information supply chain, which hops across different operating systems and mines and servers and all of that.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1880.263,
    "end": 1896.16,
    "text": "However, with this GNN entry point or meeting point, there's the ability to do some verified computing and tracing a little bit better from which generative model and which data inputs and so on are run how, when,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1896.14,
    "end": 1917.523,
    "text": " to yield what outputs and that flow from abstract concept to concrete execution is unified slash unifiable um some of the most",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1919.461,
    "end": 1948.573,
    "text": " important ways that people could explore from here, getting the GNN repo examples working on their own machine, making GitHub issues or comments with ways to improve it, seeing what kinds of scenarios and value propositions they'd like to do themselves, in which case just go for it and report back, measure back.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1948.553,
    "end": 1958.395,
    "text": " or to partner or support the Institute so that we can have these kinds of tools being developed very functionally here",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1960.653,
    "end": 1987.572,
    "text": " okay here's a little bit of a interlude manual manually written interlude to contrast with the large amount of computer generated material then we will return to the documentation which has more computer generation but this next piece is going to be a few thoughts that are selected from a larger writing just to give",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 1989.037,
    "end": 2009.526,
    "text": " a little bit of variety here get some feedback and um again also more to be shared so here we are in 2022 part all textbook figure 1.2 summarizing the high road and the low road so",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2011.177,
    "end": 2019.43,
    "text": " We want to have notation systems and deployment methods for generative models with expressive methods for and nested addressable spaces of.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2020.292,
    "end": 2026.382,
    "text": "So this next series is going to be the spaces of our capacity to do that task within.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2026.422,
    "end": 2035.176,
    "text": "Describe, design, render, simulate, analyze, fit, assess performance of described models.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2037.012,
    "end": 2041.798,
    "text": " meaning there's a larger set of models we can describe than we can render.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2042.659,
    "end": 2045.923,
    "text": "We can describe recipes we cannot cook, and that's a good thing.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2046.704,
    "end": 2059.64,
    "text": "So zooming out, there are these concentric spaces of generative models, which we have different capacities in a given moment around.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2060.621,
    "end": 2066.108,
    "text": "For example, let's do in the GNN examples,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2070.037,
    "end": 2079.191,
    "text": " Make another GNN file fast and comprehensive for a full self-driving car.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2080.453,
    "end": 2096.719,
    "text": "Ensure all state spaces and ontological considerations are accounted for with good GNN style.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2099.264,
    "end": 2109.24,
    "text": " So this is going to be an example of a GNN file that we certainly cannot render into a programming language in an executable fashion.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2109.558,
    "end": 2131.988,
    "text": " yet but with some more constrained generation methods and better type checking in ways of looking at which families of models and control flows we can run then it makes it just an empirical fact that we can we can describe systems that we can't even visualize uh we could say",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2131.968,
    "end": 2159.106,
    "text": " it's a graph with 100 trillion nodes and then there's no computer that you have available that can visualize that many but that didn't stop you from just writing the math on the paper or just doing a visualization and then questions like the performance of a given model for a given data set in a setting is like seven horses ahead of the cart from what is possible to describe",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2159.086,
    "end": 2183.507,
    "text": " so that's sort of like the math to application distance to travel which is like consider this equation and this is the attention factor and this one's the regret factor and this one's the the shame modulator and it's like you can just write those math equations however you want no consideration to too much other than just ideally what each of them mean but",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2184.5,
    "end": 2202.272,
    "text": " when it comes to saying well which model would be a better fit of what that's several steps ahead of actually doing the testing and as long as that's known then there's some interesting cybernetic loops where you're like describing multiple kinds of analytical formulas",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2202.252,
    "end": 2220.531,
    "text": " with an insight which could be right or wrong into which one of them might be performant in a different way and sometimes your intuition might be right and it's kind of like a compressibility and there might be some other irreducible jumps that just like have to be computed on through",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2223.397,
    "end": 2239.94,
    "text": " So, when we're talking about performance of a generative model, like this one is good at video games like this and that way, or this one's driving, or this one's drone, or recommending, or resource allocating, whatever domain or function you're making a generative model for.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2240.441,
    "end": 2249.033,
    "text": "Performance on one benchmark, so the high jump approach, or on a suite of different measures, kind of like a decathlon,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2249.013,
    "end": 2256.206,
    "text": " It's a relational measurement, assessment, or characterization that's secondary to the primary phenotype or embodiment.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2256.547,
    "end": 2258.149,
    "text": "So map is not the territory.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2258.871,
    "end": 2259.993,
    "text": "Generative models are maps.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2260.935,
    "end": 2273.417,
    "text": "So we're talking about cartography, compositional cognitive cartography, on territories, which might be themselves abstract or might be embodied.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2274.899,
    "end": 2282.409,
    "text": " Projects in and around the Active Inference ecosystem, they have performance and fitness wants and needs and so on.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2282.889,
    "end": 2297.228,
    "text": "So someone might think, okay, well, if I can design this kind of algorithm with this kind of runtime requirements, with this performance by this date, with this amount of funding, then this is a viable method for us to have a business.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2297.208,
    "end": 2304.807,
    "text": " So all these different kinds of performance or this should be more efficient or more resilient against this kind of intervention than this kind of model.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2305.248,
    "end": 2306.992,
    "text": "All those kinds of assessments.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2308.456,
    "end": 2311.082,
    "text": "That's all happening within this",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2312.8,
    "end": 2337.762,
    "text": " larger space of generative models which could be specified so of course like even the ones that we describe are only a subset of what is possible so those generative models the larger spaces the known unknowns and the unknown unknowns they include the Baroque absurd tiny useful cute funny and interesting",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2340.577,
    "end": 2344.89,
    "text": " So here is the GNN for the self-driving car.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2351.47,
    "end": 2355.261,
    "text": "So it's 566 lines.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2356.844,
    "end": 2363.601,
    "text": " It could be made to be compliant with different kinds of natural language standards.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2365.045,
    "end": 2370.158,
    "text": "And these state spaces can be type checked for their coherence and their completeness.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2371.461,
    "end": 2373.486,
    "text": "And then especially with a Sumo type",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2374.782,
    "end": 2400.486,
    "text": " program like implementation of pure active ontology like definitions and other kinds of sentence fragments then there's all these different kinds of static checking that could come into play and resource estimation all the early stages of the pipeline basically up until but everything before 10 even for this model that an llm just blasted out",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2400.466,
    "end": 2405.614,
    "text": " and that's not even with it having an MCP server.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2406.696,
    "end": 2422.221,
    "text": "So with the ability for all of these methods within each module to be MCP methods, then compliant generation of arbitrary generative models",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2423.45,
    "end": 2449.693,
    "text": " can be dropped into the railroad track which already is going to reliably reach the triple play so we have the free energy principle from the high road and bayes-derham statistics updating learning on the bottom meeting at active inference",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2450.618,
    "end": 2477.672,
    "text": " so that's why the low road is implementation specific and the high road is not because with a high road we want to be able to use fep and related methods on biological organisms and arbitrary levels of analysis or abstract systems so we want to be able to describe systems we can't build whereas the low road needs to be able to build what it's describing",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2478.378,
    "end": 2504.723,
    "text": " that would be that sort of bottom up like a building must have continuous connection even if it's through like tension or something in order to be x feet high it just it's not it's kind of a classic cranes and sky hooks high road low road so now going a little bit further here consider",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2505.867,
    "end": 2524.99,
    "text": " that we have pairwise information and distance measures today in terms of software 1.0 in terms of syntactic edit distance so we can look at two different programs or inputs inputs as programs programs as inputs and look at their syntactic differences",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2525.797,
    "end": 2554.302,
    "text": " more recently we have gained accessibility of information and distance measures in terms of software 2.0 so ai neural networks machine learning as software as per kind of the andre carpathy post 2017 era which is to say that we have these compressive distances semantic distances distances in so-called semantic information geometry model spaces",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2554.433,
    "end": 2569.843,
    "text": " that's how rags how cursor works how llms work here's what's not out there software 3.0 or it doesn't even matter or need a number but cognitive computing distances now that",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2570.836,
    "end": 2600.404,
    "text": " requires a kind of perspectival modeling which is least needed in software 1.0 where there's discrete numbers of changes to strings least to not needed to have multi-perspectivalism software 2.0 the perspectivalism is very enmeshed with the model's geometry intrinsically so we could look at the embeddings of a given input into multiple LLMs",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2600.485,
    "end": 2606.277,
    "text": " and consider each of the LLMs embedding in terms of compressive or semantic distances.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2606.838,
    "end": 2618.342,
    "text": "So it's not that it's impossible to get multi-perspectivalism, it's just not, it's being implicitly welded together in the trained state space of the LLM.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2619.031,
    "end": 2635.605,
    "text": " What about having a sort of first principles active inference ontologically specified pre-always-already separation that gives true perspective cognitive semantic information differences",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2635.585,
    "end": 2661.643,
    "text": " differences that make differences for sophisticated cognitive agents what's the accounting system domain specific notation and then general notation notation that lets us cover diverse and unknown cognitive phenomena addressing disparate systems from a first principles perspective which is the high road things we can describe and imagine that we can't necessarily build",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2662.889,
    "end": 2679.008,
    "text": " and then by specification that's larger than what we can build but where the crane and the skyhook meet is when you have the active inference model that is at the triple play point where the math can be traced into the math",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2679.95,
    "end": 2708.033,
    "text": " the variables data supply chain can be traced out to the next level and then the ontologies and the assertions that make up the rhetoric of the scientific model can be also separately broken out and that's like pre-reverse engineered to be massively composable in this super useful way so what does it look like for those cognitive phenomena",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2709.802,
    "end": 2737.243,
    "text": " here in doc cognitive phenomena so here the readme in cognitive phenomena is going to link to each of these folders some of which have files in them some don't but just to show let's do drag them all in comprehensively go through this folder of phenomena",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2739.029,
    "end": 2762.64,
    "text": " Ensure every subfolder has a technical, accurate README and a compliant GNN file showcasing the phenomena.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2763.042,
    "end": 2783.413,
    "text": " here we have all these different subfolders of cognitive phenomena this is the whole iguana this is the unifying approach to different cognitive phenomena is notationally it doesn't mean that there's functional unification per se it's not that there is a relevant edge first off",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2783.984,
    "end": 2804.963,
    "text": " without a system of interest or scope in mind it doesn't even really make sense to say well is attention related to language processing like yeah in principle you could design a system where there's any kind of relationship within any kind of anything because we're just imagining different recipes then if you specify",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2806.343,
    "end": 2829.162,
    "text": " for a given system like for a Red Harvester ant nestmate does this relate to that well then it starts to become an inquiry that can actually be pursued and whether or not they play some sort of synergistic or trading off role in a given situation as you've defined it as you've set up the situation Etc Etc Etc",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2831.318,
    "end": 2857.275,
    "text": " at least there can be a unified notation system so that within certain spaces those notation systems could be like fused concatenated tested for difference and so on so cod 4.0 sonnet doing incredible work just iterating comprehensively through and",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2860.613,
    "end": 2886.233,
    "text": " writing out uh the files as requested and then again to the point of like these are writing out recipes that are fantastical but then there's a way just like there's a way to build different software into linux there's a way to build approaches that bring you closer and closer to the grand central station rendering assembly",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2888.407,
    "end": 2913.823,
    "text": " so let's let it go through those examples read a little more so for this part was to say four real um first principles design of cognitive computing with all of the relationality and the multi-perspectivalism that entails",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2915.035,
    "end": 2923.082,
    "text": " We want to be able to do semantic information distancing in arbitrary multi-agent assemblies.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2925.044,
    "end": 2942.14,
    "text": "And I'm contending that some kind of plain text format like GNN and associated packaging and so on can help support that coming to be the case even today with the kinds of things we can do.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2944.887,
    "end": 2953.535,
    "text": " So in that light, the Active Inference Institute supports reliable and effective applications of cognitive computing and active inference across domains.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2955.317,
    "end": 2966.408,
    "text": "Different projects have different domains and systems of interest, but those are at the domain level and they're connected through the ontology, through the different tools.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2967.209,
    "end": 2974.776,
    "text": "There's all these different places where somebody can focus on just a sub, sub, sub domain or anything.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2976.022,
    "end": 2976.483,
    "text": " But how?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2976.843,
    "end": 2983.593,
    "text": "How to gain access to a common set of tools and pipelines and methods?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2984.334,
    "end": 2993.006,
    "text": "We can say, now make a GNN for this domain because the notation and the rendering is being strongly typed.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2994.668,
    "end": 2995.87,
    "text": "So we support that.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 2997.436,
    "end": 3016.761,
    "text": " reliable effective application by providing key services such as software so that includes inference libraries ones that we develop ones that we just rebroadcast the development of others all kinds of examples of ways that people are carrying out that terminal inference",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3016.741,
    "end": 3044.233,
    "text": " and then we host things like the ontology generalized notation notation like what this stream is about cerebrum the case specific rendering of different generative models there's sections in the docs about cerebrum and also pushing it further back education because the metal rails of the physical supply chain have their own supply chain leading to the education and the mind of the engineer",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3045.479,
    "end": 3057.733,
    "text": " So education and outreach and awareness is also part of it in terms of how do we make something that is lasting across generations and translating into ways of working together.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3059.198,
    "end": 3076.735,
    "text": " maintaining resources like tech trees professional training symposia internships in-person educational programs and so on these are all different offerings and with hopefully partner organizations we can offer these better and different and other and more",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3079.634,
    "end": 3100.208,
    "text": " now just like dirt and asphalt roads low roads so real generative models that you actually build even if it's just in drafting like a real recipe you imagined let alone a real recipe that you made let alone one that you made like a business idea around but real low roads",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3100.728,
    "end": 3118.872,
    "text": " are built basically only where and as and how needed lest there be a bridge to nowhere you could it's like look being at the um home depot supply store and looking at all this material and thinking you could do this it's like yes",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3118.852,
    "end": 3140.86,
    "text": " you could and if it were a quirky hobby or just a inexpressible curiosity it wouldn't even necessarily be a bad thing it just it takes resources not the least of which time so considered in that way there's already many applications and implementations of variational approaches to cybernetics",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3142.949,
    "end": 3158.764,
    "text": " all but active inference all but the citation network even narrowly considered so whether we look at our curated implementations and the dozens of explicit active inference implementations that we've curated in active blockference",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3158.744,
    "end": 3175.251,
    "text": " Or whether we're just thinking, well, if it's a variational autoencoder and it's using free energy minimization to look at joint distributions of perception, cognition, action, so on, is that not basically doing free energy minimization on the particular partition?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3175.231,
    "end": 3176.894,
    "text": " And then we could even take that further.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3176.954,
    "end": 3189.78,
    "text": "We could think about this recent paper and recent guest stream of Takuya Isamura on this triple equivalence and about the relationship between neural networks",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3191.195,
    "end": 3214.975,
    "text": " their loss function base graphs the kind that we're working with more closely with the factor graphs and base graphs and rx infer and continuous turing machines how those have a triple equivalence so that that parenthetical was to say however however deep you're gonna say active inference has already been applied",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3214.955,
    "end": 3242.65,
    "text": " whether you think take a very narrow scalpel and say it's only been applied in these open source papers that use exactly these criteria and these software packages and these calculations or if you zoom out and go actually every calculation cannot but be applying active inference wherever you are in that sort of frame there are some low roads",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3244.199,
    "end": 3273.193,
    "text": " and it is all dots within top-down notationally expressive analytically described spaces of generative models including second layer notational systems which we don't have or use here for operational grammar for kind of control flow but just separating out this generative model",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3274.304,
    "end": 3297.696,
    "text": " probability distribution description question from the more operational side of of how it is used for example the neural network considered as a programming object and math object and then how it's used with what is sent to it when and all those different kinds of things so",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3298.216,
    "end": 3325.438,
    "text": " there are some low roads maybe we think that the low road should be there should be more in this place or fewer in that place or the ones that are dirt should stay dirt and the ones that are this should be that we may have some preferences or some opinions on low road distributions and it's a separate related and separate topic",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3325.418,
    "end": 3334.585,
    "text": " to the expressivity of the high road and the generalizations which are not applying to specific cases",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3334.885,
    "end": 3359.863,
    "text": " so consider this cognitive research tech infrastructural situation analogous to the metallurgy and alchemy of high precision calipers which can be used to describe and measure machine parts during a material industrial revolution hence our focus on accessibility rigor applicability education sovereignty supply chains and security",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3364.687,
    "end": 3391.183,
    "text": " to recap that manual section common dialectic rhetoric in active inference related to the low road and the high road we want to be able to understand where are we talking about recipes that we can and can't do different things with",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3393.83,
    "end": 3417.762,
    "text": " the sort of in that cooking lens the best GNN package would be for very large to all known generative model types what is express what is expressed slash expressible through natural compositional language",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3417.742,
    "end": 3437.488,
    "text": " could be taken on through at least some steps like the type checking the category theory the ontology even if it wasn't known how to compute certain things still the description could be analyzed on its own terms",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3447.593,
    "end": 3460.438,
    "text": " So in terms of applying active inference and that being used in high reliability settings, even if it's just high reliability and important and meaningful for you, we're talking about performance",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3461.802,
    "end": 3484.249,
    "text": " trade-offs fitness phenotype adaptability in specific situations which is very far down the road from imagining the recipe so it's one thing to be like I wonder how a nested generative model for this and that would work for this and if it could be used for this and that important function and then",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3484.229,
    "end": 3514.067,
    "text": " here's my business plan that I believe is going to work for how we're going to do this and that so there's a big space between and that's where the information supply chain for generative models comes to beat and whether that's going to be something that has to be blazed through by individuals and the sorts of failures and trade-offs that would incur",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3515.65,
    "end": 3535.515,
    "text": " and or which parts of that coast to coast are there well characterized methods for so in order for people who care about performance to be able to even get to the point of assessing it and not going down this lifelong",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3537.385,
    "end": 3558.516,
    "text": " learning to write generative models specialty as it has largely been at this point in order for it to break out of that having infrastructure that takes on this scope is going to be critical",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3561.871,
    "end": 3580.668,
    "text": " It will also provide some deeper directions into the organization of education and research and professionalism through connection with information sciences, cognitive computing.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3589.456,
    "end": 3590.157,
    "text": "So meanwhile,",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3592.313,
    "end": 3593.555,
    "text": " Let's update GitHub.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3599.004,
    "end": 3609.161,
    "text": "Meanwhile, the LLM was going through the cognitive phenomena folder and writing GNN files.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3610.383,
    "end": 3612.567,
    "text": "So here's the learning and adaptation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3614.757,
    "end": 3640.326,
    "text": " and this sets up a a multi-channel discussion on one hand there's the low road discussion do we really think that there should be this many state spaces no i think this should be 25 dimensions or let's have this as a variable and then do a sweep across how many dimensions or what what are we really talking about with bi-stable perception are we talking about",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3640.306,
    "end": 3659.192,
    "text": " the ballerina spinning or are we talking about the duck rabbit or that so it supports the technical discussion of state spaces or for for a bioregional setting what variables are we taking into account in this model how",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3659.172,
    "end": 3687.087,
    "text": " and then there's there's this sort of duel which is just separate from the state spaces like what are we doing here should we be modeling this what are the feedbacks of us modeling this in general and in specific ways so just very interesting useful moments that can have some",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3690.914,
    "end": 3717.647,
    "text": " describable steps that take them from basically uh through the steps of cognitive systems design there's a few other new folders in the documentation um",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3719.382,
    "end": 3744.546,
    "text": " some are related to other packages there's also the tutorials let's look at this in GitHub I'll look at these then maybe do one or something random so if anyone has a comment or a question or wants to see like a GNN model or some function then just write it in the chat",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3758.093,
    "end": 3783.628,
    "text": " some tutorials so first making a simple gnn model basic perception a simple model with one hidden state and one observation so this is like the first model in step by step hidden state with two categories observation with two categories connections parameterization",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3785.735,
    "end": 3813.531,
    "text": " here's how you run main to go on specific steps to check at how it works and then more future tutorials um",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3821.881,
    "end": 3849.643,
    "text": " Pipeline has some more information on the pipeline itself Pipeline Architecture has more on the control flow the purposes of the different modules",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3851.53,
    "end": 3881.335,
    "text": " probably the main control flow could be redesigned or refactored but it works as it is to call these functions which call into folders so hopefully that gives some touch points",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3883.188,
    "end": 3884.81,
    "text": " That's the forward engineering.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3885.831,
    "end": 3892.4,
    "text": "Let's separate out one RxInfer example.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3895.103,
    "end": 3895.724,
    "text": "Scripts folder.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3904.695,
    "end": 3908.52,
    "text": "Let's do hidden Markov model.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3910.694,
    "end": 3935.352,
    "text": " then if it is too challenging maybe try the coin toss okay that was just the cognitive phenomena just showing you can make subfolders with lists and so on and it will just rifle through them okay",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3939.82,
    "end": 3945.328,
    "text": " Refactor this example unless anyone makes a specific comment or question.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3949.214,
    "end": 3953.7,
    "text": "Start by just running the script plainly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3956.364,
    "end": 3963.955,
    "text": "Sometimes it works in the notebook format or other times it'll hit a Julia error.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3981.653,
    "end": 3982.754,
    "text": " Okay, there's the error.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3985.118,
    "end": 3989.383,
    "text": "I'm just gonna tell cursor.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 3989.824,
    "end": 4004.764,
    "text": "This was from that notebook.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4004.784,
    "end": 4006.767,
    "text": "So that it runs as a script.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4009.767,
    "end": 4014.554,
    "text": " Here is the error we get when we run it now.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4018.98,
    "end": 4023.426,
    "text": "This could be done to more cleanly do it.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4023.827,
    "end": 4032.238,
    "text": "It probably could be focused on having this only be one script and get a single script version like I did with a multi-agent.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4032.319,
    "end": 4034.762,
    "text": "Or in this case, let's just go separate it",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4035.94,
    "end": 4062.758,
    "text": " into as many files in the folder as you want okay so it's going to start to get this hidden markov model rx infer program running and meanwhile",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4065.134,
    "end": 4091.175,
    "text": " this this could be done after fully disassembled but let's just try it as per and then i'll just drag in the existing gnm files",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4095.34,
    "end": 4109.503,
    "text": " Write and make to this folder a GNN file for the RxInfer hidden Markov model.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4111.105,
    "end": 4120.42,
    "text": "Example, all the parameterization it would need as a GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4133.697,
    "end": 4163.08,
    "text": " and then where it's going to go is in the app model block instead of saying b is this hard-coded matrix or a is an identity matrix with a three three those variables will be extracted into this toml or maybe even we can go right to gnn that's the reverse engineering",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4164.106,
    "end": 4192.206,
    "text": " then the forward engineering is in render rx infer folder say i'm trying to first off if this could already be a gn file we don't even need to do the toml meet in the middle but if the parser can just directly use this information then it's good to go",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4195.207,
    "end": 4195.608,
    "text": " Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4198.572,
    "end": 4211.951,
    "text": "Now, this config, this GNN for the RxInferPOMDP will not work in the multi-agent trajectory avoidance example and vice versa.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4214.074,
    "end": 4223.627,
    "text": "So that is just to say there's a lot more that we can diagnose and refine between",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4225.666,
    "end": 4233.034,
    "text": " which GNN can be taken to what step in what language.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4233.754,
    "end": 4244.506,
    "text": "But this HMM, like for example, we could, let's just say, I'll change it to just ask mode.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4244.726,
    "end": 4247.108,
    "text": "So it's going to respond to not make code edits.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4247.829,
    "end": 4252.534,
    "text": "How are these files similar and different?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4254.961,
    "end": 4284.867,
    "text": " greetings Matthias Conrath so imagine large libraries of GNN files some forensically reverse engineered from examples and papers others generated from program synthesis and we could do different kinds of probabilistic and deterministic analyses on oh this this one differs all but for this or",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4286.045,
    "end": 4290.09,
    "text": " 80% of this had that, but this one didn't or something like that.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4294.897,
    "end": 4296.919,
    "text": "Key differences, similarities.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4299.483,
    "end": 4311.799,
    "text": "As mentioned earlier, like in the PyMDP, A is the observation matrix, but in the RxInfer HMM, A is the state transition matrix.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4321.482,
    "end": 4349.228,
    "text": " okay let's see how the refactoring is going so here is that splitting from the uh single craft artifact the local organic handmade farmer's market style into the ikea industrialized",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4350.592,
    "end": 4359.487,
    "text": " high reliability information supply chain format.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4359.507,
    "end": 4364.094,
    "text": "Maybe it's hanging, but it is at least getting broken up into separate parts.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4368.902,
    "end": 4370.144,
    "text": "Just letting it know that it's hanging.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4370.605,
    "end": 4370.845,
    "text": "Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4388.02,
    "end": 4388.661,
    "text": " Triple play.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4398.233,
    "end": 4400.737,
    "text": "Okay, while it's fixing the HMM.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4403.741,
    "end": 4411.771,
    "text": "Various strategies and tactics may be helpful when employing GNN expressions in different settings and using a spectrum of model precisions, e.g.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4411.851,
    "end": 4416.357,
    "text": "from informal conversation to a beautiful presentation to a fully documented",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4418.463,
    "end": 4419.866,
    "text": " Reproducible research product.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4421.048,
    "end": 4433.029,
    "text": "Model precision should be balanced against the need for comprehensibility and ease of communication.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4435.473,
    "end": 4443.706,
    "text": " Broadly strategic considerations for expressing GNN include the overall approach to communication, such as the choice of modality and level of technical rigor applied for a given audience.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4444.527,
    "end": 4451.878,
    "text": "Tactical considerations for expressing GNN include specific techniques for enhancing clarity and understanding, such as using visual aids, examples, and analogies.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4465.898,
    "end": 4466.519,
    "text": " AI art.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4468.962,
    "end": 4472.607,
    "text": "Using models for inference data on inference models as data.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4485.866,
    "end": 4492.615,
    "text": "Markdown texts as data as GNN files meeting the visualization.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4497.708,
    "end": 4522.264,
    "text": " Plain text markdown files Meeting RxInfer With additional visualization and methods Kind of the magic of seeing GNN work Here we go So here on the right side",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4528.049,
    "end": 4551.542,
    "text": " At least something is happening Then Here",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4565.14,
    "end": 4576.875,
    "text": " It might be one moment too early to do it, but to now add to the pipeline, add to the rx infer render pipeline.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4581.46,
    "end": 4594.236,
    "text": "If we can reverse engineer the HMM to use the pure markdown, we don't even need to render it to this intermediate TOML.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4596.663,
    "end": 4626.433,
    "text": " but part of the reason why I wanted to go to the TOML was I did that standalone in another repo just to get to a controlled input to show that there was a middle to be met at now that we know that there is a middle to meet at we can basically just go",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4628.0,
    "end": 4655.695,
    "text": " straight to GNN and have example specific or category specific parsers but that still needs to be rendered in the GNN folder because the other the side information like the utility functions that this HMM model needs",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4656.788,
    "end": 4683.218,
    "text": " this wouldn't be in a GNN file so we need these kind of kind of like a car body and then the GNN parameterized parts are like the engine but there's a lot of functions in code and so the way that was being done in the multi-agent setting",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4684.379,
    "end": 4712.783,
    "text": " was just by copying the folder minus the config so if here it made the hmm gnn in the gnn folder so from the point of view of the",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4715.817,
    "end": 4744.052,
    "text": " HMM script folder it still does not have a GNN file but if this if it will succeed on this run then we will have succeeded in getting to this face so this one we skipped going to a single functional script went straight from the notebook",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4745.703,
    "end": 4767.12,
    "text": " extract to the modular software so one outcome of the step is a specific config file",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4770.526,
    "end": 4782.398,
    "text": " Another emerging approach is directly to target read write into GNN format directly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4783.72,
    "end": 4795.572,
    "text": "Still needs the rendering of extra parametric information.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4798.336,
    "end": 4819.821,
    "text": " meaning program environment and flow information that's not part of the generative model all right here we go so we got the now it's working for the HMM inference",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4824.357,
    "end": 4829.784,
    "text": " So I'm going to delete the original one or I'll move it to archive.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4849.531,
    "end": 4850.452,
    "text": "Or maybe it wants that one.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4851.574,
    "end": 4852.455,
    "text": "Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4852.475,
    "end": 4853.436,
    "text": "Queue up the next question.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4859.035,
    "end": 4880.706,
    "text": " Learn again to confirm function comprehensively output more in standalone from standalone file visualizations of free energy values.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4887.318,
    "end": 4891.824,
    "text": " So several prompts depending on the example to disassemble it.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4893.387,
    "end": 4897.132,
    "text": "Meanwhile, let's try another approach, which is not to disassemble it.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4897.893,
    "end": 4910.17,
    "text": "So this will be more, first you have to get it running as a script, or we could develop a plugin",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4911.736,
    "end": 4938.402,
    "text": " that goes directly to the notebooks but it's so much nicer to have it as these which can be concatenated into a notebook too but at least you know it's going to work so while that hmm is is happening let's do another approach which would be",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4942.043,
    "end": 4969.975,
    "text": " For this example, write a GNN file like for comprehensively setting all the needed information for the bike rental demand example.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 4970.95,
    "end": 4990.849,
    "text": " and write a Julia parser that confirms that the DNN you wrote will perfectly align with the initial example.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5001.072,
    "end": 5001.352,
    "text": " Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5004.096,
    "end": 5005.017,
    "text": "Let's see how this goes.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5019.435,
    "end": 5023.62,
    "text": "Move any unneeded files to",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5035.582,
    "end": 5048.882,
    "text": " To archive, confirm that when running the main script, all data and visualizations are saved to a timestamp folder.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5100.618,
    "end": 5120.888,
    "text": " Okay, so this would be an example of if we can skip even further steps by directly inserting in the GNN repo the state space that needs to be created for an RxInfer example to run.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5131.735,
    "end": 5132.095,
    "text": " Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5135.919,
    "end": 5137.221,
    "text": "Let's see what Julia.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5137.241,
    "end": 5156.081,
    "text": "Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5156.101,
    "end": 5158.063,
    "text": "So running comprehensive HMM.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5166.464,
    "end": 5172.877,
    "text": " If anyone has any last ideas or questions, otherwise I'm going to take it just a little bit further with this HMM.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5175.623,
    "end": 5177.206,
    "text": "And bike rental.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5178.528,
    "end": 5182.296,
    "text": "Then maybe one triple play who's on first.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5183.539,
    "end": 5184.22,
    "text": "And then...",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5208.314,
    "end": 5213.643,
    "text": " Seems to be hanging there.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5214.805,
    "end": 5222.158,
    "text": "Assess and improve and rerun to confirm.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5229.25,
    "end": 5232.516,
    "text": "Here's the validation parser test.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5235.601,
    "end": 5244.914,
    "text": " This one also seems to be hanging because it's a small.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5260.074,
    "end": 5260.174,
    "text": "Okay.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5278.21,
    "end": 5285.877,
    "text": " All right, let's just start generating some of the baseball stuff.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5297.647,
    "end": 5306.395,
    "text": "Next steps, seeing who watches and comments and emails and makes issues and contributions on GitHub.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5308.197,
    "end": 5331.078,
    "text": " I'm going to keep working on the package and the flow and the methods and putting hopefully some useful and interesting work out, but very much open to people's support or feedback on that.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5335.262,
    "end": 5336.263,
    "text": "That pretty much",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5337.796,
    "end": 5367.398,
    "text": " is what i wanted to cover today okay one baseball related analysis and then that will be",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5377.604,
    "end": 5383.031,
    "text": " Golden who's on first.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5398.409,
    "end": 5399.15,
    "text": "Oh, that was interesting.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5400.151,
    "end": 5402.094,
    "text": "Only one of us can be the first to do something.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5402.454,
    "end": 5402.755,
    "text": "Wow.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5405.578,
    "end": 5406.539,
    "text": "Only in the tone.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5406.759,
    "end": 5407.24,
    "text": "Wow, there's",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5409.92,
    "end": 5414.906,
    "text": " Only in the tone of the golden spike, I'm going to be the first to say that I'm not sure what the golden spike is.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5421.694,
    "end": 5439.876,
    "text": "Explore greatly within that topic in allegorical sequence involving go-not-tell approaches to category theory and",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5441.122,
    "end": 5469.998,
    "text": " recursive self development styled exoterically as pun laden quote who's on first dial 1920s illusion environment",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5475.631,
    "end": 5502.718,
    "text": " make the dialogue totally convey in plain quote fastball down the middle style generalized notation notation GNN",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5513.009,
    "end": 5517.815,
    "text": " Interesting little error there, huh?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5517.835,
    "end": 5518.476,
    "text": "Can't be deleted.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5523.523,
    "end": 5524.123,
    "text": "Very strange.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5527.388,
    "end": 5527.668,
    "text": "Gone.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5534.537,
    "end": 5542.948,
    "text": "All the technical elements, all the main SRC elements, all the documented...",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5544.498,
    "end": 5570.101,
    "text": " Write this all out vastly and creatively.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5570.121,
    "end": 5574.505,
    "text": "All right, if anyone has any last question, do write it.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5576.155,
    "end": 5594.181,
    "text": " otherwise look forward to some collaboration on the tooling and some fun interesting discussions going a little more broadly how does this relate to to how we learn and apply active inference all these topics",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5616.149,
    "end": 5616.409,
    "text": " you"
  },
  {
    "start": 5641.597,
    "end": 5663.622,
    "text": " yeah it will be uh interesting to see what prompt sequences what measures of information are useful for these kind of nested documentation and code folders how do you know when to stop",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5678.553,
    "end": 5680.62,
    "text": " All right, here it is.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5680.66,
    "end": 5690.672,
    "text": "Let's look at it in GitHub.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5735.675,
    "end": 5748.621,
    "text": " okay i'll just read it i'll read it and then if anyone writes any comment i might read that and then that will be the end",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5751.672,
    "end": 5752.854,
    "text": " Alright.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5752.874,
    "end": 5753.936,
    "text": "The Golden Spike Dialogue.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5754.136,
    "end": 5756.78,
    "text": "Who's on first base in Generalized Notation Notation?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5757.501,
    "end": 5759.625,
    "text": "1920s Railroad Depot.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5759.905,
    "end": 5764.332,
    "text": "Two gentlemen in bowler hats stand before a massive scheduling board covered in cryptic notations.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5765.013,
    "end": 5770.342,
    "text": "One holds a golden spike, the other clutches a stack of papers marked GNN Pipeline Specification.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5772.345,
    "end": 5778.996,
    "text": "Well now, Costello, we've got ourselves quite the categorical conundrum here at this Generalized Notation Notation Depot.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5778.976,
    "end": 5786.409,
    "text": " Say, Abbott, what's all this gobbledygook about spikes and rails and S underscore F zero three one type int?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5787.05,
    "end": 5789.374,
    "text": "Looks like someone's been playing alphabet soup with mathematics.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5790.576,
    "end": 5794.462,
    "text": "Ah, my dear fellow, you've stumbled upon the very essence of our enterprise.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5795.063,
    "end": 5799.23,
    "text": "That there is a state space variable, the foundation of our active inference railroad system.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5800.072,
    "end": 5800.793,
    "text": "Active what now?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5801.534,
    "end": 5804.359,
    "text": "I thought we were building a railroad, not running a gymnasium.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5805.183,
    "end": 5805.744,
    "text": " No, no, no.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5806.505,
    "end": 5807.787,
    "text": "Active inference, my good man.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5808.308,
    "end": 5810.212,
    "text": "It's about how minds make models of the world.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5810.692,
    "end": 5811.414,
    "text": "Think of it like this.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5811.935,
    "end": 5815.561,
    "text": "Every train car needs to know where it's going, where it's been, and what's around the bend.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5816.503,
    "end": 5818.406,
    "text": "So the train cars are... thinking?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5819.387,
    "end": 5820.289,
    "text": "Precisely.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5820.269,
    "end": 5823.074,
    "text": " Now let me show you our 14-stop construction process.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5823.475,
    "end": 5825.418,
    "text": "First, we start with Step 1, the GNN parser.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5825.919,
    "end": 5826.701,
    "text": "The what parser?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5827.362,
    "end": 5828.284,
    "text": "The GNN parser.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5828.544,
    "end": 5830.347,
    "text": "It reads our standardized notation files.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5831.289,
    "end": 5831.81,
    "text": "Oh, I see.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5832.251,
    "end": 5835.196,
    "text": "So GNN stands for Good Night Nancy?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5836.458,
    "end": 5837.901,
    "text": "Generalized Notation Notation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5838.683,
    "end": 5839.364,
    "text": "That's what I said.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5839.765,
    "end": 5841.147,
    "text": "Good Night Nancy Notations.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5842.139,
    "end": 5843.744,
    "text": " No, no, GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5844.266,
    "end": 5848.36,
    "text": "It's our text-based language for specifying these thinking train systems.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5849.263,
    "end": 5850.327,
    "text": "Well, why didn't you say so?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5851.09,
    "end": 5853.297,
    "text": "So this Nancy notation tells the trains how to think.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5854.728,
    "end": 5855.329,
    "text": " Let's move on.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5855.609,
    "end": 5856.471,
    "text": "Step two is setup.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5856.911,
    "end": 5858.113,
    "text": "Absolutely critical, mind you.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5858.674,
    "end": 5861.518,
    "text": "If setup fails, the whole pipeline stops dead in its tracks.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5862.679,
    "end": 5864.322,
    "text": "Like a locomotive with a busted boiler?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5865.263,
    "end": 5865.744,
    "text": "Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5866.185,
    "end": 5868.268,
    "text": "Then step three runs our tests.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5868.288,
    "end": 5868.728,
    "text": "Tests?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5869.75,
    "end": 5870.511,
    "text": "What kinds of tests?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5870.891,
    "end": 5872.414,
    "text": "Do the train cars take written exams?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5873.395,
    "end": 5875.538,
    "text": "In a manner of speaking, yes.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5875.518,
    "end": 5881.046,
    "text": " We validate their state spaces, check their connections, ensure their probability matrices are properly stochastic.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5882.067,
    "end": 5883.91,
    "text": "Their what-astic matrices?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5884.651,
    "end": 5886.013,
    "text": "Stochastic.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5886.033,
    "end": 5891.922,
    "text": "It means the probabilities sum to one, like making sure all the passengers on a train car add up to the total capacity.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5893.003,
    "end": 5898.992,
    "text": "Ah, so if I got three passengers in car A and two in car B, I better have five total passengers.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5900.394,
    "end": 5900.995,
    "text": "Now you're getting it.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5901.476,
    "end": 5902.697,
    "text": "Step four is our type checker.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5902.938,
    "end": 5905.221,
    "text": "It estimates computational resources.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5905.741,
    "end": 5906.282,
    "text": " Type checker.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5906.904,
    "end": 5910.813,
    "text": "Is that like making sure the passenger manifest has everyone's name spelled right?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5911.996,
    "end": 5915.805,
    "text": "More like making sure we have enough coal for the engine and enough track for the journey.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5916.326,
    "end": 5920.616,
    "text": "It looks at your model and says this will need X amount of memory, Y amount of processing power.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5921.558,
    "end": 5921.879,
    "text": "Smart.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5922.3,
    "end": 5923.142,
    "text": "What's step five?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5924.827,
    "end": 5925.349,
    "text": " Export.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5925.91,
    "end": 5928.258,
    "text": "We translate our GNN models into different formats.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5928.699,
    "end": 5930.244,
    "text": "JSON, XML, GraphML.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5931.468,
    "end": 5932.893,
    "text": "Sounds like a whole lot of MLs to me.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5933.274,
    "end": 5934.398,
    "text": "What's GraphML stand for?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5934.719,
    "end": 5936.946,
    "text": "Grumpy, manatees language?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5938.428,
    "end": 5941.172,
    "text": " Graph markup language.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5941.192,
    "end": 5942.254,
    "text": "Oh, that makes more sense.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5942.454,
    "end": 5944.457,
    "text": "And step six, visualization.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5944.958,
    "end": 5949.264,
    "text": "We create beautiful diagrams showing how all the state factors connect to observation modalities.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5950.145,
    "end": 5951.447,
    "text": "Hold up there, fancy pants.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5951.968,
    "end": 5952.589,
    "text": "State factors?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5953.39,
    "end": 5954.792,
    "text": "Observation what-alities?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5955.593,
    "end": 5956.294,
    "text": "Think of it this way.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5956.975,
    "end": 5960.641,
    "text": "State factors are like different aspects of what's happening inside the train car.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5961.582,
    "end": 5966.95,
    "text": "Maybe factor zero is how hungry the passengers are, and factor one is how tired they are.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5968.347,
    "end": 5968.708,
    "text": " Got it.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5968.808,
    "end": 5970.011,
    "text": "And observation, what's it?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5970.733,
    "end": 5971.294,
    "text": "Modalities.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5972.176,
    "end": 5974.181,
    "text": "Those are the different ways you can sense what's going on.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5974.382,
    "end": 5978.031,
    "text": "Maybe modality 0 is what you hear, modality 1 is what you see.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5979.655,
    "end": 5983.143,
    "text": "So the hungry, tired passengers in the train car can be heard and seen?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5984.386,
    "end": 5984.787,
    "text": "Bingo.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5986.201,
    "end": 5987.824,
    "text": " Now, step seven gets really interesting.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5988.145,
    "end": 5990.409,
    "text": "That's our model context protocol integration.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5991.692,
    "end": 5993.155,
    "text": "Model context what-a-call?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5994.036,
    "end": 5994.477,
    "text": "Protocol.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 5995.118,
    "end": 6000.008,
    "text": "It's like having a telegraph system that lets different railroad companies talk to each other using the same language.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6000.865,
    "end": 6004.069,
    "text": " Ah, so like Western Union but for thinking trains.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6005.171,
    "end": 6005.611,
    "text": "Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6006.172,
    "end": 6008.335,
    "text": "Step 8 handles our ontology processing.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6009.617,
    "end": 6010.858,
    "text": "Our what-ology?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6011.76,
    "end": 6012.36,
    "text": "Ontology.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6012.721,
    "end": 6017.127,
    "text": "It's like having a master dictionary that defines what every term means in the active inference world.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6018.048,
    "end": 6021.252,
    "text": "So if I say belief and you say belief, we both mean the same thing?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6022.274,
    "end": 6022.774,
    "text": "Precisely.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6023.836,
    "end": 6025.238,
    "text": "Now here's where it gets really exciting.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6025.538,
    "end": 6029.944,
    "text": "Step 9 renders our models into executable code for different simulation environments.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6030.312,
    "end": 6031.253,
    "text": " Executable code?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6031.854,
    "end": 6033.216,
    "text": "Are we hanging somebody?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6033.256,
    "end": 6034.837,
    "text": "No.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6035.398,
    "end": 6036.66,
    "text": "Executable means runnable.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6036.98,
    "end": 6042.146,
    "text": "We translate our GNN specifications into Python code for PyMDP or Julia code for RxInfer.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6043.608,
    "end": 6044.529,
    "text": "Hold the phone there, Abbott.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6045.15,
    "end": 6045.811,
    "text": "PyMDP?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6046.592,
    "end": 6047.192,
    "text": "RxInfer?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6047.853,
    "end": 6049.375,
    "text": "These sound like patent medicines.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6050.456,
    "end": 6055.322,
    "text": "PyMDP is Python for Markov Decision Processes, Discrete Active Inference Simulations.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6056.063,
    "end": 6058.446,
    "text": "RxInfer is reactive message passing in Julia.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6059.843,
    "end": 6063.307,
    "text": " So PyMDP is like Python-flavored train scheduling?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6064.048,
    "end": 6065.029,
    "text": "In a sense, yes.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6065.85,
    "end": 6071.236,
    "text": "And RxInfer is like having a telegraph network where messages bounce around updating beliefs in real time?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6072.517,
    "end": 6073.378,
    "text": "Telegraph network.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6073.538,
    "end": 6073.979,
    "text": "I like that.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6074.819,
    "end": 6075.5,
    "text": "What's step 10?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6076.441,
    "end": 6077.002,
    "text": "Execution.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6077.643,
    "end": 6079.445,
    "text": "We actually run the code we just generated.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6080.145,
    "end": 6081.487,
    "text": "Like firing up the locomotive?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6082.147,
    "end": 6082.628,
    "text": "Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6083.114,
    "end": 6086.599,
    "text": " Step 11 is where we bring in the big guns, LLM integration.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6087.72,
    "end": 6090.364,
    "text": "LLM, let me guess, large language models?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6092.287,
    "end": 6092.888,
    "text": "He knows that one.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6094.049,
    "end": 6094.45,
    "text": "Very good.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6094.951,
    "end": 6099.337,
    "text": "We use AI to analyze and enhance our GNN models, provide natural language explanation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6100.058,
    "end": 6103.823,
    "text": "So the thinking trains get help from other thinking trains?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6104.95,
    "end": 6106.572,
    "text": " It's turtles all the way down, my friend.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6107.773,
    "end": 6110.135,
    "text": "Step 12 is where things get mathematically sublime.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6110.175,
    "end": 6112.258,
    "text": "Disco pie translation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6113.038,
    "end": 6113.799,
    "text": "Disco pie?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6114.4,
    "end": 6116.202,
    "text": "Are we having a dance party with dessert?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6117.023,
    "end": 6117.603,
    "text": "Disco pie.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6118.164,
    "end": 6120.126,
    "text": "Distributional compositional Python.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6120.606,
    "end": 6122.328,
    "text": "It's category theory for string diagrams.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6123.109,
    "end": 6123.85,
    "text": "Category theory?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6124.691,
    "end": 6126.933,
    "text": "What's that got to do with railroad categories?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6127.513,
    "end": 6127.774,
    "text": "Fright?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6128.194,
    "end": 6128.695,
    "text": "Passenger?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6129.556,
    "end": 6129.996,
    "text": "Mail car?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6131.275,
    "end": 6133.458,
    "text": " Now we're getting to the philosophical heart of it all.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6134.079,
    "end": 6137.344,
    "text": "Category theory is mathematics that studies how things compose together.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6138.426,
    "end": 6140.869,
    "text": "Like how you can connect train cars to make longer trains.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6142.271,
    "end": 6147.058,
    "text": "So if I got a dining car and I connect it to a sleeping car, I get a dining sleeping car?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6149.702,
    "end": 6153.948,
    "text": "More like you get a composed system where the properties of both cars work together.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6154.529,
    "end": 6155.871,
    "text": "The beauty is in the connections.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6156.392,
    "end": 6157.934,
    "text": "The morphisms between objects.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6158.695,
    "end": 6159.797,
    "text": "Morph what-isms?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6160.823,
    "end": 6187.067,
    "text": " the arrows the relationships how one thing transforms into another in our railroad it's how beliefs flow between different parts of the system like how the conductor's belief about the schedule flows to the engineer's belief about when to blow the whistle brilliant you've grasped that you've grasped the essence of categorical composition step 13 uses jacks for high performance evaluation",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6188.296,
    "end": 6188.717,
    "text": " Jax?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6188.877,
    "end": 6190.119,
    "text": "Is that short for Jackson?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6191.121,
    "end": 6192.383,
    "text": "Just another executable.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6192.944,
    "end": 6197.01,
    "text": "It's Google's library for automatic differentiation and just-in-time compilation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6197.892,
    "end": 6199.835,
    "text": "Automatic differ-at-what-chin?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6201.017,
    "end": 6206.586,
    "text": "It's like having a mathematical microscope that can instantly tell you how changing one little thing affects everything else in your model.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6207.768,
    "end": 6213.477,
    "text": "Like if I change the call input, it automatically figures out how that changes the train speed, passenger comfort, arrival time.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6214.857,
    "end": 6215.377,
    "text": " Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6216.258,
    "end": 6222.384,
    "text": "And just-in-time compilation means it optimizes the code right when you need it, like having a master mechanic tune your engine on the fly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6223.665,
    "end": 6223.966,
    "text": "Slick.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6224.646,
    "end": 6225.327,
    "text": "Step 14.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6226.308,
    "end": 6226.989,
    "text": "Site generation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6227.569,
    "end": 6230.812,
    "text": "We generate beautiful documentation websites showing off all our work.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6231.673,
    "end": 6233.635,
    "text": "Like a fancy brochure for the railroad company?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6234.556,
    "end": 6235.016,
    "text": "Precisely.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6235.577,
    "end": 6237.879,
    "text": "Now let me show you the recursive beauty of this whole system.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6238.76,
    "end": 6239.24,
    "text": "Recursive?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6239.961,
    "end": 6241.723,
    "text": "That sounds like something you need a doctor for.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6242.784,
    "end": 6243.244,
    "text": "No, no.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6243.578,
    "end": 6245.26,
    "text": " Recursive means self-referential.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6245.821,
    "end": 6247.964,
    "text": "The system can model itself modeling things.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6249.226,
    "end": 6252.631,
    "text": "So the thinking train can think about itself thinking about thinking?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6255.235,
    "end": 6257.498,
    "text": "Now you're getting into the philosophical deep water.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6258.419,
    "end": 6263.988,
    "text": "Each GNN model is like a mirror that can reflect other mirrors, creating infinite depths of self-awareness.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6265.69,
    "end": 6269.956,
    "text": "Like when you stand between two mirrors in a barbershop and see yourself going on forever?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6271.378,
    "end": 6272.64,
    "text": "Beautiful analogy.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6273.11,
    "end": 6275.092,
    "text": " And that's where our state space blocks come in.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6276.153,
    "end": 6278.896,
    "text": "State space blocks, are we building with Legos now?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6280.697,
    "end": 6282.659,
    "text": "Think of them as the blueprint sections.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6283.06,
    "end": 6293.09,
    "text": "Each block defines variables with their dimensions and types like S underscore F zero three one type int means state factor zero is a three by one integer array.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6294.251,
    "end": 6298.695,
    "text": "So it's like saying car number one holds exactly three passengers and we count them with whole numbers.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6300.582,
    "end": 6301.124,
    "text": " Precisely.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6301.786,
    "end": 6303.691,
    "text": "And our connections show how these blocks relate.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6303.872,
    "end": 6308.446,
    "text": "We use greater sign for directed relationships, hyphen for undirected ones.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6309.329,
    "end": 6313.14,
    "text": "Like engineer to conductor means the engineer gives orders to the conductor.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6314.487,
    "end": 6314.987,
    "text": " Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6315.688,
    "end": 6320.052,
    "text": "And passenger hyphen passenger might mean passengers can talk to each other both ways.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6321.173,
    "end": 6321.994,
    "text": "Hashtag cerebrum.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6322.814,
    "end": 6324.396,
    "text": "This is starting to make sense.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6324.416,
    "end": 6326.097,
    "text": "What about those matrix things he mentions?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6327.178,
    "end": 6331.302,
    "text": "Ah, the A, B, C, and D matrices, the heart of active inference.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6331.322,
    "end": 6331.982,
    "text": "A, B, C, D?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6332.923,
    "end": 6334.304,
    "text": "Sounds like we're back in kindergarten.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6335.405,
    "end": 6337.047,
    "text": "Matrix A is your observation model.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6337.187,
    "end": 6340.29,
    "text": "It tells you the probability of seeing something given what's actually happening.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6341.11,
    "end": 6344.173,
    "text": "Like the probability you'll hear the whistle given that the train is approaching.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6344.66,
    "end": 6345.08,
    "text": " Perfect.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6346.622,
    "end": 6348.064,
    "text": "Matrix B handles transitions.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6348.504,
    "end": 6350.987,
    "text": "How things change over time, possibly based on actions.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6351.968,
    "end": 6354.23,
    "text": "Like how pulling the brake lever changes the train speed?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6355.872,
    "end": 6356.072,
    "text": "Right.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6356.753,
    "end": 6358.355,
    "text": "Matrix C represents preferences.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6358.615,
    "end": 6360.077,
    "text": "What outcomes you'd prefer to see.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6360.677,
    "end": 6362.78,
    "text": "Like preferring to arrive on time rather than late?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6363.721,
    "end": 6365.342,
    "text": "And Matrix D gives you your priors.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6365.963,
    "end": 6368.085,
    "text": "What you believed before you had any evidence.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6368.846,
    "end": 6372.27,
    "text": "Like believing the train is probably on time when you first arrive at the station.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6373.482,
    "end": 6374.686,
    "text": " You've mastered the fundamentals.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6375.289,
    "end": 6377.236,
    "text": "Now here's where the golden spike comes in.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6378.139,
    "end": 6381.05,
    "text": "Finally, I was wondering when we'd get to the spike.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6381.311,
    "end": 6382.395,
    "text": "Is it made of real gold?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6384.822,
    "end": 6390.668,
    "text": " The golden spike represents the moment when all these separate components connect into one unified system.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6390.688,
    "end": 6398.956,
    "text": "When PyMDP talks to RxInfer, when DiscoPy diagrams execute as Jack's code, when LLM analysis enhances human understanding.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6399.977,
    "end": 6402.86,
    "text": "Like when the eastern and western railroads finally met in Utah?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6403.74,
    "end": 6404.161,
    "text": "Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6404.781,
    "end": 6408.906,
    "text": "That ceremonial spike joining two great endeavors into one transcontinental system.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6409.646,
    "end": 6413.53,
    "text": "RGNN is the golden spike of computational active inference.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6413.51,
    "end": 6439.011,
    "text": " so this whole contraption the 14 steps the thinking train cars the matrix algebras the category theories it all comes together to make one big what a standardized way to describe validate visualize and simulate how minds work whether it's a human brain an ai system or a whole ecosystem of interacting agents agents are we talking about secret agents now",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6440.088,
    "end": 6444.236,
    "text": " Computational agents, anything that acts based on beliefs and desires.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6444.777,
    "end": 6446.039,
    "text": "Your train conductor is an agent.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6446.38,
    "end": 6450.487,
    "text": "He believes certain things about schedule and desires to keep everything running smoothly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6451.649,
    "end": 6454.755,
    "text": "And all these agents can be described using this GNN notation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6456.035,
    "end": 6458.919,
    "text": " from the simplest thermostat to the most complex social system.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6459.579,
    "end": 6464.185,
    "text": "Each one gets its state-state blocks, its connection diagrams, its ABCD matrices.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6465.407,
    "end": 6482.127,
    "text": "And then they can all talk to each other through this model context protocol telegraph system and be simulated in PyMDP or RxInfer, visualized with pretty diagrams, analyzed by LLMs, translated to category theory, optimized with JAX, and documented on beautiful websites.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6483.203,
    "end": 6484.606,
    "text": " We'll all be hornswoggled.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6485.207,
    "end": 6491.539,
    "text": "So this golden spike connects not just two railroads, but 14 different ways of understanding thinking systems.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6492.561,
    "end": 6494.765,
    "text": "14 steps, infinite possibilities.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6495.707,
    "end": 6504.604,
    "text": "From parsing text files to generating websites, from validating syntax to executing simulations, it's all connected by the golden thread of standardized notation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6506.643,
    "end": 6508.425,
    "text": " And anyone can learn this GNN language?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6509.186,
    "end": 6510.508,
    "text": "It's designed to be human-readable.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6511.249,
    "end": 6513.032,
    "text": "Markdown-based files with clear sections.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6513.472,
    "end": 6516.757,
    "text": "Model name, state space block, connections, initial parameterization.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6517.778,
    "end": 6519.841,
    "text": "Sounds like a recipe for building thinking trains.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6520.883,
    "end": 6523.706,
    "text": "More like a recipe for understanding how thinking itself works.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6524.387,
    "end": 6528.793,
    "text": "The recursive beauty is that we use thinking systems to design better thinking systems.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6529.735,
    "end": 6532.178,
    "text": "Like using a train to design better trains.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6533.474,
    "end": 6534.035,
    "text": " Exactly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6534.456,
    "end": 6539.927,
    "text": "And the category theory ensures that when we compose these models together, the whole system remains mathematically consistent.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6540.749,
    "end": 6545.478,
    "text": "Like making sure when you connect train cars, they actually stay connected and don't go flying off in different directions.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6546.24,
    "end": 6546.58,
    "text": "Beautiful.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6546.921,
    "end": 6549.085,
    "text": "You've grasped the essence of compositional modeling.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6549.346,
    "end": 6551.009,
    "text": "Now shall we drive that golden spike?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6552.211,
    "end": 6552.512,
    "text": "You bet.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6554.011,
    "end": 6555.232,
    "text": " But just one more question.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6555.573,
    "end": 6558.837,
    "text": "When we drive this bike, does it start the whole 14-step pipeline?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6559.918,
    "end": 6560.539,
    "text": "Indeed it does.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6561.279,
    "end": 6565.945,
    "text": "From the first GNN parse to the final website generation, it all begins with that ceremonial connection.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6566.906,
    "end": 6567.707,
    "text": "Then let's do this thing.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6568.147,
    "end": 6570.811,
    "text": "For the Transcontinental Railroad of Computational Consciousness.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6572.052,
    "end": 6574.975,
    "text": "For active inference and the standardization of thinking systems everywhere.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6575.876,
    "end": 6576.978,
    "text": "Three cheers for GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6577.819,
    "end": 6578.78,
    "text": "Hip hip hooray!",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6580.021,
    "end": 6580.862,
    "text": "Wait, Abbott.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6580.882,
    "end": 6582.364,
    "text": "What happens after we drive this bike?",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6583.846,
    "end": 6586.871,
    "text": " Why then we start working on GNN version 2.0, of course.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6588.454,
    "end": 6590.638,
    "text": "Oh no, here we go again.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6590.698,
    "end": 6607.828,
    "text": "Write another work in.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6615.25,
    "end": 6641.815,
    "text": " exactly like William Blake illuminated poem status woven densely with actual integrated William Blake quotes and styles about GNN implicitly and explicitly.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6647.633,
    "end": 6676.408,
    "text": " pretty funny baseball ones delete the output folder src python3 main.py",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6678.329,
    "end": 6679.771,
    "text": " regenerates the output folder.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6702.703,
    "end": 6703.965,
    "text": "And then in another one",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6705.515,
    "end": 6715.467,
    "text": " Run pipeline validation and check comprehensively for full functionality of.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6724.537,
    "end": 6734.509,
    "text": "And updated streamlines documentation.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6738.893,
    "end": 6767.179,
    "text": " still on step 6 with the visualization there's the outputs exports so like that self-driving car that we made that's probably why the visualization is taking a long time because now we have the self-driving car GNN",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6773.943,
    "end": 6785.194,
    "text": " So I'll pull... That's the trade-off with having a bunch of the GNN files actively there.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6786.495,
    "end": 6787.416,
    "text": "But it'll be cool to see.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6789.058,
    "end": 6790.82,
    "text": "Archive has a bunch of GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6792.962,
    "end": 6793.943,
    "text": "So we can just run that one.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6798.147,
    "end": 6799.528,
    "text": "While it's writing the Blakey and",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6806.09,
    "end": 6819.911,
    "text": " This is very effective, having the agent run the pipeline and then test it itself.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6829.165,
    "end": 6830.207,
    "text": "Now let's move to 7.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6838.979,
    "end": 6859.571,
    "text": " So this is the attempt to write the TOML falling back on default values, trying to write the PyMDP script.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6859.592,
    "end": 6863.097,
    "text": "So not a solved problem yet, but",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6872.712,
    "end": 6874.474,
    "text": " Okay, let's see if this will work.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6874.554,
    "end": 6876.196,
    "text": "Otherwise, I'll just end it here.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6876.376,
    "end": 6895.597,
    "text": "But I'll wait one minute, have a drink of water, see if anyone writes a comment.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6895.617,
    "end": 6899.682,
    "text": "Funny, each of the three times it's tried to write it, it's called it a different file name.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6908.015,
    "end": 6913.262,
    "text": " Here's the visualization of the self-driving car.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6915.945,
    "end": 6924.536,
    "text": "Yeah, it's massive, but so cool.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6927.22,
    "end": 6937.633,
    "text": "All the variables and ontology terms for an LLM generated output",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6940.246,
    "end": 6941.48,
    "text": " Fourfold vision of GNN.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6941.52,
    "end": 6942.612,
    "text": "I hope that one works.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6987.158,
    "end": 6991.783,
    "text": " Okay, looks like it is not to be, like it is to be unwritten.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6992.504,
    "end": 6995.687,
    "text": "So, thank you for watching.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 6995.747,
    "end": 7000.232,
    "text": "Hope people can find out how to engage or support as they see fit.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 7001.213,
    "end": 7008.101,
    "text": "Contact Blanket at ActiveInference.Institute if you have any questions or anything, whenever that may be.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 7009.022,
    "end": 7010.263,
    "text": "So, till next time.",
    "speaker": "SPEAKER_00"
  }
]