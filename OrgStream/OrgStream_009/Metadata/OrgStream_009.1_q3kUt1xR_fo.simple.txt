SPEAKER_01:
hello welcome it is june 18th 2025 and but your cover slide had me guessing for sure

And we're in Active Org Stream 9.1 with Manuel Hoffman and with Bradley Alicia as guests.

We will be discussing their recent paper, The Value of Open Source Software.

And looking forward to this, a lot to say that I'm sure will come after your presentation.

So thank you again for joining and to you for the presentation.


SPEAKER_00:
Great.

Yeah, fantastic.

Thank you, Daniel, for

inviting me to present this work and yeah bradley looking forward to the discussion and everybody else on youtube as well if you have any comments obviously that's much appreciated all right well so let me just

dive right into this, right?

So we're covering here the value of open source software.

Let me just give you an idea, right?

And probably you are closer to that than maybe some of the other audience members to whom I usually present, but you can think about a bunch of companies here, Google, Ford, Intel, John Deere, and we usually can just ask, what do they have in common?

Well, actually what they have in common is

that among others, they are really examples of users and contributors to open source software.

And we know that open source software is really a cornerstone of modern software development.

So 96% of firm code bases contain some form of open source software.

That's according to the software analytics company Synopsys.

And 76% of all code in firm code bases is actually open source software code.

It's hugely important in cutting edge technologies, artificial intelligence, quantum computing, big data and analytics, and many other areas.

So one venture capitalist, Mark Anderson, once said, software is eating the world.

And that was enhanced by Joseph Jacks,

who you said saying open source is actually eating software faster than software is eating the world.

Just talking about the dominance of open source software, which just to give you the rough idea of the definition, right?

Open source software is software whose source code is publicly available, usually under some permissive license.

In particular, we are interested in free open source software very often, which is a public good.

It's generally non-rival.

So if I consume it, it's not less available for you.

And it's usually non-excludable.

So basically, it's the ideal form of a public good that everybody can consume.

And often, you can really think of that as a global public good, like education.

individuals and firms have used open source software and contribute to it substantially, right?

So there has been a bunch of literature, especially by my co-author here, Frank Nigel, but also a lot of other people.

And we are continuously working on better understanding the open source software ecosystem, companies and individuals that engage in it.

So now you're probably very familiar with this slide.

Maybe I've seen it too often, this kind of figure, right?

Where we can see this huge machinery of our modern digital infrastructure.

And then there is this little piece at the bottom, which is a project by some random person in Nebraska that has been thanklessly maintained since 2003.

So what that tells you, right, there is first there is some huge dependency on some highly active individual, some open source maintainers without our without there could be a potential collapse of our modern digital infrastructure.

And on top of that, the issue of the tragedy of the commons, which is

that which is common to the greatest number gets the least amount of care, according to Aristotle, right?

So there's some kind of free-riding potential, not only, but also, I think, issues that we observe anecdotally and which we also see here in the data as well.

So now, why do we care about the value of open source software?

Well, I guess we care about the value of a lot of goods.

But here in particular, we do not know actually what's the value of open source software because it doesn't even come up in traditional

Gross domestic product measures that are in accounting systems.

And also some firms may just not be aware of productivity and cost saving benefits.

So that's why we are bringing out this paper to better understand the value of open source software, measuring the value here in a very simple way as the price times quantity, P times Q. And so here, open source software really is a problem.

The price of open source software is zero, right?

There is no price.

That is the actual measurement problem.

And the quantity, well, it's infinitely replicable because the license allows for free copying and usage is not easily trackable.

So we have a problem on the price side.

We have a problem on the quantity side.

And we're not saying that we're going to solve this problem, but we're saying we're going to try to make some inroads here.

This is in the spirit of what Warren Buffett said, price is what you pay and value is what you get.

So price could be one idea of value, but it's really not the actual value.

And of course, we want to provide a value measure here because usually a lot of folks, managerial folks, firms working in companies, but really anybody wants to understand, wants to get an idea of how valuable something is.

So because otherwise, people may not allocate resources towards it or do not really understand the importance of it.

So we ask, how much would we lose really if open source software did not exist?

Or ask differently, how much would it cost us to replicate the universe of open source code?

And for prices, we're going to calculate the prices using

what we like to call a replacement value or so-called, you could also use purchase price.

And for quantity, we will use two large data sets, the largest ones that we are aware of.

One is the census of open source software, which is inward facing towards within the company, the products that they are using and then reselling and then built with, which is

an outward-facing data set that is basically based on websites and the usage of open source software and websites.

Now, to measure the value of open source software, or really the value of anything that is difficult to measure, you could go about it in two ways.

You could go about it from the output market side.

The output market would be the goods market from the firm's perspective, and you can just

Let's say you have a good that has a price of zero, then you find a substitute good that actually has a positive price, and you may be able to impute that to get an understanding of what the value may be.

And Nordhaus has famously made this very general case for

greenhouse gas emissions and Greenstein-Nagel have, for example, calculated the value of Apache servers being around $2 billion since that has been extended with web servers in general, the value being around $4.5 billion.

And they could do that because they have had some information on what the substitute good was.

And so that is very helpful, right?

So they have information on usage of all of the web servers, but then we can only really look at one particular type of software here, web servers, and it's difficult to expand that because you would need to find a basket of goods, a gigantic basket for each of the open source software packages, and some are not

are really small pieces.

Some are larger pieces.

It's difficult to find those substitute goods.

So what we did is we're going to use the second approach, the input market approach or the labor approach.

So from a firm's perspective, you're going on the labor market and we're going to look at the replacement value via labor costs.

You can think about that in the spirit of household innovations, bicycle and hippo.

The main idea here really is let's think about the housework that you are doing, right?

You're cleaning something, you're vacuuming in your house and you're not getting paid for that, right?

You just do that in your free time.

That's not going to add to GDP, but you could instead hire somebody and they could do the work

and vacuum for you.

And that would be the price that it would cost to engage in this household activity.

And then you could measure the value.

And we are going to do a similar exercise.

And we're not the first one here.

There is Blint and co-authors that have done a kind of similar exercise for the European Union.

Robins and co-authors have done an exercise for the United States where they estimated the supply side value being around 1 billion to 38 billion dollars.

We do this

not on the european or us level but we think about that as a global estimate but we are going to cut down and we're going to look at firm specific contributions so we're going to discard kind of the long tails of contributions that may um happen from from individual small contributions so that's where our estimates may differ so now the good thing about this approach is we have all of open source

we can use all of open source software and we can assign some kind of price by imputing the wage that it would cost to create this product.

And the negative aspect is maybe it's difficult to get the usage information.

But now we're also approximating usage information through our two large data sets.

So now,

For our methodology, we're using really multiple counterfactuals.

Well, we are mainly using method two, but in one counterfactual, we're also going to use a part of method one a little bit, and I'm going to explain this in more detail here.

So our first counterfactual is the supply side counterfactual.

So it's the idea that

open source software as a concept just purely doesn't exist.

And now the whole code has to be rewritten once.

Now, we're doing that by looking at all open source packages that are used by companies in particular.

And we think about addressing production externalities.

So like we are just holding constant people that are working one company are not going to move to another company and are not benefiting from the production of one piece of code when they are then producing another piece of code.

But they are just producing those pieces of code separately.

Then we count the lines of codes per package and calculate

labor replacement value so which is for us in this case the value of from the supply side now if we can dive into a little bit how this labor replacement cost value works exactly after going through those three counterfactuals now the second counterfactual is well if the concept of open source doesn't exist anymore

now what would happen is maybe one firm would rewrite would would emerge and rewrite the code and then sell it to all of the other firms so um that's now we would just think about obtaining the information usage information that we have from both data sets on the packages we address

Consumption, externalities, so there are no additional spillovers.

Then we sell the one seller.

generates all of those packages and then they sell it at the market price p so here you can really see it's just the price times quantity over all of the packages minus the fixed cost that it takes to generate those packages which is really as a value from the supply side from the first counterfactual and the elasticity of demand here is around one we did some and that we set around one based on the literature but

we estimated it and varied it, so engage in some robustness checks that you can find in the paper as well.

And so the main idea is that we find an optimal price P here, give them all of the quantities, and then we can create, then we can get a measure of the overall value from a one seller demand side.

Now, a third counterfactual is what we like to call the firm autarchy demand side.

And this is a concept

open source software again doesn't exist anymore now each firm has to write rewrite the code by themselves we again obtain all of the usage information address consumption externalities but now there's a single replacement idea within a firm so when you use when you use a product yes you can use it multiple time a package but we are really thinking of that we don't have to generate that

There is no additional value that is being generated from using it additional times because you're just using, you can just freely move it within the company and there's no price for internally using it.

Now we calculate the value here by using the supply side value and multiplying it by all the times that it has been used each package for each of those companies.

All right.

So what is the data about well, we have the sensors to our free and open source software, which has been.

Really a mega project, I would say, by my.

Co-author Frank Nagel at HBS.

And this is from 2020, data from 2020 in particular.

There is a third version coming up and there are continuously a new version.

And we are trying to see how we can get more information about open source software usage that is particularly firm related.

And here you can see code usage of firms globally.

So there are around 600,000 packages.

but we are going to really uh home in to the top packages so we are cutting off a huge tail um on on the right side um this is information from software composition analysis firms so they are scans what those companies um here synopsis and sneak for example or fossa are doing is they usually ask um to scan um all of the usage of um

open source software and software in general within firms.

For example, when a merger is happening of firms or before a merger is happening because the companies want to know what kind of potential liability exists and so they really check for license compliance.

now um second data so this is the kind of inward facing um data set um that um we construct and the second complementary data set is from built with which um is a service which basically scans all of the websites um globally and gets the code from all of them and then um it measures all of the technologies that are embedded in those websites and among others this control contains

all open-source software web development, and we try to approximate that.

We think we'll see an underestimate.

We are just basically focusing on JavaScript to make it easy on us, but I'm sure there would be, you know, like, there's an even larger value here.

Those are 8.8 million websites.

We wanted to hone into the ones that are distinct from websites, so we matched this with a couple of company

databases that allows us to identify companies, so like Orbis, Compostat, and PitchBook, which gives us around 3.3 million websites for almost the entire year of 2020.

Now, we have those two complementary datasets that are internally, inward and outward facing, and additionally, for an analysis on inequality and

what the contributors, what the developers contribute as a value.

We use GitHub.

We obtain the share of contributions to a project from developers.

So really the commits to a project and the number of project contributions.

And as the forest data set,

that has been relatively recently added, are firm contributions.

So we try to obtain an understanding of firm affiliations of projects through the emails of the committers.

So if you used an email that is tied to a company that we can identify in Orbis, Compostat, or PitchBook, where Orbis is a global database on companies and Compostat is

for public firms and PitchBook for smaller entrepreneurial firms, then we would attribute that to be a firm affiliated project.

And we get the share of commits that are firm affiliated per project.

Now,

I mentioned we are using this kind of replacement value labor cost approach.

So we are really using the constructive cost model, also called COCOMO from the US Department of Defense, to estimate software project cost.

It's quite a flexible model, but we are going ahead

with the default parameters, but again, we're engaging in some robustness checks with those parameters as well.

So really here it's, the F word stands for person, month, effort.

So how many people do you need per month?

And then

loc stands for the lines of codes and thousands of lines of codes and we just have some parameters here that we um that are non-linear transformation that we that we can vary but we use a default for this exercise and um one aspect is well

Once we know how many people we need, then we also need to provide a given idea about what the wage for those individuals may be, right?

And so from Salary Expert, another database, we got the monthly gross salary with the range from $3,000 to $10,000.

So from a low and high wage country, let's see if this button works properly.

So here you can see the top 30 countries that are included for what we call the global wage.

So we included 88% of GitHub activity from 2020.

And we used all of those companies in a global wage estimate.

So we really have three estimates.

One is an estimate

where we used a low wage from India, one where we used a high wage from the US, and something in between with all of those countries that I just showed you as a global average wage.

All right.

Now, to give you a sense of the data, here are some descriptive statistics for both panel A, which is the census, and built with data in panel B, so inward and outward facing.

So you can see the lines of codes for all packages in particular here, the number of like the lines of codes is roughly maybe 70% of that.

When we just focus on the top five languages and we can see the usage of all packages around 2.7 million times that packages were used here, around 1,800

packages, or for the top five languages, around 1,600 packages.

has also roughly the same ratio of top five languages that we identified based on GitHub's top five languages during that time period.

And I'll show you what those were when I go through the results.

But those are around 740 projects.

All right.

Here's basically the main finding.

If you want to take anything away from this,

it's here, the value of open source based on pure code.

So we're getting rid of any kind of addition, what could be data, for example, or could be maybe machine generated.

And what we find is for a low wage country, it would be the Indian wage, we found around $1 billion value on the supply side of firm related open source software packages.

where the global estimate is around 4 billion and 6 billion on the higher side for US wage as a value.

Now, when you have one seller that is taking, that is recreating everything and then selling the packages to those different firms that are using it,

we have basically a constant value of around $5 trillion.

There is some variation, but basically the wages here don't matter as much because they're in the fixed cost.

And then finally, when we assume that all of those companies have to replace open source software packages by themselves internally, and they don't resell products to other firms, then we get a value of around $88 trillion globally

this case right so you can see the look at this as some kind of upper bound and maybe we may be in between this one seller case and the firm autarky case in reality now um well let's take a the 5.25 trillion as kind of a lower bound estimate right um you accounting in particular for usage so not just the supply side of your availability of packages

And so this is around 5.25 trillion in demand side value over the time.

in particular measured in the year 2020.

And we know that private firms spent around 45% of software cost on pre-packaged software, so proprietary software.

So now let's assume this kind of spending that is actually US estimate holds globally.

This would be around $2.36 trillion.

of proprietary spending on closed software, if you like.

Now you add the value of the 5.25 trillion to that, that's around 7.61 trillion dollars, just purely in software cost.

So what that implies is that firms now would spend 3.2 times more on software than what they currently are spending

in relation to, because open source software, the concept just purely doesn't exist anymore in this world, right?

So that's a huge kind of cost saving for them when you just think about open source software being freely available.

Now, we know there's a substantial value.

So one question that is quite natural here is how evenly is this actually distributed?

Well, and here are some examples of, well, this is here, the top five languages plus Go from GitHub.

And you can see this supply side value of just recreating all of open source software once.

of the top five languages.

There are some substantial variation where Go and Java have quite a high value.

Python, for example, has a relatively low value.

TypeScript, JavaScript also relatively low value on the supply side.

C is somewhere in the middle.

Now, this is not surprising.

This is more of a robustness check on the

supply side.

So this was the census data set, the inward facing, the outward facing, built with data set.

We conditioned already on JavaScript, which is often also related to TypeScript.

And so we picked up basically all of that variation in the externally facing data set.

Now, for the census of open source software, unfortunately, we don't have any information on the heterogeneity by industry.

So

We try to think about that a little bit more in the context of the outward facing data set.

And we got some, we could show you some heterogeneity in the demand side value of the trillions of dollars.

So we can see here in administrative and support in ways that's quite high the value.

Healthcare and social assistance, professional, scientific services, other services.

quite high retail trade, also relatively high, or you see manufacturing, interestingly, somewhere in the middle, I would say, management of companies, enterprising, mining, and public administration, utilities, or agriculture, the value is relatively limited.

And to some degree, that may be just of lower, yeah, just substantially lower usage in those industries.

Now, how is this value distributed, or I guess, where does this value come from when we think about the developers here?

And we plotted a Lorentz curve, so with this idea of a Gini coefficient

being one, right?

If you think about the Lorenz curve here as tracing the 45 degree line, this is the share of the value on the supply side.

This is the y-axis.

On the x-axis, you have the cumulative share of developers that are creating this value, and they're engaged in repositories.

Here the value is in blue and the engagement repositories in orange.

Now if this blue line would be exactly aligning with the 45 degree line, that would mean that every developer contributes equally to the value share.

But we don't see that.

We see that this blue line here, that is the value line,

for the share of developers is actually very close to the corner here and very far away from the 45 degree line.

And that's what we would expect also from the literature, right?

That there is a share of developers that is here, maybe around five or 10% of individuals that are creating a substantial value.

They are generating most of the value here on the supply side of creating the packages.

And the interesting part here is that they are not just active in a few projects, but they are active here in yellow in many, many different projects on average.

Now, we could go to the one seller demand side.

We actually see a very similar picture here.

we see a huge inequality of just a few developers contributing a substantial amount to the value share and we see this again when we look at the firm autarchy case so now to conclude here from the inequality story five percent of open source software developers will liquid 93 of the supply side value

And as a bound, 99% of the firm order key demand side value.

So just the 5% of developers create a huge amount of value on the supply and the demand side.

Now, what about the value that is kind of firm affiliated, that potentially firms are creating?

Well, what we find is that 23% of projects are firm affiliated.

That implies that 77% are not.

Now, firm contributions to the value of open source software look as follows.

We see the share is around 6% of the firm contribution on the supply side.

On the one seller and firm auto key case, it's between

0.7 and 2.8%.

So the firm contributions here are as measured by the thermal affiliation, which may be an underestimate here, right?

But it's actually quite low.

The interesting aspect is that they supply more than they demand based on those usage statistics.

Also very interesting if you think about, you know, individuals here certainly create a lot of value in this space.

But firms are also doing valuable things.

When you just think about correlations of firm-affiliated repositories here in reddish and then in blue color, you see non-firm-affiliated.

the shape of the density distribution for the days from the last commit measure, which implies here that firms are really substantially more active.

The distribution is relatively more close to zero than for individuals.

And that may imply that firms' projects are just more actively maintained.

And that is overall a good thing.

There are a bunch of reasons why we may think that

What we're finding here is the value of open source software that we're actually underestimating the value.

The global data that we have is very particular global data from those software composition analysis firms, which is as good as what we could get as data, but the global data is still incomplete.

We cut off the tail of the distribution, as mentioned.

We also got rid of comments, documentation, empty lines, anything that is not pure code.

We have an additional estimate for that in the paper.

Also, you can think about code being improved over multiple versions, right?

We are not accounting for that, but that is also costly.

And you could also imagine, well, there are a bunch of projects that a company has to work on, and not all of the projects may work out.

So it may be a necessary process to have a lot of projects

failure with one successful project, but that implies that there are also costs that are associated with those kind of failures.

And those costs are not included here.

Now, we also think that even the highest wage scenario, it's kind of a lower bound on wages, because if you think about the individuals that, some of the individuals that are active in this space, they can obtain, especially highly skilled individuals in open source, they can obtain quite high wages from some of the big tech companies.

Now, further,

We just don't have the Linux kernel in here, which is probably a huge value driver when it comes to open source software.

now to conclude the value of open source software on the supply side is around 4 billion dollars with a one seller demand side value of 5 trillion which can go up to 80 trillion dollars when firms are just recreating codes by themselves we find heterogeneity across industries and developers where five percent of developed open source software developers create around at least 93 percent of the value

And firms here make up really a small share, but projects are a bit more actively maintained by, or projects by firms are more actively maintained than by individuals.

So without open source software, there would be really a large loss in value.

Firms would need to spend 3.2 times more on software than they currently do.

Thank you so much.


SPEAKER_01:
Thank you.

awesome lot there.

Big iceberg, only small amount showing.

Perhaps first, Bradley, maybe introduce and coming from the open source sides that you've worked on, like, where does this take you?

What does this reflect on you?


SPEAKER_02:
Yeah, so, you know, I come from a bit of a different perspective, I do.

A lot of open source education and project management and then i've worked in open source, not in in terms of how corporations interface with it so much, but how.

Basically, you can do scientific research with open source and other types of things like you know, creating games with open source.

And I like that you had here, I think that was a very good analysis of looking at like sort of putting a value on.

You know what we have out there and, but I wonder, especially with respect to like the active inference aspect, you know, is it that people are motivated by money, or is it that they're in some cases.

they're motivated by sort of a need in the communities they're working in and in the sort of the, you know, because a lot of, like, if we think about Linux and some of the things that have been created there, it was largely because there was some utility of a tool that they needed and there wasn't a tool anywhere else.

So they created the tool and then they made it into this thing that was distributed and then it went from there.

So the original motivation was actually more kind of like,

Almost like maybe reinforcement learning or something like that, and then you know when you get into when once it's distributed, then you have this financial imperative that might take over or this sort of.

cost imperative like because I know you showed that figure of the maintainers and how they play this critical role in open source projects, and you know that a lot of the problem there stems from people not have it, you know kind of doing it on the side.

And then not having enough time to devote to actually maintaining these large packages.

So you have these vulnerabilities because people just don't have, you know, it may start that they love the project and they're motivated by self-interest.

But then over time you get, you know, a project that's so big that maintainers just simply can't afford to do that, you know, to spend like 70 hours a week maintaining this project.

So, I mean, you know, I wonder about that.

Like, what are your thoughts about different types of motivations for open source production?


SPEAKER_00:
Yeah, no, I think you're absolutely right.

Like the motivations, especially at, you know, like the origin of open source.

And I think even what is created right now as open source software tools is very often, yes, we need some kind of tool.

We don't have it.

and so let's create it and um i guess that's the origin of a lot of innovations just generally speaking um like or that's one of the idea of innovations right like um i i don't have this particular thing i have a need and now well if nobody else is doing this i'm gonna do it but they are willing to also share this you know like the open source community um to share uh things openly that's the whole spirit of it so yeah i think um

non-pecuniary motives are a huge driver of what is going on, how open source software exists in the first place, right?

And this idea of sharing and supporting a community, potential even like reputation building.

And there are some aspects, of course, where this then, like, it's also kind of like a skill building exercise, but maybe people don't do that necessarily just

for that purpose, but it comes with it.

Once you create those kind of projects and are really successful in it, as you point out, then maybe you don't have the time anymore to even be able to maintain those projects just for free.

But then you have learned a substantial amount on the way, which is valued quite highly in the marketplace.

So companies, I think, do value that.

And we have seen papers around that where people even try to signal, hey, I'm contributing to open source by engaging in a couple of commits before I'm getting hired.

And then after that, you can see kind of like a drop off in the engagement.

I think, yeah, there are many different motives, but certainly the non-pecuniary motives is quite a critical one in this environment.

I completely agree.


SPEAKER_02:
Yeah, so I mean the other, oh, go ahead.

Go ahead.

Oh yeah, so the other thing I wanted to mention is that like, the way kind of we do open source is kind of dependent on certain tools that we have.

So we have forks of repositories,

And that makes it easy for people to say, copy a repository and modify it and distribute it.

And it's really interesting.

I wonder if people have thought about the economic benefits of a lot of the innovations of version control, where you have forking and you have being able to control different versions and how they're distributed.

Because that plays a key in how

people get value out of it.

If I see a project, I wanna fork it, I wanna create, I wanna basically add value to it, change it so that it's useful to my field or my group.

And then if a thousand people do that, that's a lot of value out there.

And if you can't do that easily, then the value is limited, because it makes it harder to sort of keep all the distributions maintained and keep them all consistent.

So you know, there are all these tools that kind of showed, you know, we're kind of before we had the kind of version control we have now, it's probably much harder to get

value out of the open source software.

It was just kind of like people kind of distributing it maybe on disks or, you know, there were earlier versions of version control.

And it would be very interesting to see where that sort of started up if that there were like the set of innovations that we have, say, with GitHub played a huge role in kind of like kickstarting a lot of the value of open source.


SPEAKER_00:
Yeah, that's a great point.

And we are in constant communication with the guys at GitHub and have some other work with the people at GitHub.

And generally, yeah, I agree with that also.

The benefits of version control, I would think, are enormous.

I mean, they just contribute to this.

to crowdsourcing in general, right?

But I haven't seen a paper on that because I guess it's difficult.

Yes, we can look into the past and there will be... We're getting value out of it.

Okay, sorry.

I think you're really frozen.

Okay, now you're back?


SPEAKER_02:
Yeah, yeah.


SPEAKER_00:
Okay.

Um, yeah, so just right.

So you mentioned this point of this, um, you know, like copying distributed on a disc versus now with the later version control, it's the ones where everybody can access it.

And I think this would be, uh, it would be very useful to understand the world where we just have this versus the world where we just have.

where we have the version controller that we have now, but have those two worlds right next to each other.

And it's as difficult as our exercise that we did in this paper, because we have to imagine different kind of counterfactual worlds, and then try to impose some assumptions.

I'm sure this can be done, or maybe there's a clever way of getting an understanding of what the benefit of version control is.

But I'm sure that just

the pure number of people that are getting pulled in right you can you're just building on on you know pulling in the crowd substantially more and making it more convenient for everybody to contribute in a very easy way and that's why open source software is i think also successful because um of yeah crowdsourcing and um yeah you're just very easily there's a no there's zero cost basically from you replicating a package


SPEAKER_01:
Yeah, just to this last point, we're still very generationally early in the global internet facilitated exchange of open source software.

So it's kind of like looking at the early developmental phases and there's a lot of core technologies like Git and services like GitHub.

And there may be other facilitating technologies to open source overall.

Some that people are probably working on like ways for payment channels or credit assignment to propagate back upstream, different ways to think about the value and security of it.

part about the paper and the presentation that that was most interesting to me was these different economically grounded estimates which differed by orders of magnitude ultimately so it was a very restricted and humble analysis because and then at least it didn't include linux it included some packages on some services from some companies

And so it's kind of like turning on the flashlight to use economically normal normative estimation methods, different ways of triangulating what just the economic narrow value like software with a price tag would be, let alone this training

improvement of infrastructural type software so just just that even when so restricted still there was a wide range of estimation so i guess how how does estimation move forward and then what do those estimates who do you tell about those estimates


SPEAKER_00:
um who do you who do you want to see do what if they were to know that a given method of value assessment were this or that no this is a great point i think part of um i think there are some efforts in um yeah in government and um when it comes you know to estimating gdp in general and we would love to see um and

a version brought into the GDP, where you can estimate where the value actually impacts GDP measures, that would be fantastic.

Of course, this doesn't mean that what we have used here needs to be incorporated.

One has to really think about what's an optimal version for that.

But also, just generally speaking, I think providing those different estimates

is helpful for first providing one estimate.

I think it's helpful when you talk to anybody that has not even an idea, has not even heard about open source software.

Some people may just go on the internet, they use some code and they're happy that they found it and they are very new to the space.

And you can pull people in with, hey, this is a giant space and it's an extremely valuable space.

So that's one.

Even when you look at the lower bound estimate, I like to think about that as I had some work on vaccination prior to the pandemic and I had to explain to people the importance of that.

And I feel this is kind of very similar for open source software.

When you talk to people that are not in the space, they are not going to appreciate it as much.

and even some of the people that are they just um you know like you said there's a lot of free writing going on which is okay but there's also some aspect of you know like there's a lot of value created and how can this be sustained and yeah so i think informing everybody first about the value is important it's also important um not just for society as a whole but also when you think about companies in particular managers um there are some organizations that have actual like

open source software unit, maybe, and developers are using open source software tools, but then when they're engaging in their work, they have to also justify to their managers, why are they doing what they're doing, right?

And what kind of values they are creating.

And if they can't do that, it's kind of challenging to talk to their manager.

The manager will be like, I don't know what you did, but I know exactly when we buy a product from Microsoft that cost me X dollars and

Yeah, so...

And I don't know that, you know, like, what's the cost when we do this here with an open source software tool, right?

And finding the right comparison.

And I think that's where we should be going.

So that, yeah, open source, so that people can justify the usage of it within companies even more.

I think that would be great if this paper can just make a little bit of a dent here in the general perception and perceptions at the workplace around open source software as well.


SPEAKER_01:
Yeah, I think that quote that you had there, the price is what you pay, value is what you get, and it's the value of open source software.

And then there's like this deeper psychology to paying or valuing what has been provided and the different sensitivity to losing what already is there.

as opposed to gaining what could be.

And all these different types of costs, like time cost, tech burden, those things come up in the industry setting and in the research setting.

So again, it's just sort of like opening up some paths to explore.

Well, if every firm had to redevelop just some JavaScript packages, we'd be talking about like the economic activity of the whole world.

So we know we can't do that.

So, okay, so we're gonna talk, then we're gonna have some sharing of code.

So then what does that look like in some sort of extreme world where every firm develops every package and every operating system and like even the largest corporations can't develop a secure Linux kernel to there's one version of everything.

Somehow everyone knows how to find it.

There's one package for every single thing.

um where are we where do we want to be where is the redundancy contributing to resiliency and to maintaining portfolios of different approaches even if there's like multiple visualization packages for a given language it's sort of like it's not necessarily wasteful but just to be able to assess that and then to say well here's here's if we were to move this way this is

These are the kinds of costs that would and wouldn't show up on the accounting sheet of a firm.

These are the costs that society would or wouldn't incur over these different timescales.

Like here's how much this software would cost to buy today.

But then over the longer timescale, maybe there's less opportunities for participation in skill development or research.

And that has a vast cost as well.

So how does that get addressed in that sort of techno tragedy of the commons?


SPEAKER_00:
Yeah, I mean, also, I mean, obviously, we're not addressing this in the paper.

Those are very deep questions.

And I think it's, yeah, it's very challenging to think about, like,

Let's say you have a bunch of packages that are all doing something that is very similar.

As you point out, is this necessarily wasteful?

Maybe not because we can think about this just as an evolutionary process.

We need a couple of projects or ideas out there and then some of them over time will survive and they will be selected by

whatever you want to call the best, in this case, maybe the one that just is in highest demand.

But they're more like there's some kind of lock-in effect because people have used it for some things initially.

And then that's why this particular package will be used all the time.

So I think there's an evolutionary aspect to that question.

i also agree on like sustainability of the environment that we need to find a way of especially once you know their packages have risen to prominence substantially whatever that means right there may be some kind of threshold of uh demand then we have to think about um can

Can the community support this?

Are there or can there be company efforts?

Can there be new models on supporting the open source software environment?

Because those packages that are used substantially, they are contributing substantially to the value of open source software, not just on the individual side, but also from a company perspective, even though they are maybe not as engaged.

And so that's one of the really

The bigger picture question that I see is also like how to pull in companies that are currently benefiting so much.

And yeah, like so that they are paying

of the cost but also getting something in return even maybe even more than what they're getting right now by um contributing to this ecosystem in a in a way in a way where it stimulates simulation innovation that is potentially beneficial for for them right and you can't ask a firm to maximize profits and you know do engage in things for free but um they're

can be a profit motive in the long term in engagement and innovation.

And I think that's generally true for innovation.

So figuring out those models, I think, is hugely important.

And you mentioned, yeah, I think initially you mentioned services that are in the initial phases or early phases still.

of open source software development, right?

We are in like, I don't know by which measure, if it's like 30 years or 50 years or whatever a good measure is for that.

That's hard to say.

But yeah, so there are services like Git and GitHub and the version control kind of ideas.

out there but yeah and there may be new services like for example CodeQL where AI is substantially used to then provide you with ideas of well here is maybe a security problem right and you can fix that and then you can use AI or you can you don't have to fix it and so those are additional tools that

became available and are becoming available.

And maybe some of them are more difficult for beginners than others.

But I could also see that some of them could rise to prominence similarly.

But they are, of course, we talk about those AI tools.

Again, this can come with pitfalls as well when we have the whole environment flooded potentially by AI generated code.

And we all know that AI has potentially less training data that is not unique anymore.

But yeah, that may be a different story.

But moving into the space of AI, I guess there are more and more tools where a few of them may survive if you think about the evolutionary aspect again.


SPEAKER_02:
There's this concept, and I don't know if you're familiar with it, a lot of tech people like it.

It's called technical debt, where when you adopt something, maybe you're locked into some solution and it costs you as an organization.

So, I mean, you know, I wonder how the value of open source fits into that, where you're losing value because you're locked into a suboptimal platform, but you're also

there's an opportunity to gain value by maybe adopting, working around it through open source or being able to modify your software.


SPEAKER_00:
Yeah.

Yeah, I think that's right.

Right.

So this technical debt issue with a lock-in problem that probably exists is higher, this kind of technical debt, when you think about closed form, like closed software, proprietary software that you're locked in, and you maybe even have a harder time because you need

maintainers that are, you know, you have only a limited set of individuals that are familiar with this particular software, while in for open source software, you potentially have always new people that could come in and look at the software.

And yeah, you can adopt it more easily.

So you can switch more easily.

Fixes can be generated more quickly.

Just the whole idea of crowdsourcing.

So I think that, yeah, generally technical debt, as you are saying, is going to be lower.

with open source software.

You need to have the right services around open source software for developers to then actually engage in all of that type of work.

And I think there are companies out there, there are people out there that are doing exactly that.

You just have to work with the right people.

But I guess in terms of how that impacts the value of open source software,

It's a good question.

I would think it leads to a potential underestimate here again, right?

Because it's just so much more like you just have less of a burden here.

And so the value is automatically higher because you can switch more quickly from one innovation to another.

But what exactly that value is that is

It's hard for me to say how to measure that, but intuitively that would be again contributing to the idea of underestimation.

It's a great point.


SPEAKER_01:
Yeah, it reminds me of the economic estimates, like every window could be broken and then we would be adding value by just rebuilding.

So that's the kind of rebuild approach, which, and then that risk or like strategic value of like using an open schema or off-sourcing or having the opportunity for people to off-source and then how to quantify like,

the value of optionality or of resilience to certain kinds of technical changes.

Or like if you're relying on a proprietary software, even for like a microscope in a lab or a simulation toolkit, and then the company slows down or it goes out of business or any number of other things.

Whereas like, if you have the source code

It'll never get worse than it is.

Maybe one of its dependencies could have like a future security issue, but you'll always have that local function.

And that's sort of what we need for the scientific reproducibility either way, or like in the neuroimaging,

there's a well-developed stack to talk about which versions of which software are used that Bradley and colleagues have shared previously.

And also Pedro writes in the live chat, there's implicit trust given to companies that build in the open.

So that's value for the companies or for the labs who are able to put out this useful thing

uh bradley if you have any other comments otherwise manuel i will look forward to hearing like yeah okay yeah what are your what are your next moves what are exciting directions and and how you're continuing this research or other projects um yeah sure oh yes thank you um yeah this is great um i really like this discussion um


SPEAKER_00:
In terms of the value of open source software, what I would like to see, which is very difficult, I would love to just see a map or have a map of usage and maybe not just usage, but really then the value created.

across the world.

I think that would be an ambitious endeavor that's very tough, especially because some of this information is proprietary and exactly in this instance here, we were not able to get such granular information where we could

where we were able to map everything to every region in the world.

But I think that would be a great descriptive starting point or an addition for this value of open source software project.

And just generally figuring out more information on usage across the world within companies, what are they, which kind of packages are used, when and where, I think it's extremely valuable and important.

And

Yeah, so I think that's on the value of open source side.

Now, I started a little bit talking about AI, get around that.

But so now, the value of open source software, one thing that we are pondering about it, what about the value of open source, or open source AI, if you like, and we can, you know, think about what that concept actually is.

But there's, of course, a similar discussion that was

that is around software generally, right, open versus proprietary, which I think has been basically, or is basically concluded almost, where open source software won, and now a similar discussion exists in the space of AI, right?

Should it be open versus closed?

And so we would like to understand, like, what's the value of open source AI relative to closed form alternatives?

that would be, you know, in the spirit of this project, we would love to better understand that as well.

But I think there's also a lot of work even before thinking about AI, you know, on how to

better understand the value, maybe across industries even more.

We did this just for the externally facing data set.

If we can really dig into an internally facing data set and are able to show some of the estimates across industry, I think that would be fantastic.

But again, also that hinges on finding the right organizations, companies that are willing to share some of that information that we need to then engage in our value estimation.

And another one is, um, you know, sharing just the methodology broadly speaking, and hopefully the methodology being adopted more widely, even, um, you know, let's say on GitHub or any kind of open source, uh, platform where people could get a rough sense of like value estimate.

Right.

And this won't be perfect by any means, but, uh, it's, it's something that, uh, at least it's a little bit more tangible.

Uh, so that would be great.

Uh, great too.

Yeah, so I think that's what we're doing in terms of better understanding the value of open source software.

We have also other projects in the space of open source software.

In particular, we have a project that is more on generative AI and better understanding GitHub Copilot and how it affects the nature of work of individuals.

That's, I think, an exciting project, which is not as closely tied to this project here.

where we just try to see how work patterns are changing when you have access to this generative AI coding tool and we see that people seem to engage in more coding that's kind of project management activity and we see a lot of like kind of experimentation out there a little bit less of exploration and can put at the end of the day yeah we see that people are engaging more autonomous and less collaborative work because they

They can use the AI tool instead of engaging with the community, which we like to call project management.

It's really engaging with other developers on the issues board and then assigning other individuals.

At the end of the day, in terms of experimentation, we find that people are engaging more and exposing themselves more to new languages that are worth more in the marketplace.

And we were able to use that to put a dollar value in kind of also very much like a back of the envelope calculation to GitHub co-pilot coding AI, which is also a couple of billion dollars just for exposing yourself to new languages.

So yeah, we always try to think about the value that is generated for the community or when the community interacts.

with tools with open source or with tools that are intersecting with the open source software space.

So yeah, I think that's super exciting and happy to chat with anybody or also emails are more than welcome and any questions.


SPEAKER_01:
Thank you.

Thank you.

I think maybe in the future we will hear more from your research and a scientific open source meta analysis, Bradley and or other in the audience.

That could be very interesting to trace back some of those and just talk about it from a scientific computing value chain rather than the industrial.

Yeah.

Sounds good.


SPEAKER_00:
That's great to hear.

Cool.

Thank you.

Appreciate it.

See you next time.

You too.

Thank you so much.

Thank you.