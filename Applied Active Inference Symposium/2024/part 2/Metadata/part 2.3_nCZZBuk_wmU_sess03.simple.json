[
  {
    "start": 37.207,
    "end": 50.706,
    "text": " Hello, we're back with Samuel Nehrer, Jonathan Larsen, and Peter Wade discussing ActiveInference.jl, staying with the ActiveInference plus Julia theme.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 51.667,
    "end": 54.531,
    "text": "Thank you all for coming on and sharing this work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 54.652,
    "end": 55.833,
    "text": "So looking forward to it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 59.378,
    "end": 60.099,
    "text": "Hi, everyone.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 60.66,
    "end": 62.242,
    "text": "It is a pleasure to be here.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 62.923,
    "end": 66.268,
    "text": "So like Daniel said, we'll present on",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 67.126,
    "end": 74.415,
    "text": " a new package for doing active inference simulations, but also for applying it to data in Julia.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 75.536,
    "end": 82.425,
    "text": "And we will leave time for questions at some moments during the presentation, and then some time in the end.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 83.686,
    "end": 90.755,
    "text": "Additionally, we're three people, because we've been working on this together, so we'll alternate a little bit with the setting.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 92.477,
    "end": 93.218,
    "text": "All right, let's record.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 94.177,
    "end": 97.021,
    "text": " So first, it's nice just to mention who we are.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 97.322,
    "end": 98.744,
    "text": "So we're all at Aarhus University.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 99.585,
    "end": 105.514,
    "text": "I'm a PhD candidate and Sami and Jonathan are students who have been working on developing this package with me.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 106.776,
    "end": 117.351,
    "text": "And we all come from computational cognitive science, specifically called cognitive modeling, where you model behavior in computational models.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 117.371,
    "end": 122.659,
    "text": "And of course, within that specifically, predictive processing models, including active inference models.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 122.679,
    "end": 123.981,
    "text": "And that's why we made this package.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 126.391,
    "end": 135.242,
    "text": " And we use this in the context of computational psychiatry for clinical questions and also more broadly for just modeling behavior.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 136.244,
    "end": 148.079,
    "text": "And this package is part of a somewhat larger project of developing software for these kinds of research questions in Julia.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 150.302,
    "end": 153.546,
    "text": "And I'll start with just giving a brush up on what cognitive",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 154.083,
    "end": 160.493,
    "text": " modeling is in general, so some members of the audience might be familiar with this, but others might not.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 160.593,
    "end": 168.847,
    "text": "Just to set the stage for an introduction to ActiveInference, you all have seen this before, so we'll go through it briefly, but it's nice to have this on our fingertips.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 170.109,
    "end": 181.407,
    "text": "Then we get to the meat of the matter, which is, of course, how to do this specifically in code with ActiveInference.jl, both simulating behavior and also fitting it to data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 181.91,
    "end": 190.641,
    "text": " And finally, if there's time, we have some applications and some future work that we'll be happy to spend some time.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 190.661,
    "end": 191.842,
    "text": "We might skip that as well.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 194.345,
    "end": 194.625,
    "text": "All right.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 195.046,
    "end": 209.824,
    "text": "Cognitive modeling or computational cognitive modeling comes out of psychology, comes to science where the main question in those fields is to find out what are the mental mechanisms that",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 210.142,
    "end": 211.865,
    "text": " makes us do the things we do.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 213.126,
    "end": 215.89,
    "text": "And so the classic perception-action loop, we have to pick it here.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 216.131,
    "end": 218.634,
    "text": "People who maybe do that too.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 218.654,
    "end": 237.482,
    "text": "It's going to be our active instance book, where you have some agent, which could be a person, but it could actually also be an animal or even an organoid or even a simulated thing, system that receives inputs from its environment and takes actions that changes its environment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 238.12,
    "end": 251.271,
    "text": " And we are here interested in essentially, and I don't know if you can see my cursor, but essentially the relation between those observations and the actions that are created.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 251.612,
    "end": 261.22,
    "text": "So basically the path after the observation error ends and before the action error starts.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 261.24,
    "end": 267.165,
    "text": "And traditionally in psychology and cognitive science, this has been done experimentally.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 267.837,
    "end": 275.608,
    "text": " You take people out of natural situations and control laboratory situations where you measure, well, you control both of these.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 275.648,
    "end": 279.114,
    "text": "So you decide what they observe and you measure what they do.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 279.674,
    "end": 283.6,
    "text": "And so the kind of classical example of this is a computer screen.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 283.62,
    "end": 290.61,
    "text": "You show people some images, something, maybe you ask them to classify them or predict what's going to happen and you measure what they do.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 290.63,
    "end": 293.915,
    "text": "And then you have a measurement of inputs and measurements of outputs.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 295.498,
    "end": 297.22,
    "text": "And you then create some theory.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 297.588,
    "end": 299.811,
    "text": " that will make some prediction as to how they relate.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 301.212,
    "end": 302.454,
    "text": "And of course, there's a big field.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 302.474,
    "end": 308.421,
    "text": "You might have theories of personality types where you predict that actions will change faster depending on inputs.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 308.501,
    "end": 310.844,
    "text": "There's theories of reinforcement learning, et cetera.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 312.626,
    "end": 323.839,
    "text": "And so importantly here, we're using already natural science approaches, experimental approaches with quantitative analyses, but still with purely conceptual theories.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 324.28,
    "end": 326.903,
    "text": "So theories are not formal as they often are in, let's say,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 327.625,
    "end": 353.565,
    "text": " have mathematical theory and the trick is often to go from some conceptual theory to a quantitative prediction that you can then test and specifically give me a moment here sorry about that and specifically",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 355.047,
    "end": 363.498,
    "text": " As many people know, there's been what's called a replication crisis in psychology and cognitive science, where the whole issue is that the experiments don't replicate.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 363.619,
    "end": 374.233,
    "text": "And that's partly due to statistical methods issues, but also partly due to problems stemming from the fact that our theories are not clearly formulated.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 375.134,
    "end": 379.48,
    "text": "So one sentence that's saying that there is social learning might mean many different things.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 379.6,
    "end": 383.265,
    "text": "And so in a recent attempt to address this,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 384.427,
    "end": 387.891,
    "text": " is to move into the formal field, just like in physics.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 388.011,
    "end": 391.875,
    "text": "So computational models of this relation between oscillations and action.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 395.259,
    "end": 396.3,
    "text": "And this is inspired by physics.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 396.34,
    "end": 399.784,
    "text": "So in physics, people are no strangers to having things they can observe.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 401.606,
    "end": 409.335,
    "text": "In our case, it's the behavior, but in physics, it can be, let's say, radiation from the sun and then trying to make inference about something you can't observe.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 409.916,
    "end": 411.818,
    "text": "In our case, the mind.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 412.321,
    "end": 418.771,
    "text": " In this case, it's perhaps the molecules of the sun.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 418.791,
    "end": 420.654,
    "text": "And so the methodology is exactly the same.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 420.854,
    "end": 438.582,
    "text": "Create mathematical equations that will describe how actions evolve over time given observations in the environment and test them on how well they describe empirically collected actions in observations.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 439.523,
    "end": 452.941,
    "text": " And here I just put on one of the very classic cognitive models, which is the Scholar-Warner, where you have some very, very simple equations that describe how actions depend on the observations in the previous time step with some classic learning data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 453.642,
    "end": 458.088,
    "text": "And that's just to say that many of the first cognitive models were very simple.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 458.308,
    "end": 460.471,
    "text": "In a few equations, you would kind of describe these.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 463.515,
    "end": 467.1,
    "text": "I think primarily in three fields is this approach used where you have some",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 467.722,
    "end": 471.446,
    "text": " person or some system, and you want to find formal models of its behavior.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 472.807,
    "end": 476.631,
    "text": "That's in computational psychiatry, where you want to use it to understand psychiatric conditions.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 477.411,
    "end": 480.014,
    "text": "Mathematical psychology, which traditionally has been broader.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 480.374,
    "end": 484.118,
    "text": "It's essentially the same questions, but a different community and different types of models used.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 485.019,
    "end": 487.841,
    "text": "But also broader, just behavior in general, not specifically psychiatry.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 488.602,
    "end": 494.708,
    "text": "And computational neuroscience, where you want to relate these models to",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 495.211,
    "end": 524.357,
    "text": " example neurobiological processes that could implement and they also overly like overlap with artificial intelligence and engineering and so on all right so i think a primary use case especially in our field of active influence is theoretical simulations where you just take something on let's say learning or let's say learned helplessness you create a simulation that can do that",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 524.506,
    "end": 529.253,
    "text": " create that kind of behavior, and you suggest this as a proposed mechanism of how that behavior comes about.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 530.075,
    "end": 542.815,
    "text": "You can use this for one agent, doing one type of behavior, or you can use it for many, and then you're doing agent-based models, specifically cognitive agent-based models, where you rely on actual cognitive theories to make them.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 542.835,
    "end": 544.357,
    "text": "But you can also apply it to behavioral data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 545.539,
    "end": 552.69,
    "text": "And here you're often trying to either find out what mechanisms provide actually empirically observed data,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 553.582,
    "end": 560.308,
    "text": " You might want to distinguish, let's say, clinical populations from each other and what's called computational fingerprinting.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 560.328,
    "end": 564.212,
    "text": "You might also use results here to inform future theoretical simulations.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 564.252,
    "end": 569.157,
    "text": "You can have ABMs where every agent has parameter values that you found in an experiment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 570.278,
    "end": 572.86,
    "text": "And you can also use this to design future experiments.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 572.88,
    "end": 579.686,
    "text": "We use simulation to make sure that your experimental design will give you as good results as possible.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 579.706,
    "end": 581.428,
    "text": "And finally, you can also apply",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 581.678,
    "end": 583.541,
    "text": " these approaches in machine learning and engineering.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 583.561,
    "end": 595.577,
    "text": "And here, of course, you can make robots that use current models that people might also use in a way that in general technology and knowledge of biological systems have always worked with each other.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 596.318,
    "end": 605.671,
    "text": "So in the same way you might be inspired in how to build a plane by looking at a bird, you might also be inspired in how to build an image recognizer by looking at a human being.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 607.894,
    "end": 609.897,
    "text": "Our packages specifically target",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 610.248,
    "end": 612.991,
    "text": " the application to behavioral data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 613.011,
    "end": 617.837,
    "text": "And so they can do their simulations and also in principle be used for engineering purposes.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 617.857,
    "end": 627.067,
    "text": "But if we optimize them for this situation where you have participants, you put them in an experiment, you get behavioral data and you use those models to understand the data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 628.108,
    "end": 634.896,
    "text": "And that's what distinguishes it from some of the other software tools that are present.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 635.376,
    "end": 639.681,
    "text": "And PIME-DP now has this capability also.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 640.403,
    "end": 648.55,
    "text": " But otherwise, many of the, and there is in the MATLAB SPM software, also some ways to apply it to data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 649.111,
    "end": 653.595,
    "text": "But otherwise, the focus has often been on theoretical simulations or on machine learning.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 653.615,
    "end": 668.588,
    "text": "And if you look at packages like RxInfer, which is incredibly powerful and well-made, then also, at least to my understanding, focuses more on the machine learning engineering part, where the ultimate goal is to use these models to build tools that can do things",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 669.648,
    "end": 673.194,
    "text": " or maybe for simulations, but not to specifically apply to behavior.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 675.357,
    "end": 675.598,
    "text": "All right.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 676.319,
    "end": 684.172,
    "text": "And I'll just give a sense of what the workflow here looks like, because if you come from theoretical simulations or engineering, this might seem really weird.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 684.953,
    "end": 688.339,
    "text": "You start off designing hypothesized models for how people work.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 689.801,
    "end": 694.609,
    "text": "You then check these models before applying them to anything to whether they are worth applying.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 698.099,
    "end": 699.961,
    "text": " simulate behavior with some parameters.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 700.742,
    "end": 704.806,
    "text": "You then estimate those parameters and you see if you can actually estimate the real parameters.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 704.846,
    "end": 713.976,
    "text": "If you can't recover parameters that you know are true, you can't trust this when applied to real data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 714.076,
    "end": 721.965,
    "text": "And also prior and posterior predictive checks, where you just check that your model can actually generate the kind of data that you might see in an experiment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 722.145,
    "end": 725.068,
    "text": "And if it can't, it's also not worth applying to real data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 726.989,
    "end": 734.156,
    "text": " Then you fit it to data, which means finding out what parameters of my model, what they must have been to generate the data that I did observe.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 734.176,
    "end": 736.638,
    "text": "So in classical models, there will be learning rates.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 736.718,
    "end": 740.601,
    "text": "You ask, oh, this person adapted this fast, so his learning rate must be this and this.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 741.782,
    "end": 750.931,
    "text": "In the context of active inference, it's usually parameters of the generative model, the A matrices and B matrices, for example, that we want to estimate.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 750.951,
    "end": 755.595,
    "text": "And finally, we can also estimate how well the model fits our given data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 756.352,
    "end": 761.498,
    "text": " Because some models might describe some data better than others, we might want to use this to select them.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 763.4,
    "end": 770.287,
    "text": "We use this to relate parameter estimates to some measure that's across participants.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 770.307,
    "end": 771.588,
    "text": "Often this is clinical populations.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 771.628,
    "end": 778.916,
    "text": "We might say, are learning rates or are AMA trees parameters different between clinical populations?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 778.936,
    "end": 785.143,
    "text": "But it might also be in relation to, let's say, age or psychopharmacological interventions, etc.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 786.71,
    "end": 793.299,
    "text": " We're not related to within participant things, let's say physiological correlates and the QBI, pupil dilation, etc.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 793.319,
    "end": 801.15,
    "text": "But the primary use case, of course, is neuroimaging, where you say, according to my model, this participant now has a high prediction error.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 801.671,
    "end": 808.42,
    "text": "Do I see a difference in brain activity at this moment compared to when he has low prediction error?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 808.44,
    "end": 815.67,
    "text": "It's often to find out what the neurobiological implementation of the computation that we think people do",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 817.945,
    "end": 830.62,
    "text": " And finally, you might compare models and ask questions like which of these hypothesized models are the ones that best describe the data and therefore perhaps the actual mechanism within people.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 831.3,
    "end": 840.711,
    "text": "So you could compare an active inference and reinforcement learning model, or let's say two active inference models with different generative models inside.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 840.731,
    "end": 845.657,
    "text": "Finally, it's worth mentioning that fitting this to data, there are many different approaches.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 846.194,
    "end": 848.357,
    "text": " Broadly speaking, there are Bayesian and frequent system methods.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 848.637,
    "end": 851.06,
    "text": "They have different advantages and disadvantages.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 851.08,
    "end": 856.587,
    "text": "We usually use Bayesian approaches, and that's a long discussion of why that's nice.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 856.927,
    "end": 858.289,
    "text": "They propagate uncertainty.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 858.329,
    "end": 859.871,
    "text": "They don't have so much data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 860.752,
    "end": 864.397,
    "text": "But let me go to that just to say that there are also other ways to fit models to data.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 865.978,
    "end": 872.987,
    "text": "And within Bayesian methods, because you can't do exact Bayes to fit them, there are also approximations.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 873.568,
    "end": 875.29,
    "text": "One classical approximation is variational methods.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 876.198,
    "end": 889.15,
    "text": " where you choose some arbitrary distribution, we call it Q, and you make it be as similar as possible to the true posterior belief about the optimal parameters.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 889.65,
    "end": 892.353,
    "text": "You do this by minimizing the variation of the energy.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 892.513,
    "end": 896.096,
    "text": "And as it happens, that's also what active inference agents use.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 898.658,
    "end": 905.084,
    "text": "Another, in cognitive modeling, widely used method is sampling approaches, like Markov chain Monte Carlo.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 905.304,
    "end": 905.985,
    "text": "There are also others.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 906.573,
    "end": 911.658,
    "text": " where essentially you try out many different parameter values, and for each of them you calculate the likelihood of that value.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 912.699,
    "end": 920.086,
    "text": "You do this in a smart way, but it still takes a long time, and you get a full estimate of the probabilities of different parameters.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 922.108,
    "end": 932.418,
    "text": "They have different claims to being useful for different use cases, so sampling is good for parameter estimates, but they take a long time, and they might not probably work.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 933.099,
    "end": 936.242,
    "text": "Variation-based has some claims to being a better estimate of",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 936.914,
    "end": 942.3,
    "text": " quality fit or model evidence, there's a whole few where people are still writing.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 944.863,
    "end": 947.807,
    "text": "If anyone's interested, we can take questions on that.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 947.827,
    "end": 952.472,
    "text": "But importantly, the tools we make here can do either of these two things.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 952.492,
    "end": 964.586,
    "text": "Finally, it's just worth mentioning that we as researchers use Bayesian methods to understand people's behavior, but within active inference, we also theorize that people use Bayesian methods to understand the world.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 965.327,
    "end": 966.769,
    "text": "It's nice to keep those separate.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 967.002,
    "end": 977.298,
    "text": " We might use a sampling approximation to patient influence to fit our models to data, but still believe that people use a variational base to understand their environment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 977.318,
    "end": 982.366,
    "text": "And so in the following, when we talk about generative models, we're not talking about our model of people.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 982.586,
    "end": 984.83,
    "text": "We're talking about people's models of the world.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 986.532,
    "end": 988.475,
    "text": "And again, do ask questions in that.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 988.615,
    "end": 993.583,
    "text": "That's one of the tricky points sometimes when we're doing this, what's called metabation modeling.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 995.588,
    "end": 997.771,
    "text": " There are many paradigms within cognitive modeling.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 998.812,
    "end": 1005.159,
    "text": "Mathematical psychology have many, many ways of modeling, often specific behavioral tasks.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1005.179,
    "end": 1020.196,
    "text": "There are these old cognitive architecture models, ACT-R and SOAR are the biggest ones where people are also trying to do unified models of behavior in general, which rely on very different assumptions than active inference.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1021.097,
    "end": 1022.139,
    "text": "And often we're not aware of them.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1022.96,
    "end": 1025.022,
    "text": "Perhaps we should be, so I'll just bring them up here.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1025.66,
    "end": 1030.907,
    "text": " And they're kind of raw, old school computationalist models, different modules interacting.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1031.708,
    "end": 1042.323,
    "text": "There's of course reinforcement learning models where you assume that people do actions, get rewards from the environment, and then try to find actions that maximize those rewards.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1043.024,
    "end": 1045.047,
    "text": "There are many others like deep learning models, et cetera.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1046.408,
    "end": 1054.84,
    "text": "But of course, today most evidently there are Bayesian mind models, where you think that people's minds use Bayesian inference of some sort to understand the environment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1056.085,
    "end": 1057.727,
    "text": " There are many schools of Bayesian mind models.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1058.307,
    "end": 1065.054,
    "text": "You might look at Josh Tenenbaum for a different school than ours, but active inference specifically belongs to a variational Bayesian mind model.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1065.815,
    "end": 1070.239,
    "text": "We use variational approximate Bayesian inference as a model of how people work.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1071.861,
    "end": 1075.705,
    "text": "And this has close ties to predictive coding and predictive processing.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1075.725,
    "end": 1079.448,
    "text": "So broadly speaking, we might call this variational Bayesian predictive processing models.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1080.049,
    "end": 1084.253,
    "text": "They can be just a perception, like hierarchical regression filters or",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1085.212,
    "end": 1089.738,
    "text": " plenty of models out there, or they can include action as well.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1089.758,
    "end": 1093.564,
    "text": "And when they include action, it's called active inference.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1093.584,
    "end": 1101.014,
    "text": "So variation of Bayesian predictive processing models of perception and action is active inference.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1101.034,
    "end": 1106.362,
    "text": "And now we'll give an introduction to that, but we'll give time for one question before we move on.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1106.542,
    "end": 1107.203,
    "text": "Are there any questions?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1109.726,
    "end": 1109.907,
    "text": "Sure.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1110.648,
    "end": 1113.432,
    "text": "I'll ask one, maybe you'll revisit it later too.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1114.133,
    "end": 1115.134,
    "text": "Arun asked,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1116.295,
    "end": 1119.318,
    "text": " What's the biggest challenge you faced building this package?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1123.462,
    "end": 1125.284,
    "text": "That's a long and technical discussion.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1125.304,
    "end": 1137.437,
    "text": "I think the main thing is that in Julia, there are many ways of doing what's called the auto differentiation, which is a technical thing that you need to do the parameter estimation.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1138.438,
    "end": 1142.202,
    "text": "And there's just a whole ecosystem of packages doing that, and we've had to",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1142.823,
    "end": 1145.813,
    "text": " become very familiar with those to find the ones that work the best.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1146.033,
    "end": 1147.679,
    "text": "And that's not an easy task.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1147.719,
    "end": 1151.311,
    "text": "Part of the package is to hide that from the user so they don't have to engage with it.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1151.933,
    "end": 1154.2,
    "text": "I don't know if you agree with that.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1158.854,
    "end": 1159.154,
    "text": " Okay."
  },
  {
    "start": 1160.756,
    "end": 1163.019,
    "text": "One more question just while we're paused.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1163.64,
    "end": 1173.051,
    "text": "Fraser asked, is there anything in ActiveInference.jl that is particularly suited to compositional agents or collectives?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1173.892,
    "end": 1176.275,
    "text": "Kind of leading you into your paper, I know.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1178.077,
    "end": 1187.528,
    "text": "So I'll return to that in the end if we have time, but basically you can use the same method that we use to make inferences about",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1187.727,
    "end": 1205.092,
    "text": " given a human participant in an experiment, instead of a human participant, you can use it on a simulated collective and treat that collective as if that is also doing some kind of cognition or active inference at least, which is, of course, fundamental to active inference in general.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1205.613,
    "end": 1208.617,
    "text": "We expect a cell to do active inference, but also a person and also a collective.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1210.039,
    "end": 1217.65,
    "text": "And so if we treat a simulated collective as, let's say, a foreign system that's doing something we don't know what is,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1218.203,
    "end": 1231.999,
    "text": " We can fit a model to that in exactly the same way we do to a person and make inferences about, let's say, the parameters of that simulated collective's guaranteed model of the environment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1232.019,
    "end": 1239.808,
    "text": "And in the end, if we have time, I'll just show the results from that paper where we do exactly this, just demonstrating a lot to our example.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1239.828,
    "end": 1241.971,
    "text": "That's an exciting question, obviously.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 1241.991,
    "end": 1242.572,
    "text": "Yes.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1242.592,
    "end": 1242.892,
    "text": "All right.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1243.553,
    "end": 1243.873,
    "text": "All right.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1244.41,
    "end": 1250.201,
    "text": " I will just briefly touch on the software ecosystem that we built the package in.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1250.882,
    "end": 1252.044,
    "text": "So firstly, why Julia?",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1253.126,
    "end": 1261.0,
    "text": "It's fast and it's very intuitive, meaning that if you come from Python or MATLAB, you can carry a lot of the same intuitions over into Julia.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1261.561,
    "end": 1268.494,
    "text": "And then it has a community that is growing quite fast of people doing data science, machine learning, and cognitive modeling.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1269.402,
    "end": 1278.933,
    "text": " Then Julia is natively auto-differentiable, which means that you don't need to have a backend in another language to do auto-differentiation, which makes it very fast in Julia.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1279.674,
    "end": 1287.703,
    "text": "For this, there's a very nice package called Turing.jl, which is just a package for probabilistic programming in general.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1287.803,
    "end": 1296.473,
    "text": "And it can do both sampling methods such as MCMC or no-U-turn sampler and variational inference as well.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1297.415,
    "end": 1309.272,
    "text": " Then in Julia, there's also a sister package to Active Inference, which takes different kinds of cognitive models and make it very easy to fit data into those kinds of models by wrapping Turing.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1310.554,
    "end": 1323.412,
    "text": "And that's where our ActiveInference.jl package comes into play, as this is a cognitive model that through action models can be used to Turing to fit data quite easily.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1323.652,
    "end": 1326.156,
    "text": "And we'll show this later in the presentation as well.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1327.385,
    "end": 1334.798,
    "text": " Then we'll just briefly touch on some of the core elements of active inference with regards to perception, action and learning.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1335.78,
    "end": 1347.52,
    "text": "So for the perception part, this is the minimization of the quantity variational free energy where we through this minimization, we can infer states optimally based on observations.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1348.041,
    "end": 1352.228,
    "text": "And there's different kinds of variational inference, sorry, different kinds of algorithms",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1352.68,
    "end": 1354.142,
    "text": " that we can use to do this.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1354.763,
    "end": 1358.128,
    "text": "I'll later go into the specific algorithm that we're using in this package.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1359.089,
    "end": 1364.497,
    "text": "Then we have action and active inference, which is guided by the minimization of a quantity called expected free energy.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1364.938,
    "end": 1367.442,
    "text": "And this can have a lot of different kind of expressions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1367.642,
    "end": 1378.097,
    "text": "If you look at the ones that we show here in the slide, we have one that's information gain versus pragmatic value, which is basically where you get the explore exploit behavior for free in active inference, which is really nice.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1378.651,
    "end": 1386.102,
    "text": " And then we also use the expected free energy to calculate posterior probability over policies, where policies are actions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1386.302,
    "end": 1390.127,
    "text": "So this is kind of like the points that we use to kind of like guide the action selection.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1390.888,
    "end": 1392.31,
    "text": "We're also going to go into that a bit later.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1393.432,
    "end": 1395.235,
    "text": "Then we have learning inactive inference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1395.255,
    "end": 1398.96,
    "text": "This is specifically for categorical distribution beliefs.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1399.12,
    "end": 1403.226,
    "text": "So there's other ways of learning for continuous cases.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1403.286,
    "end": 1406.11,
    "text": "However, here we take it for categorical distributions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1406.63,
    "end": 1410.615,
    "text": " And for this, we use Dirichlet priors over the generative model parameters.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1411.095,
    "end": 1412.437,
    "text": "This is basically Dirichlet's.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1412.557,
    "end": 1415.861,
    "text": "They have concentration parameters that we can then add counts to.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1415.881,
    "end": 1422.789,
    "text": "And this is the update equation that we show here, where we have an omega, which is the forgetting value times current concentration parameter.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1422.809,
    "end": 1425.312,
    "text": "And then you add the new here is the learning rate.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1425.392,
    "end": 1428.135,
    "text": "And then you then add the chi, which is the data observed.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1428.495,
    "end": 1431.258,
    "text": "And in this sense, you just add counts to the concentration parameters.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1431.278,
    "end": 1436.164,
    "text": "And then through normalizing it, it becomes your new updated generative model parameter.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1436.853,
    "end": 1439.417,
    "text": " And we will come back to how that's implemented in the package as well.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1440.519,
    "end": 1444.545,
    "text": "And then a quick refresher on partially observable market decision processes.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1445.347,
    "end": 1451.857,
    "text": "So we just want to make sure to say that this is one type of generative models in active inference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1451.877,
    "end": 1454.061,
    "text": "There's other types of generative models as well.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1454.802,
    "end": 1462.354,
    "text": "And PMDPs, they're not active inference specific in the sense that you can also use it in other frameworks.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1462.857,
    "end": 1469.043,
    "text": " And then what we have done in this package is a discrete state space implementation of PMDPs.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1469.063,
    "end": 1473.447,
    "text": "You can have continued state space implementation of PMPDs.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1473.507,
    "end": 1479.453,
    "text": "The Markovian element of it, though, is that the time steps, they are discrete and not continuous.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1480.574,
    "end": 1485.359,
    "text": "So we'll just briefly go over conceptually the different parameters in the PMDP.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1485.939,
    "end": 1490.063,
    "text": "And for this, we have created sort of like this little toy environment",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1490.465,
    "end": 1511.089,
    "text": " to explain this and if you can see this thing here where you kind of like if you imagine that it's a dial where we can spin it in different ways and then the goal is to get state three on top in the little rectangle and so then you have three actions you can spin counterclockwise clockwise or you can just make it stay in place which you would do if you have state three on top for example",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1511.879,
    "end": 1515.163,
    "text": " But we'll start with the observation state likelihood model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1515.704,
    "end": 1521.37,
    "text": "Basically what this encodes is the agent's beliefs on how states generate observations.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1522.031,
    "end": 1526.716,
    "text": "So it's a categorical distribution where each column has to sum up to one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1526.817,
    "end": 1537.249,
    "text": "So in this case, as we have a identity matrix, this indicates that the agent can deterministically infer the state based on the observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1537.329,
    "end": 1539.912,
    "text": "So if the agent observes observation one,",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1540.212,
    "end": 1542.495,
    "text": " then it will infer that it is in state one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1542.916,
    "end": 1550.847,
    "text": "And this can be more or less entropic in the sense we could also have a completely uniform column where we just have 0.3, 0.3 for all of these.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1551.207,
    "end": 1555.313,
    "text": "And then the agent wouldn't be able to infer the states based on the observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1556.635,
    "end": 1556.935,
    "text": "All right.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1557.096,
    "end": 1559.239,
    "text": "So this was the observation state likelihood model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1559.339,
    "end": 1562.163,
    "text": "Then we're going to go to the state transition likelihood model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1562.183,
    "end": 1566.068,
    "text": "And this is basically how the agents believes that the states change over time.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1566.588,
    "end": 1574.275,
    "text": " And so in this case, I've taken the example of doing it for the action of going counterclockwise because this is usually dependent on actions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1574.936,
    "end": 1585.486,
    "text": "So here we see that, for example, if the agent is in state one and it does the action spin counterclockwise, then it believes that the next state it's going to be in is going to be state two.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1585.566,
    "end": 1588.569,
    "text": "And the same if it's in state two, then it believes that it's going to be in state three.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1590.391,
    "end": 1593.554,
    "text": "And so that's the state likelihood transition model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1593.914,
    "end": 1596.156,
    "text": "Then we have the prior preference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1596.44,
    "end": 1603.587,
    "text": " And so this is basically where we kind of like get to encode kind of like the preferences or the goals of the agent.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1604.949,
    "end": 1611.175,
    "text": "This can be done both over states and observations, but in our case, we have done it for observations and this is the case in our package as well.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1611.736,
    "end": 1618.242,
    "text": "So here, for example, for observation one, we have encoded a dislike for this observation, which is coupled to the state one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1618.683,
    "end": 1621.966,
    "text": "And then for observation two, we have neither dislike nor preference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1622.507,
    "end": 1625.67,
    "text": "And then for observation three, which is coupled",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1626.258,
    "end": 1630.905,
    "text": " to state three, which is kind of like the goal that we want, we have set a preference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1630.925,
    "end": 1641.52,
    "text": "And this is important as this kind of encodes the pragmatic value, which is then part of the calculation of the expected free energy, as you can see here below.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1644.284,
    "end": 1646.447,
    "text": "Yes, and that's the C parameters.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1646.467,
    "end": 1653.177,
    "text": "Then we'll continue to the D parameters, which are basically just the agent's initial belief at time one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1653.393,
    "end": 1654.915,
    "text": " which state is it going to be in.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1655.215,
    "end": 1658.238,
    "text": "And here we just encode it to be certain that it's going to be in state one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1659.38,
    "end": 1662.243,
    "text": "Then we have the prior over policies.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1662.623,
    "end": 1677.98,
    "text": "It'll just quickly introduce the notion of policies where policies are collections of actions that can have a specific link determined by the policy link, which is basically how long in the future, how many time steps in the future should the agent plan.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1678.04,
    "end": 1680.683,
    "text": "So for this case, we only have one time step in the future.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1681.118,
    "end": 1683.14,
    "text": " which is why we only have the three actions here.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1683.28,
    "end": 1689.545,
    "text": "And this is also sometimes described as the agent's kind of habits, meaning that it has a preference for certain actions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1689.665,
    "end": 1696.951,
    "text": "In this case, we have given it a uniform distribution, meaning that the agent doesn't really have any preference over any policies.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1698.152,
    "end": 1698.352,
    "text": "All right.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1699.173,
    "end": 1705.318,
    "text": "So now that we have the generative model down, I'm going to show you how to implement this in our package.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1706.039,
    "end": 1710.923,
    "text": "And we're going to do this by providing a work example of a teammates environment",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1711.291,
    "end": 1714.936,
    "text": " where the agent is going to learn the reward probabilities in the arms.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1715.597,
    "end": 1720.764,
    "text": "And for this, I'll just quickly have to introduce the notion of factors and modalities.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1721.505,
    "end": 1724.409,
    "text": "So factors are basically different kinds of states.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1724.889,
    "end": 1733.501,
    "text": "So in this case, it would be we have location states and we have reward condition states, where reward condition states are whether the left arm or the right arm is going to provide a reward.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1734.262,
    "end": 1735.203,
    "text": "Then we have modalities.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1735.784,
    "end": 1738.648,
    "text": "Modalities are basically different kinds of observations",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1739.118,
    "end": 1743.624,
    "text": " And so here we have a location observation, we have a reward observation, and we have a queue observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1744.225,
    "end": 1748.01,
    "text": "And I'll go into these when we get to define them in the generative model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1748.811,
    "end": 1755.259,
    "text": "To start using our package, you can just add it from the Julia registry using the Julia package manager as shown here.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1756.08,
    "end": 1760.887,
    "text": "Basically for this code, you can run through it by yourself and it should be able to run.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1761.868,
    "end": 1768.737,
    "text": "And then we initialize the package and we also import the environments module, which is important for the teammates environment that we're using as an example here.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1769.273,
    "end": 1771.735,
    "text": " And then we initialize the TMAs environment.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1771.815,
    "end": 1776.58,
    "text": "And here we just set a 95% probability of providing reward in the reward condition arm.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1777.541,
    "end": 1782.485,
    "text": "So now we can create the actual generative model, the PMDP generative model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1782.505,
    "end": 1784.667,
    "text": "And you can do this manually by yourself.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1785.868,
    "end": 1796.698,
    "text": "But then you have to make sure that the generative model parameters are typed in the correct manner, which is shown here where it has to be vectors of raise for AB and vectors to vectors for the C and D and vector of floats for E.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1797.286,
    "end": 1800.331,
    "text": " It's very similar to object arrays in NumPy.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1801.052,
    "end": 1806.12,
    "text": "However, we have created a helper function that makes this a lot easier.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1806.481,
    "end": 1811.809,
    "text": "And so I'll just quickly go through the arguments that the helper function takes.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1811.829,
    "end": 1817.939,
    "text": "So the first argument is the number of states in each factor.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1818.62,
    "end": 1820.343,
    "text": "And so remember, we had two factors.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1820.383,
    "end": 1824.61,
    "text": "We had the location state factor and the reward condition factor where we had in the location factor we had.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1824.995,
    "end": 1829.421,
    "text": " four states, we have the sense, the cue location, and the two right arms, so that's four.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1829.942,
    "end": 1833.267,
    "text": "And then we have two reward condition states, reward condition right and reward condition left.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1834.148,
    "end": 1838.815,
    "text": "So we take this as a vector and give it to this function as the first argument.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1839.796,
    "end": 1843.161,
    "text": "And then the second argument is the number of observations in each modality.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1843.201,
    "end": 1854.377,
    "text": "So we have four, we have three different modalities in this case, where we have four observations in the first modality, the location modality, we have the location, sense, cue, and the arms.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1854.863,
    "end": 1858.133,
    "text": " Then we have the second modality, which is the reward modality.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1858.494,
    "end": 1859.578,
    "text": "It has three observations.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1859.698,
    "end": 1862.848,
    "text": "It has the observation of no reward, reward and loss.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1863.453,
    "end": 1867.918,
    "text": " Then we have the last observation modality, which is the Queue observation modality.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1868.378,
    "end": 1872.683,
    "text": "These we also take as a vector and give to the function as a second argument.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1872.703,
    "end": 1876.767,
    "text": "The third argument is the number of controls for each of these factors.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1876.867,
    "end": 1880.031,
    "text": "We have two factors, the location factor and the reward condition factor.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1881.252,
    "end": 1888.6,
    "text": "We only want the agent to be able to control the location factor, so it can move freely between the locations, but in the reward condition state factor,",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1888.58,
    "end": 1914.115,
    "text": " it shouldn't be able to control what arm should be the reward arm and so therefore we just give it a one in this case then we have the policy link which i have described before it's how many steps in the future does the agent plan and then we have the fifth and last argument which is the initial fill which basically says like when we have cons when we have made the structure of these journal to model parameters uh what should be the initial filling of these and here it takes both",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1914.55,
    "end": 1925.164,
    "text": " It takes zeros, which we've chosen in this instance, and it also takes the argument random, which is nice for testing, and uniform, which is the default in this case.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1926.065,
    "end": 1926.306,
    "text": "Good.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1926.887,
    "end": 1934.076,
    "text": "So now we just, having created this helper or these generative model parameters, we just need to fill them with the appropriate values.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1934.977,
    "end": 1938.482,
    "text": "So we'll start out with the observation state likelihood model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1938.867,
    "end": 1947.078,
    "text": " And remember, this is the one that encodes the agent's beliefs of how states generates observations and then infers states based on the observations it receives.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1947.759,
    "end": 1952.025,
    "text": "So in this case, we have the location observation, which is not as interesting to us.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1953.507,
    "end": 1958.895,
    "text": "Basically, it's an identity matrix, meaning that the agent just infers the correct states because we have encoded to do so.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1959.656,
    "end": 1968.688,
    "text": "And then we have two matrices here because we have for each of the location states, which is one matrix, and then we have two matrices, one for each reward condition state factor.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1969.259,
    "end": 1975.912,
    "text": " And if you go to the second modality, which is the reward modality, this is the one that is interesting to us.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1975.952,
    "end": 1984.729,
    "text": "Because if you look at the first column and the last column, this is the queue and center location, we see that it expects that these are going to provide the observation of no reward.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1985.009,
    "end": 1985.53,
    "text": "However,",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1985.864,
    "end": 1998.676,
    "text": " For the second and third column, which are the right and left arms, we see that in the second row that it has a 50% chance that it believes that this state is going to produce a reward observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 1998.996,
    "end": 2007.344,
    "text": "And then if we go to the third row, we see that it has a 50% chance of generating this, or the agent believes that there's a 50% chance of generating this observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2007.765,
    "end": 2012.889,
    "text": "So in this sense, the agent doesn't know which of the arms is going to provide the reward observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2012.909,
    "end": 2013.61,
    "text": "And this is the",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2013.927,
    "end": 2015.709,
    "text": " modality that we want the agent to learn.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2015.749,
    "end": 2020.154,
    "text": "We want it to approximate the actual reward probabilities in the teammates environment.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2020.174,
    "end": 2031.966,
    "text": "Then we have the queue observation modality, which basically just tells the agent that only when it's in the queue location does it correctly get an observation that informs it on the reward condition state of the environment.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2034.249,
    "end": 2039.935,
    "text": "And then we're going to add a prior over a, and this is where the learning part comes in.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2040.505,
    "end": 2063.882,
    "text": " The prior over A is the Dirichlet distribution, and the way that we create this is basically just that we copy the structure of A, and then we add a scaling concentration parameter, which basically says that these counts in the Dirichlet distribution, if they are very high, like if we give a high scaling concentration parameter, each new data observation is not going to matter as much.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2064.422,
    "end": 2066.766,
    "text": "If we set the scaling concentration parameter low,",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2066.948,
    "end": 2070.654,
    "text": " then each data observation we have is going to matter a bit more.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2071.395,
    "end": 2076.983,
    "text": "And then it's important to say that, and this is a bit clunky, but this is now going to define the A matrix.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2077.003,
    "end": 2084.975,
    "text": "So the prior over A is going to define the A matrix, meaning that the A matrix that we just made is not going to be exactly used.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2085.556,
    "end": 2091.825,
    "text": "However, we used it as a template to create the prior over the A.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2092.058,
    "end": 2092.439,
    "text": " Great.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2092.459,
    "end": 2094.382,
    "text": "So now we have the observation state likelihood model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2094.543,
    "end": 2096.927,
    "text": "Now we need to encode the state transition likelihood model.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2096.947,
    "end": 2101.275,
    "text": "And this is the matrices for the first factor, the location factor.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2101.315,
    "end": 2110.552,
    "text": "And basically, we just note here that we have rows that are filled with ones, meaning that from wherever the agent is for that action, it goes to that place that it wants to go to.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2111.594,
    "end": 2116.142,
    "text": "And then we have the second factor, which is the uncontrollable one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2116.544,
    "end": 2118.386,
    "text": " which is the reward condition factor.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2118.406,
    "end": 2128.099,
    "text": "And basically this identity matrix just tells the agent or the agent believes that the reward condition state doesn't change over time, that it stays the same.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2129.12,
    "end": 2129.3,
    "text": "Good.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2129.941,
    "end": 2135.348,
    "text": "So now we come to an interesting parameter, which is the prior preference over observations.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2135.989,
    "end": 2138.893,
    "text": "So we have a vector here for each of the modalities.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2139.373,
    "end": 2142.417,
    "text": "However, the one that we are interested in is the reward observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2142.886,
    "end": 2148.854,
    "text": " So in this case, the first index is the index of the observation no reward, and we set no preference or dislike for this.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2149.535,
    "end": 2155.563,
    "text": "The second index is the observation of reward, which we set to have a preference for that it wants the reward.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2156.063,
    "end": 2161.09,
    "text": "And then we have the third index, which is the loss observation, which we set a dislike for.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2162.592,
    "end": 2162.812,
    "text": "Yes.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2163.573,
    "end": 2170.402,
    "text": "And then we continue to the D parameters where we had a vector for each of the factors.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2170.422,
    "end": 2171.644,
    "text": "We have the location factor.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2172.181,
    "end": 2174.665,
    "text": " where we basically tell it that it's going to start.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2174.685,
    "end": 2179.713,
    "text": "The first index is the sender location that we're just telling it that it's going to start in the sender location.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2180.274,
    "end": 2189.088,
    "text": "And then for the second factor, which is the reward condition factor, we just have a uniform distribution, meaning that the agent does not know what the reward condition is going to be.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2190.15,
    "end": 2190.33,
    "text": "Good.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2190.67,
    "end": 2194.977,
    "text": "Then we have the last of these parameters, which is the prior over policies.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2196.039,
    "end": 2198.543,
    "text": "And we're just going to here provide it with the uniform",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2198.945,
    "end": 2205.775,
    "text": " So this means that as the E parameters are the habits, it's not going to have any habits in this case.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2206.336,
    "end": 2211.584,
    "text": "We see here that we have 16 different policies because we have a policy length of two and we have four actions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2211.824,
    "end": 2215.39,
    "text": "So the total number of combinations of these two actions is going to be 16.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2216.391,
    "end": 2222.1,
    "text": "And then as I said, we just give it a uniform distribution over these policies.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2222.722,
    "end": 2222.982,
    "text": " Good.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2223.443,
    "end": 2227.529,
    "text": "So now we're almost ready to initialize the active inference agent.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2227.95,
    "end": 2230.493,
    "text": "Before we do that, we have to specify some settings.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2231.375,
    "end": 2234.099,
    "text": "And I'll just briefly go into these, what they do.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2234.739,
    "end": 2236.442,
    "text": "The policy length we have talked about.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2236.462,
    "end": 2243.292,
    "text": "The use utility basically means, should we include the C parameter preferences that we just set?",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2243.412,
    "end": 2244.293,
    "text": "And we've set this to true.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2244.734,
    "end": 2250.923,
    "text": "Then we have the use states info gain, which basically says that in the calculation of the expected free energies, which is going to guide action,",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2251.358,
    "end": 2254.623,
    "text": " And should we include the expected information gain?",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2255.344,
    "end": 2264.799,
    "text": "And then we have the use parameter infogain setting, which basically says that when we calculate the expected free energy, should we include the expected learning or updating of the generative model?",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2265.861,
    "end": 2270.529,
    "text": "Then we have action selection, which can take two values, either stochastic or deterministic.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2271.811,
    "end": 2275.797,
    "text": "I'll go into what they do when we come to the function that actually uses this setting.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2276.317,
    "end": 2282.371,
    "text": " Then we have modalities to learn, which basically specifies what modality do we want the agent to learn.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2282.511,
    "end": 2286.962,
    "text": "In our case, we wanted to learn the reward observation modality, so we specify this by giving it two.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2287.784,
    "end": 2288.966,
    "text": "We also have factors to learn.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2289.367,
    "end": 2294.038,
    "text": "This is only relevant when we're doing B and D matrix learning, so it's not going to be relevant in our case.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2294.525,
    "end": 2300.352,
    "text": " Then we have the fixed point iteration number of iterations and the fixed point iteration tolerance, which is basically saying that.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2301.293,
    "end": 2312.507,
    "text": "When should the inference algorithm stop so you can set it to either as we do here after 10 iterations or when the difference between iterations are equal to a lower between this threshold.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2313.749,
    "end": 2317.073,
    "text": "Yes, the last thing that we need to define to initialize the agent.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2317.458,
    "end": 2336.715,
    "text": " is the parameters here i'll just briefly go over what they do the gamma is an inverse temperature function on the expected free energies then we have the alpha which is in this temperature on the action selection and then we have the learning and forgetting rates for the priors over a b and d",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2336.999,
    "end": 2340.002,
    "text": " parameters, which are the ones that we currently have learning for.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2340.362,
    "end": 2350.212,
    "text": "The ones that we are interested in at the moment, though, is the prior over A, which is the learning rate and forgetting rate for this, which we're going to set to its default value of one.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2350.272,
    "end": 2353.675,
    "text": "And the values here are all the default values.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2354.516,
    "end": 2354.716,
    "text": "Good.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2355.136,
    "end": 2362.743,
    "text": "So now we can initialize our active inference agent by providing it with the generative model and the settings and these parameters.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2364.145,
    "end": 2366.567,
    "text": "And we are almost ready for the perception and action loop",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2366.716,
    "end": 2367.197,
    "text": " in itself.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2367.617,
    "end": 2371.962,
    "text": "And before we do that, we just have to specify how many iterations does this loop need to contain.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2372.522,
    "end": 2376.727,
    "text": "And then we reset the teammates, which just gives the agent like an initial observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2378.108,
    "end": 2383.014,
    "text": "And this is the perception action learning loop, and it has five functions.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2383.354,
    "end": 2388.099,
    "text": "And I'm going to go through them and just briefly explain how they relate to active inference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2389.721,
    "end": 2395.187,
    "text": "So the info states function is the one that actually does the minimization of the variational free action.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2395.471,
    "end": 2396.733,
    "text": " the variation-free energy.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2397.734,
    "end": 2400.939,
    "text": "And this is the perception part of active inference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2401.039,
    "end": 2409.371,
    "text": "Here in our package, we use an algorithm called fixed point iteration, also known as coordinate ascent variational inference.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2410.132,
    "end": 2421.107,
    "text": "And here we also just provided a picture of an observation where you can see that we have these three observations, the location observation, reward observation, and the queue observation.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2421.948,
    "end": 2446.352,
    "text": " we have the infrared policies this is the one that actually calculates the expected free energies and is affected by the settings that we talked about before and the gamma and the e parameters it returns the expected free energies and it also returns the posterior over policies which is and it's this posterior probability that we are going to be sampling from when we are sampling actions",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2446.771,
    "end": 2453.101,
    "text": " And so basically this function sample action just samples from this posterior probability over policies.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2453.843,
    "end": 2465.902,
    "text": "And it is affected by the action selection, where it could be either stochastic or deterministic if it's stochastic it just samples from the probability distribution, but if it's deterministic it always takes the policy with the highest probability.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2467.365,
    "end": 2471.091,
    "text": "Then we have the update eight, which is where the learning occurs.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2471.392,
    "end": 2479.823,
    "text": " And this is where we basically add the Dirichlet counts to the prior over A, and then it updates the A by normalizing the concentration parameters.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2481.545,
    "end": 2491.338,
    "text": "Then we have the step teammates, which is basically just the agent interacting with the environment, and then it provides the observation for the next iteration in the perception action learning loop.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2493.461,
    "end": 2500.69,
    "text": "So this is the loop, and this is the one that is also going to be used in the model fitting part.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2501.26,
    "end": 2505.364,
    "text": " And I think we're taking some questions now.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2505.625,
    "end": 2506.646,
    "text": "One question.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2506.906,
    "end": 2507.327,
    "text": "One question.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2507.587,
    "end": 2508.168,
    "text": "Yes.",
    "speaker": "SPEAKER_04"
  },
  {
    "start": 2510.21,
    "end": 2510.51,
    "text": "Okay.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2510.85,
    "end": 2513.293,
    "text": "I'll ask one question from Tin Tin in the chat.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2513.353,
    "end": 2516.917,
    "text": "They wrote, hello, thanks all for this great work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2517.538,
    "end": 2527.909,
    "text": "Have you implemented Bayesian model reduction or incremental model construction slash structure learning with ActiveInference.jl rather than manual construction?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2529.982,
    "end": 2556.968,
    "text": " happened no that's the shortcut yeah so the package is just now ready for deployment and there's many ways to extend it which we'll work on but also i mean if people interested in collaboration to develop the package so this is exciting for two reasons like in two ways by the way um basically model structure learning it can either be model structure learning from the perspective of the agent",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2558.315,
    "end": 2560.077,
    "text": " learning the structure of the environment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2560.578,
    "end": 2568.788,
    "text": "They can also be unstructured learning from the perspective of us researchers wanting to find out what kind of structure a given agent has in the environment.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2568.948,
    "end": 2574.075,
    "text": "And both of these purposes are the same thing we would like to do.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2574.675,
    "end": 2578.7,
    "text": "I think a useful kind of connective tissue question.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2578.841,
    "end": 2588.052,
    "text": "Where would you put ActiveInference.jl in relationship to what PyMDP does in Python and what RxInfer does in Julia?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2589.77,
    "end": 2606.154,
    "text": " So PyMGP was originally a port of the SPM functions into Python, brilliant work by Connor and colleagues, where they make it modular and easy to use, but made for theoretical simulations only.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2607.096,
    "end": 2615.348,
    "text": "And I think this summer, they just finished Jack's reimplementation of PyMGP, which means now you can also use it to fit to behavior.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2616.49,
    "end": 2617.431,
    "text": "But it's not designed",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2618.187,
    "end": 2619.909,
    "text": " It wasn't primarily designed for that.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2620.77,
    "end": 2625.315,
    "text": "And it was also not made for engineering purposes.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2625.455,
    "end": 2628.578,
    "text": "Python is too slow, although I'm sure you could in principle.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2630.34,
    "end": 2634.405,
    "text": "And since then has come the C++ package, right?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2634.705,
    "end": 2635.686,
    "text": "Which is much faster.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2636.086,
    "end": 2644.315,
    "text": "And I think, but harder to use because it's in C, although there are records in different languages, that would be useful for machine learning.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2646.017,
    "end": 2646.878,
    "text": "RxInfer,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2647.516,
    "end": 2658.829,
    "text": " implements active inference and many other things on only style factor graph, which is a very efficient and powerful way of thinking patient inference and variation of patient inference.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2659.69,
    "end": 2662.853,
    "text": "And that is optimized much more for engineering purposes.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2662.893,
    "end": 2671.603,
    "text": "If you want to build something that does something using active inference, go C++ or RxInfer.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2673.225,
    "end": 2675.768,
    "text": "And if you want to apply it to behavioral data,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2676.76,
    "end": 2680.366,
    "text": " then go pymdp or active-entrance.gl.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2680.526,
    "end": 2682.75,
    "text": "And there are some tools for this also in MATLAB.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2683.291,
    "end": 2689.581,
    "text": "But I think our package and pymdp are made to make this easier.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2689.862,
    "end": 2693.708,
    "text": "And as you might notice, we use much of the syntax from pymdp.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2694.049,
    "end": 2695.191,
    "text": "So we're heavily inspired by that.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2695.752,
    "end": 2700.76,
    "text": "And in the next part, you'll see how to use it to apply the package to behavioral code.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2701.583,
    "end": 2702.684,
    "text": " Does that answer those questions?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2702.704,
    "end": 2703.025,
    "text": "Cool.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2703.365,
    "end": 2704.026,
    "text": "Yeah, perfect.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2704.086,
    "end": 2704.646,
    "text": "Definitely.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2704.667,
    "end": 2718.722,
    "text": "The functions look great and your team's understanding and clarity around the problem setup, taking that all the way through the helper functions for the matrices, that's where so much of the friction is.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2718.783,
    "end": 2720.384,
    "text": "So this makes it really clear.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2720.404,
    "end": 2722.327,
    "text": "It's a great open source point.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2723.848,
    "end": 2728.013,
    "text": "It's also where a kind of future development, yeah, it was really happening there.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2728.499,
    "end": 2732.904,
    "text": " So the API can be improved for sure, and we will work on it.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2733.304,
    "end": 2741.554,
    "text": "Because I think one of the main challenges active inference has faced as a tool for cognitive modeling is that it's hard to use and hard to understand.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2742.835,
    "end": 2746.619,
    "text": "And that's why much of the mathematical psychology world, for example, just leaves it.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2747.1,
    "end": 2749.643,
    "text": "They say, we have a two or three equation model.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2750.023,
    "end": 2754.308,
    "text": "Why would we use your beam of a machine instead?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2754.348,
    "end": 2758.152,
    "text": "But just as it has been the case with many other methods,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2758.638,
    "end": 2772.474,
    "text": " making tools that make it easy to use and conceptualizations that make it easy to understand is the kind of thing that will make these models feasible and therefore used more broadly.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2773.956,
    "end": 2781.745,
    "text": "Yeah, that's making me think like RX Infer is the car factory, this is the bike, and Active Inference is the wheel.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2783.487,
    "end": 2786.43,
    "text": "You can think of it, yeah.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2786.45,
    "end": 2788.172,
    "text": "You need a logo.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2788.945,
    "end": 2794.953,
    "text": " All right, let's do the last important section and we'll see how much time we have.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 2794.973,
    "end": 2801.042,
    "text": "Okay, because we're short on time, I will need to skip through a few of the sections, but I hope it's going to be all right.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2801.943,
    "end": 2816.623,
    "text": "So I think Peter already mentioned that we have this sort of environment of packages in Julia, and one of them is action models, which is sort of a system package for us, which mediates the data fitting process for us, right?",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2817.093,
    "end": 2826.926,
    "text": " So here we are essentially going in the opposite direction where our inputs and the actions of our experimental subjects are known.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2827.647,
    "end": 2834.857,
    "text": "But now we are interested in the hidden or latent parameters of the subjective generative model.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2837.44,
    "end": 2843.168,
    "text": "So there's a sort of core component of action models is the action model function, which",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2843.57,
    "end": 2868.717,
    "text": " depending on our model can be an arbitrary function which takes a single input which in our case is a single observation it updates the states of the agent and then it sort of quantifies the probabilities of actions so we end up with a probability distribution from which we can assemble our actions right and so in our case we have this nice function called action pure mdp",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2869.388,
    "end": 2872.15,
    "text": " which is our active inference action model.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2872.731,
    "end": 2880.598,
    "text": "And it takes these two arguments, which is our initialized AI object with the parameters of the generative model, settings, et cetera.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2881.298,
    "end": 2887.684,
    "text": "And it takes the single observation and then it outputs the action distribution.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2887.704,
    "end": 2893.829,
    "text": "So in this particular case, we have two action distributions, one for each state factor.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2895.631,
    "end": 2898.433,
    "text": "And then another core component of action models",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2898.937,
    "end": 2917.143,
    "text": " is an agent, so it sort of wraps our action model function and our active inference object in a more abstract structure, which we will be using for pitching and for simulation as well.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2917.163,
    "end": 2921.569,
    "text": "And it also stores parameters, states, history, etc.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2922.477,
    "end": 2929.145,
    "text": " All right, now I'll just allow myself to skip through some of the convenience functions so I can just go straight to the data fitting, if that's all right.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2930.266,
    "end": 2935.672,
    "text": "Okay, so this is, I would assume, the most interesting part of this.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2936.253,
    "end": 2940.758,
    "text": "So how to actually fit active inference models to data.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2941.499,
    "end": 2952.332,
    "text": "So all of our fitting functions kind of operate on Turing, and we wrap all of the necessary Turing operations in our convenience functions for fitting.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2952.818,
    "end": 2959.884,
    "text": " So let's say, for example, we want to fit a single subject and we want to recover a single parameter, a sort of minimal, simple example.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2960.565,
    "end": 2962.066,
    "text": "So we start by specifying a prior.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2962.647,
    "end": 2966.51,
    "text": "So here, let's say we want to recover our action precision parameter alpha.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2966.53,
    "end": 2973.016,
    "text": "So we set a prior for it, let's say the Gaussian with a mean of six and sigma two and set it in a dictionary.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2973.697,
    "end": 2980.783,
    "text": "And then in case we want to put more parameters at once, we just add them to the same dictionary and their corresponding prior distributions.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2981.675,
    "end": 2989.286,
    "text": " And so now we can use the create model function, which will instantiate our probabilistic model on our data.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 2989.306,
    "end": 3001.004,
    "text": "And it takes these inputs, which is our initialized agent, it takes our priors and our collected observations and actions, which we collect, let's say, from a behavioral experiment.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3001.404,
    "end": 3005.891,
    "text": "And in this case, we're just using some data from simulated teammates.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3006.432,
    "end": 3009.336,
    "text": "So here we, our actions,",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3009.721,
    "end": 3017.714,
    "text": " is a matrix which has rows corresponding to timesteps, or let's say trials, and columns corresponding to state factors.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3017.794,
    "end": 3023.142,
    "text": "And similarly in observations, we have columns corresponding to observation modalities.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3025.446,
    "end": 3037.365,
    "text": "And then we'll have our model object instantiated, which we can easily fit in a single line using our fit model function, which will run the sampler with appropriate defaults.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3037.868,
    "end": 3046.036,
    "text": " And then we can, like, obviously people would want to pass some more specific settings into the sampler.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3046.436,
    "end": 3056.926,
    "text": "So here I'm passing, for example, the number of iterations per chain, and I'm running four chains, and then I'm using the distributed module to run the chains in parallel.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3059.188,
    "end": 3066.475,
    "text": "Right, and then we, after the sampling is finished, then we will end up with the results object, which contains our chains, and then we can",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3066.893,
    "end": 3068.475,
    "text": " work further with this, right?",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3068.495,
    "end": 3079.106,
    "text": "So I'm just going to quickly go through some of our other convenience functions, for example, to rename chains, which will rename the names of the parameters in our chains to something more, more intuitive.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3079.847,
    "end": 3085.714,
    "text": "And we can extract quantities from our chains that we can just simply display the results of, of our chain.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3086.074,
    "end": 3094.944,
    "text": "So again, the summary statistics, some information about, about the conversions of our chains, quantiles, et cetera, right?",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3095.144,
    "end": 3095.905,
    "text": "Or then we can just",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3096.29,
    "end": 3105.08,
    "text": " Here's a sort of native Julia uploading function so we can pass our chains to it to take a look at chain traces or posterior distributions.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3106.201,
    "end": 3110.706,
    "text": "Or what we can do is we can sample from our prior.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3110.767,
    "end": 3124.322,
    "text": "So here I'm taking a thousand samples from the prior and I'm using our plot parameters function to plot the posterior distribution against the prior distribution for our",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3124.572,
    "end": 3127.535,
    "text": " synthetic participant, let's say.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3129.156,
    "end": 3136.403,
    "text": "Okay, and this is the part that's going to be mostly interesting, I think, for people in computational psychiatry and cognitive modeling.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3137.544,
    "end": 3141.768,
    "text": "And it's the case where we want to fit a full data set.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3141.788,
    "end": 3152.638,
    "text": "So in this case, let's say that we have some data with 10 participants, and let's assume that we have two clinical groups in our data.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3153.04,
    "end": 3179.217,
    "text": " can be i don't know control and whatever psychotic or it can be young old right and we can simply pass the whole data set with our collected data let's say from from our behavioral experiment to the same create model function so it instantiates the the probabilistic model on the whole data set",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3179.72,
    "end": 3191.782,
    "text": " And then additional things that we need to tell the function is which column to use to differentiate between individual subjects and which columns contain our observations and which columns contain our actions.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3192.443,
    "end": 3198.915,
    "text": "And again, we have our model instantiated on the whole dataset and we can just pass it on to our fit model function.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3200.057,
    "end": 3203.483,
    "text": "And again, this following is sort of the same procedure as before.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3203.986,
    "end": 3230.803,
    "text": " can play around with our recovered chains here we have the recovered values of alpha for each participant using native Julia functions to deploy the chain traces and again we can let's say sample from the prior and plot the posterior against priority solutions for each participant right and then",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3231.205,
    "end": 3245.122,
    "text": " So keeping also with this default procedure in cognitive modeling, now let's say that we have our estimates and we want to see where there is actually a difference in our two groups.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3246.003,
    "end": 3251.529,
    "text": "So here I'm just extracting the quantities from the chain and I'm getting the estimates, which in this case are medians.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3252.23,
    "end": 3259.018,
    "text": "And we can see here that there are indeed two groups present in our data.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3259.64,
    "end": 3270.64,
    "text": " After, let's say that we run some statistics on our estimates, then we might be also interested to see whether there's any correlation with other states of our agent.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3270.66,
    "end": 3282.12,
    "text": "And let's say some physiological data, but here I'm putting the state action prediction error, which then my people want to correlate, let's say with brain data or pupilometry, for example.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3284.294,
    "end": 3296.654,
    "text": " And for people who might want to use variational inference for various reasons over sampling, the good news is that Turing can do variational inference too.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3297.595,
    "end": 3305.728,
    "text": "So here I just sort of remade the tutorial that you can find on the official Turing web page where I'm",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3306.333,
    "end": 3316.545,
    "text": " In the beginning, just initializing the variational inference algorithm with a sort of default number of samples and a default number of iterations.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3316.565,
    "end": 3322.312,
    "text": "And importantly, I'm setting the automatic differentiation backend to reverse mode automatic differentiation.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3323.133,
    "end": 3332.965,
    "text": "And then in the VI function, which runs the variational inference algorithm, I'm just reusing our probabilistic model, which we have already created previously.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3333.586,
    "end": 3335.328,
    "text": " So this is very nice.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3335.669,
    "end": 3340.615,
    "text": "And what we end up with is our variational posterior, which is a type of distribution.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3340.635,
    "end": 3343.98,
    "text": "So we can sample from it or work further with it.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3346.584,
    "end": 3350.008,
    "text": "And just to rather quickly wrap up.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3350.268,
    "end": 3353.533,
    "text": "So we're currently working on the documentation.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3354.274,
    "end": 3355.135,
    "text": "We know it's important.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3355.315,
    "end": 3358.339,
    "text": "So it should be done in the next few weeks, let's say.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3359.861,
    "end": 3361.804,
    "text": "Until then, you can either reach out",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3362.122,
    "end": 3368.211,
    "text": " or you can refer to Action Models documentation, which is really nicely written.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3372.277,
    "end": 3372.497,
    "text": "Okay.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3373.258,
    "end": 3379.848,
    "text": "And yeah, just briefly, just to summarize what we need to do in our next potential future.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3380.95,
    "end": 3382.091,
    "text": "So we need to optimize.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3382.292,
    "end": 3386.418,
    "text": "The package is fast, but there are still a lot of things that need to be improved.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3386.438,
    "end": 3390.103,
    "text": "Then the idea was to, for example, be able to fit",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3390.522,
    "end": 3418.453,
    "text": " all parameters because for now we were only able to to recover the the sort of hyper parameters and what's been called the non-matrix parameters but in principle one can also one should be also able to fit an entire let's say a matrix or c matrix which would be really nice and then okay we can um extend the parameter learning to all other uh parameters of the of the generative model and that idea was to introduce a sort of custom parameterizations where",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3418.703,
    "end": 3428.915,
    "text": " the user could introduce a temperature parameter on an A matrix, and this could be also in principle then recovered using data fitting from empirical data.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3430.457,
    "end": 3447.478,
    "text": "And last, I'm just going to say that for our fitting, we are using reverse automatic differentiation, which is fast, but we are also planning to start experimenting with other engines which are currently under development in Julia also, which includes Enzyme and",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3447.712,
    "end": 3451.037,
    "text": " Mooncake, which might be potentially faster.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3451.998,
    "end": 3460.17,
    "text": "And then on the side of action models, Peter has been working for some time also on the possibility of adding linear regressions.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3460.63,
    "end": 3467.56,
    "text": "So the idea would be that we could fit the data, we could recover our estimates, and we could",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3467.86,
    "end": 3474.948,
    "text": " run linear regressions with our estimates or with other variables that we might have.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3475.528,
    "end": 3476.449,
    "text": "In one model.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3476.47,
    "end": 3476.69,
    "text": "Yes.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3476.71,
    "end": 3478.251,
    "text": "Which is statistically up to you.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3478.972,
    "end": 3479.172,
    "text": "Yes.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3480.154,
    "end": 3480.394,
    "text": "Okay.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3480.414,
    "end": 3492.948,
    "text": "And the last thing you're going to hear from me is that when you decide that you want to start experimenting with our package and you encounter an issue or do you have any specific feature in mind that you would like us to implement, please feel free to open an issue.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3493.608,
    "end": 3496.872,
    "text": "Any kind of feedback will be greatly appreciated.",
    "speaker": "SPEAKER_03"
  },
  {
    "start": 3498.758,
    "end": 3499.139,
    "text": " Thank you.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3499.6,
    "end": 3500.322,
    "text": "And we're out of time.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3500.382,
    "end": 3509.425,
    "text": "So I'll just briefly mention this point that you can treat a whole group of agents as one agent and do cognitive modeling on a separate paper.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3509.445,
    "end": 3512.413,
    "text": "So I'm sure there'll be time to talk about that at another time.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3518.063,
    "end": 3518.824,
    "text": " Yes.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3518.844,
    "end": 3520.086,
    "text": "I think that's it.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3520.106,
    "end": 3520.727,
    "text": "Thanks, Sol.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3521.809,
    "end": 3524.173,
    "text": "This is a huge advance.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3524.353,
    "end": 3525.756,
    "text": "It's really awesome.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3525.836,
    "end": 3531.064,
    "text": "Brings a lot of features a lot closer to people's hands and minds.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3532.166,
    "end": 3536.954,
    "text": "And it's exciting that we'll continue developing and learning about it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3538.737,
    "end": 3540.079,
    "text": "Thank you.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3540.099,
    "end": 3540.72,
    "text": "Okay.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3540.74,
    "end": 3541.121,
    "text": "Thank you.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3541.381,
    "end": 3541.962,
    "text": "Till next time.",
    "speaker": "SPEAKER_00"
  }
]