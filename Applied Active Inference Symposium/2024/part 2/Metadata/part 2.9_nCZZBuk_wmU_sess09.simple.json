[
  {
    "start": 42.893,
    "end": 46.582,
    "text": " Welcome William Gebhardt to the fourth Active Inference Symposium.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 47.444,
    "end": 57.149,
    "text": "We're looking forward to your session titled An Introduction to NGC Learn, a Computational Neuroscience Library.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 57.57,
    "end": 58.472,
    "text": "Over to you.",
    "speaker": "SPEAKER_00"
  },
  {
    "start": 59.11,
    "end": 77.625,
    "text": " Yeah, so today I'm here to talk about the NAC, the Neuro-Adaptive Computing Labs, Python NIMP tool called NGC Learn that is really focused on getting your ability to prototype your ideas and work with your ideas in the field of computational neuroscience quickly and efficiently in Python.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 78.415,
    "end": 85.142,
    "text": " So before we're going to start off with all this first, we kind of want to briefly cover what we mean when we talk about computational neuroscience.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 85.162,
    "end": 91.568,
    "text": "So this is just the study and investigation of brain function using mathematical computation and tools and theories.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 92.709,
    "end": 100.076,
    "text": "We have a focus on biologically plausible and biologically grounded systems and neurons and neuronal systems.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 100.177,
    "end": 107.764,
    "text": "And we pay very high attention to the constraints and dynamics that are found in the real world when we talk about these.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 107.744,
    "end": 123.258,
    "text": " For instance, we model things like we have the resistance from membrane potentials, we have currents, we have a bunch of other various internal components to everything that make sure that we are modeling faithfully all of the neurons and components that we can find inside NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 123.999,
    "end": 126.06,
    "text": "And we don't just take from humans.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 126.401,
    "end": 137.751,
    "text": "In fact, there's a couple of various things that we have that are based on findings for things like rat hippocampal neurons and whatnot, for stuff like synaptic plasticity and transfers.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 137.731,
    "end": 142.059,
    "text": " And so yeah, so we kind of look at this biological interpretation of the world.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 142.26,
    "end": 150.596,
    "text": "And so one of the main things that we also like to look at is like, what is realistic when we talk about an interpretation of our world and how biology looks at it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 151.117,
    "end": 159.874,
    "text": "And so like, for instance, our human eyes, it's been studied that they process thing information at about 60 frames a second, we can certainly detect things that move through our visual field",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 159.854,
    "end": 160.635,
    "text": " faster than that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 160.955,
    "end": 169.005,
    "text": "But as far as visual updates and whatnot, once you pass 60 frames a second or 60 updates per second, we have a hard time distinguishing.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 169.986,
    "end": 180.799,
    "text": "And then also processing for a lot of things in our brain is not just we see an image, we process the image once, and then we just sit around idle until a new image comes into our brain.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 180.779,
    "end": 190.355,
    "text": " A lot of the time, what we'll end up with is we'll end up with a continuous stream of data coming into our brain, and then we have to do continuous updates and processing on that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 190.916,
    "end": 198.248,
    "text": "And it's that continuous update and processing that we really are trying to hone in on and identify here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 198.228,
    "end": 202.913,
    "text": " So we do all of this inside of a biological framing.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 203.674,
    "end": 204.655,
    "text": "So we use neurons.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 204.735,
    "end": 211.503,
    "text": "Now, these are not necessarily neurons like deep neural networks like to talk about neurons, where it's just an abstract point in space.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 212.324,
    "end": 226.26,
    "text": "We actually model them as physical objects that have things like internal states and that also embody what they look like in brains and just other neural structures in the body.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 226.24,
    "end": 232.125,
    "text": " We have the center of the cell where we store a lot of our values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 232.486,
    "end": 236.289,
    "text": "We have synapses that connect these to other neurons later down.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 236.829,
    "end": 246.138,
    "text": "And one of the key things that our library very much highlights is the use of spikes in spiking neural networks in order to actually achieve all of this happening.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 246.778,
    "end": 255.606,
    "text": "What this means is that instead of working in continuous values where you have a real valued image coming into your network and then it",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 255.586,
    "end": 259.673,
    "text": " passes through your entire network as a bunch of other real valued numbers.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 260.355,
    "end": 271.435,
    "text": "Images as they enter into our networks tend to be converted into what are known as spike trends, which are just a bunch of discrete either ones or zeros on whether or not there is signal.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 271.988,
    "end": 280.011,
    "text": " And then from neurons to neurons in our systems, we tend to transmit these things only as spikes.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 280.252,
    "end": 286.369,
    "text": "So everything is dealt with with discrete signals rather than continuous signals.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 286.855,
    "end": 291.783,
    "text": " And then the other thing that we really heavily rely on in NGC Learn is stateful modeling.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 292.404,
    "end": 306.889,
    "text": "So as we're dealing with these models that are constantly taking in signals over time, it's to be expected that we require many signals and many iterations over the signals before we will actually produce any given output.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 306.869,
    "end": 310.599,
    "text": " What that means is that all of our neurons have internal states and are stateful.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 310.96,
    "end": 321.891,
    "text": "And so we can, for instance, stop getting any input and we can actually still watch what happens to the neurons in our models as they basically return to their rest positions.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 321.871,
    "end": 327.558,
    "text": " And so we have our biological components that have our internal states, and then these states do change over time.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 327.578,
    "end": 339.674,
    "text": "And so we tend to think about all of the models that we build with NGC Learn and just computational neuroscience in general, somewhat akin to state machines, with the idea that we progress through time by changing the state of our own model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 339.794,
    "end": 346.022,
    "text": "And then there's certain actions that happen that can affect our model and transform it from one state to another.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 348.736,
    "end": 353.783,
    "text": " And so that's kind of the basic framing behind what we're going for with this, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 353.803,
    "end": 356.085,
    "text": "We're not trying to be the next TensorFlow.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 356.106,
    "end": 358.869,
    "text": "We're not trying to be the next deep neural network library.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 359.51,
    "end": 368.922,
    "text": "What we're trying to be is we're trying to be a library that is specifically catered to computational neuroscience and the biologically inspired and biomimetic systems.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 369.222,
    "end": 371.226,
    "text": " So why do we need this?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 372.067,
    "end": 375.714,
    "text": "So building these complex systems has a lot of overhead.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 375.895,
    "end": 385.172,
    "text": "If we need to make a system that tracks all of the different internal states of all models and can communicate between different components easily,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 385.152,
    "end": 405.405,
    "text": " uh that can run efficiently um so at the bottom here you can see here so in one of these models that we built early on uh we had a pretty standard d uh spiking neural network uh that was not big by neural network standards uh that took about eight hours to do an epoch of mnist",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 405.385,
    "end": 411.98,
    "text": " And that is due to the fact that when we are looking at an individual image in MNIST, we have to go over it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 412.581,
    "end": 416.67,
    "text": "I think this model was doing 200 forward passes effectively over it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 416.71,
    "end": 423.124,
    "text": "Basically, we take the image and we convert it into a spike train that's 200 time steps long and feed it through our model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 423.104,
    "end": 438.126,
    "text": " In addition to this, because in our brain, we don't have really the concept of mini batching, you don't perceive 18 different world views at a time, and then update off of them, or, you know, 8000 or 500 or however many big",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 438.106,
    "end": 443.135,
    "text": " batch sizes have gotten to these days, we do everything in a continuous online updated.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 443.716,
    "end": 446.36,
    "text": "And so because of that, we can only look at one image at a time.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 446.681,
    "end": 458.781,
    "text": "So if we're doing roughly 200 forward passes per image, one image at a time, this can get really, really, really slow and up to eight hours for us to do any POC over MNIST.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 458.761,
    "end": 470.37,
    "text": " And so when we looked at some of the other existing libraries out there, like Brian2, Bindsnet, SNNTorch and whatnot, they all worked and they all have their strengths to be able to implement these systems.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 470.951,
    "end": 475.302,
    "text": "But some of them very much operate like black boxes.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 476.041,
    "end": 490.777,
    "text": " with the idea that you can modify parameters on the outside, but then you're entrusting that your various existing library is doing everything you expect it to mathematically inside.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 491.438,
    "end": 502.47,
    "text": "And what this also does is this makes it hard sometimes to actually either dig in and see what those dynamics specifically are, or even just want to modify some of those dynamics.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 502.45,
    "end": 509.201,
    "text": " And so what we wanted to focus on was building something that was incredibly modular, but still fast, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 509.301,
    "end": 515.932,
    "text": "So you can usually you have this trade off between you can have a system that's incredibly fast, but incredibly limited in what you can do with it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 516.493,
    "end": 523.564,
    "text": "Or you can have a system that is incredibly modular and can do a bunch of things, but generates to trade off speed.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 523.544,
    "end": 535.524,
    "text": " And so we were kind of aiming for the middle of that with error more while trying to expand it to make sure we didn't sacrifice too much speed to be able to do all of the modular stuff that we wanted to be able to do.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 536.546,
    "end": 540.152,
    "text": "And so with that, we have some highlights of NGC Learn here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 540.554,
    "end": 542.497,
    "text": " So first off, this is an open source project.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 542.557,
    "end": 543.598,
    "text": "It's available on PIP.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 543.618,
    "end": 545.18,
    "text": "It's available on GitHub.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 545.941,
    "end": 553.551,
    "text": "We are an active development base, which means that if you write us messages, like if you put errors or message notifications in GitHub, we'll see them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 554.112,
    "end": 555.934,
    "text": "If you email us, we will see them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 555.974,
    "end": 556.855,
    "text": "We will respond to them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 556.895,
    "end": 557.997,
    "text": "We can work with you on them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 559.399,
    "end": 565.887,
    "text": "So NGC Learn specifically is built using JAX, which is",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 565.867,
    "end": 580.6,
    "text": " basically built on the underlying library called the Accelerated Linear Algebra Library, or XLA, which is a bunch of C Python bindings wrapped around basically C functions for doing linear algebra.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 581.16,
    "end": 595.873,
    "text": "And what that allows, and so those are really fast because we get to use C. And then so JAX is built on one step on top of that, which basically creates a bunch of NumPy bindings for said C Python functions.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 595.853,
    "end": 604.249,
    "text": " And so JAX has this really, really cool component to it called just-in-time compilation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 604.329,
    "end": 614.689,
    "text": "And what this allows you to do is you can put a pure method into JAX's just-in-time compilation, and it will give you a pure method out",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 614.669,
    "end": 620.257,
    "text": " But when you run that method, it runs entirely in C. It does not actually do anything in Python.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 620.778,
    "end": 636.981,
    "text": "And so the advantage of that is if we can take our giant model's state transition functions and make them be pure functions where you give it an initial state and it gives back to you the final state, we can pass that into JAXA's just-in-time compilation and basically take",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 636.961,
    "end": 653.383,
    "text": " the entire model and its entire state transformation, and we can do it really efficiently in C. And actually, as a matter of fact, we can take that and we can do state transitions hundreds of times before we ever return to Python.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 653.363,
    "end": 656.068,
    "text": " And so this is kind of how we get that speed up.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 656.568,
    "end": 669.33,
    "text": "And in our testing, that same model that took eight hours to do an epoch over MNIST, we got down to roughly 15 minutes, 12 to 15 running on the same hardware.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 669.31,
    "end": 673.059,
    "text": " to do an epoch over MNIST, which is 40 times speed up there.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 673.099,
    "end": 676.747,
    "text": "There have been other examples that we've had that have gotten up to a 50 times speed up.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 677.529,
    "end": 682.54,
    "text": "This is not me promising that you will achieve a 40 or 50 times speed up in your work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 682.62,
    "end": 688.213,
    "text": "This is just me saying that sometimes you don't realize how fast it can be running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 688.362,
    "end": 696.122,
    "text": " Um, we also wrote this so that way, if you want to be writing your own new components, because we all know that, you know, ask models are great.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 696.382,
    "end": 697.244,
    "text": "We can work with those.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 697.305,
    "end": 697.846,
    "text": "Those are great.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 697.886,
    "end": 705.004,
    "text": "But the fun part about science is actually getting to build new things and try out new ideas and new modules.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 704.984,
    "end": 714.43,
    "text": " So we made it really easy to write new stuff, write new components, write new learning rules, write new neurons.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 714.451,
    "end": 720.006,
    "text": "All of this stuff is really easy to write, and they wire directly into the compilers without any problems.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 719.986,
    "end": 728.303,
    "text": " And then one of the other things, too, that we have is that it interfaces with Intel's Luigi 2's simulator.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 728.804,
    "end": 735.398,
    "text": "Now, the Luigi 2 is a neuromorphic chip developed by Intel for doing neuromorphic computing.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 735.438,
    "end": 741.15,
    "text": "This is basically taking spiking neural networks and putting them at purely a hardware level.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 741.856,
    "end": 751.931,
    "text": " which is where all of the energy efficiency that you've heard people talk about with spiking neural networks comes from, is the fact that when you put it onto a neuromorphic chip, it's really efficient.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 752.792,
    "end": 763.408,
    "text": "And having worked with physical Luigi's and whatnot, it can be somewhat of a struggle to actually get those chips running and get them working well.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 763.888,
    "end": 768.555,
    "text": "And so what that kind of comes down to is when you want and you actually get access to",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 768.535,
    "end": 775.047,
    "text": " one of the physical pieces of hardware, you want to make sure that your model probably at least works in their simulator that they provide.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 775.848,
    "end": 784.384,
    "text": "I will tell you that the simulator does not one-to-one match with reality, but that is something that Intel knows and is aware of and I presume working on.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 784.364,
    "end": 790.356,
    "text": " But what we allow you to do is that we have a sub-project of NGC Learn called NGC Labo.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 790.977,
    "end": 798.071,
    "text": "And what that gives you is a couple changed object classes and a couple more restrictions that you have to follow while building things.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 798.833,
    "end": 804.364,
    "text": "And then after that, you can run NGC models directly in",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 804.344,
    "end": 805.827,
    "text": " the Luigi two simulator.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 807.089,
    "end": 820.896,
    "text": "This means that you can take your model and you can run it on a GPU, you can run it on a CPU, and you can run it on the Luigi simulator, all without actually having to change any of your code base, you're basically just like changing a flag somewhere on where it's running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 821.717,
    "end": 823.18,
    "text": "And that's all you have to do for that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 824.324,
    "end": 827.99,
    "text": " So how do we actually build models in NGC Learn?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 828.13,
    "end": 832.477,
    "text": "Because now that I've pitched it to you as this great tool, let's see if it holds up with how easy it is.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 833.198,
    "end": 836.303,
    "text": "So overall, it's a modular system, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 836.383,
    "end": 840.109,
    "text": "So the goal of NGC Learn was to be incredibly plug and play.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 840.77,
    "end": 844.676,
    "text": "And also, it has to be effectively one giant state machine.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 845.317,
    "end": 848.762,
    "text": "So we can see on the right here, we have this context block.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 848.742,
    "end": 858.914,
    "text": " Now, for us, a context is generally our model, but sometimes you'll have multiple models that you define or some models that are defined inside of one giant overarching context.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 859.374,
    "end": 861.236,
    "text": "It's just the container that holds everything.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 861.817,
    "end": 870.447,
    "text": "Now, the parts that we're the most interested in, the things that actually do all of the updates and hold all of the fun bits of research are the components.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 870.427,
    "end": 874.253,
    "text": " And so components tend to consist up of a couple of things.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 874.534,
    "end": 880.524,
    "text": "So we have parameters, and we have compartments, and then there are the cables that connect them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 880.544,
    "end": 883.769,
    "text": "And we'll talk more in detail about what each one of those are in a little bit.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 884.21,
    "end": 887.295,
    "text": "But the components are the new things, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 887.375,
    "end": 894.146,
    "text": "If you build a new neuron, if you build a new weight matrix with a new learning rule or whatever, those are what you're building.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 894.166,
    "end": 896.991,
    "text": "You're just building those little tiny parts.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 896.971,
    "end": 907.304,
    "text": " And because of the way that they interface with one another, you don't have to worry about, oh, does this have the right number of outputs to line up with the right number of inputs and whatnot?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 907.524,
    "end": 920.7,
    "text": "If you build the components in such a way that you follow just the standard practice that we've set out, all of the data will flow from component to component without any problems.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 922.739,
    "end": 927.485,
    "text": " So if we want to actually talk about the components, these are the backbone of what you're doing.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 927.545,
    "end": 931.971,
    "text": "So on the left here, I have the leaky integrate and fire neuron.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 931.991,
    "end": 938.199,
    "text": "Now, this is one of the most common neurons to see when you're starting out in spiking neural networks.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 938.279,
    "end": 948.072,
    "text": "It is the idea that you have an internal voltage that slowly builds up, passes over a threshold, and then depolarizes in the midst of spike.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 948.372,
    "end": 956.565,
    "text": " And it does that by taking in current and V equals IR, and you do current times resistance, and you get a voltage, and it slowly builds up your voltage.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 957.567,
    "end": 965.099,
    "text": "So inside of your LIF neuron, or our leaky integrate and fire neuron, we have a couple of fixed parameters.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 965.68,
    "end": 971.169,
    "text": "Now, for us, fixed parameters are values that don't change during runtime.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 971.55,
    "end": 974.835,
    "text": "These are the static parts of your model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 974.815,
    "end": 979.18,
    "text": " But they're not fixed across all of your components.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 979.66,
    "end": 989.371,
    "text": "And what I mean by that is that I can have a leaky integrate and fire neuron with a voltage threshold of 1, and I can have another leaky integrate and fire neuron with a voltage threshold of 2.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 989.672,
    "end": 992.134,
    "text": "And you can build both of those.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 992.214,
    "end": 993.336,
    "text": "It works perfectly fine.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 993.656,
    "end": 1004.468,
    "text": "But the 1 and the 2 can't change while it's running because just of the way that it all works out internally with the compiling.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1004.448,
    "end": 1006.912,
    "text": " But for instance, here we have some fixed parameters.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1007.052,
    "end": 1008.093,
    "text": "We have neuronal units.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1008.654,
    "end": 1015.705,
    "text": "So when we talk about having a neuron or a component that is a neuron, it is more in reality a layer of neurons.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1015.965,
    "end": 1025.68,
    "text": "So for us, neuronal units is just the number of leaky integrate and fire neurons that exist inside this little component or cluster of neurons.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1025.66,
    "end": 1032.844,
    "text": " They all have a voltage threshold, and then we have tau m, rm, a vreset, and a vrest.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1032.884,
    "end": 1038.623,
    "text": "These are just all of the various parameters that you need to get a Leaky Integrated Fire Neuron running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1039.801,
    "end": 1043.33,
    "text": " And then below all of these, we have the compartment values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1043.41,
    "end": 1047.801,
    "text": "Now this is where you actually store the stateful part of your component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1047.841,
    "end": 1050.166,
    "text": "These are the values that change over time.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1050.587,
    "end": 1056.983,
    "text": "These are the values that we are transmitting from component to component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1056.963,
    "end": 1063.13,
    "text": " And so, for instance, here in our leaky integrate and fire neuron on the left, we can see that we have current coming in on the left.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1063.611,
    "end": 1069.518,
    "text": "We have this voltage value that kind of floats around in the middle because we're not expecting to have it as an output.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1070.479,
    "end": 1073.903,
    "text": "We have our output spike, which is just whether or not our voltage did spike.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1074.063,
    "end": 1081.992,
    "text": "And then we have time of last spike, which is just, well, the last time step that it spiked because there's multiple learning rules that require that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1081.972,
    "end": 1101.234,
    "text": " And so what we can see here is that if you can kind of think about the various parts of your model that you like to build, the neurons, the weight matrices, any other auxiliary system that you have in your model, if you can kind of fit it to a component, it's incredibly straightforward to get these to be built.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1101.735,
    "end": 1107.962,
    "text": "And then once you have them in component form, you can then plug them into any part of any model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1110.608,
    "end": 1115.277,
    "text": " So then what we're going to talk about here is we're going to talk about cables.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1115.497,
    "end": 1117.681,
    "text": "Now cables can be a little bit confusing at first.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1118.603,
    "end": 1123.212,
    "text": "So cables are what actually connect our components together.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1123.873,
    "end": 1133.511,
    "text": "So if we look at the top, we have component A and we have component B. And basically what this is, is that, and then they're connected with the cable.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1133.862,
    "end": 1148.605,
    "text": " And so we have our output compartment, which is the brown box that's on the right side of component A. And then we have our input compartment that's on the left side of the compartments box for component B. And then they're connected with this cable.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1149.046,
    "end": 1159.262,
    "text": "And so the idea is that data will flow from the output compartment of component A and get copied into the input compartment of component B.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1159.242,
    "end": 1168.037,
    "text": " And so this is basically how we get data to move from one to the other without necessarily having it know where it comes from.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1168.692,
    "end": 1181.553,
    "text": " So this was one of the main things that we wanted to make sure you was a founding principle of kind of what we were going for when we looked at the component and cables is that a component downstream.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1181.613,
    "end": 1190.667,
    "text": "So in this case, component B, it doesn't necessarily need to know and it shouldn't know where the incoming values are coming from.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1190.647,
    "end": 1193.273,
    "text": " So these cables are all one-way cables.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1193.313,
    "end": 1195.619,
    "text": "You cannot go backwards up the cable.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1196.722,
    "end": 1202.696,
    "text": "Basically, the components are just told, hey, this is the value that has been transmitted along this line.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1203.297,
    "end": 1205.543,
    "text": "And thus, this is the value that you have.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1205.623,
    "end": 1207.828,
    "text": "And you don't get to know where it comes from.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1207.808,
    "end": 1219.307,
    "text": " Now, what this does mean, though, is that sometimes what we'll have is InSight will have a component that knows that it's getting values from two places.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1219.707,
    "end": 1232.027,
    "text": "For instance, in the bottom explanation, we have component X and component Y. Each one of them have an output, but we're trying to put both of their outputs into the same compartment in component Z.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1232.311,
    "end": 1251.687,
    "text": " Now, if we were to do this without the summation that you can see, what would happen is the value from component X would come down, and it would get put into the compartment of component Z. And then the output of component Y would come down, and it would also get put into the compartment of component Z, effectively overriding component X.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1251.667,
    "end": 1261.147,
    "text": " And so, but what we do have is we have this concept of operators, which are just simple transformations that can be done to the data that are being transmitted along cables.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1261.287,
    "end": 1262.43,
    "text": "So in this case, summation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1263.291,
    "end": 1271.228,
    "text": "This is, you just have two pieces of data that all flow into this little summation operation that just flows into your output compartment.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1271.208,
    "end": 1300.675,
    "text": " um it's important to note that the value like the intermediate values inside of things like summation are never stored anywhere they are purely just an inline operation that happens yeah so that's all you actually need to build a model right is you have components and you wire them together that pretty much talks about everything you need to know for the physical parts of your model and how they talk to one another",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1300.857,
    "end": 1302.982,
    "text": " But that doesn't get us anywhere.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1303.142,
    "end": 1316.453,
    "text": "If I just hand you a model that has a bunch of wires around it and a bunch of values in it, but I don't tell you how to actually change any of the values, that's fairly useless.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1316.433,
    "end": 1339.116,
    "text": " um in addition to that it's not a particularly great you know just research project we all care about how do these models adapt over time we all care about that whole temporal and evolving nature of everything so with that in mind we want to talk now about how do we actually transition a model and uh what goes into that so",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1339.332,
    "end": 1344.578,
    "text": " Four, transitioning of models across, so we have state transitions across just a component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1345.218,
    "end": 1355.229,
    "text": "So if we just zoom in on what a component is, we have component A here, where we have our fixed parameters across the top here, you can see we have four fixed parameters.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1355.93,
    "end": 1360.094,
    "text": "And then we have two different state transitions that we're going to allow.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1360.434,
    "end": 1362.977,
    "text": "We have the reset transition,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1363.193,
    "end": 1365.177,
    "text": " and then we have the advanced transition.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1365.878,
    "end": 1379.363,
    "text": "And so in this example here, we can see that the reset transition takes two fixed parameters in and sets values via the dashed lines that we see, sets values into all four compartments.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1380.406,
    "end": 1388.541,
    "text": " Or we have the advanced transition that takes in, again, two fixed parameters, but different fixed parameters than reset.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1389.322,
    "end": 1392.668,
    "text": "And then it also uses three of the compartment values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1392.728,
    "end": 1400.322,
    "text": "We can see the input compartment value on the far left and the two floating compartment values with their solid lines that go into advanced.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1400.302,
    "end": 1403.646,
    "text": " And basically, this is we have written an advance function.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1403.726,
    "end": 1412.417,
    "text": "So basically, this is just we're doing a state transition called advance that requires two fixed parameters and three dynamically changing compartment values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1413.418,
    "end": 1418.805,
    "text": "Advance internally does some transformation of this data, and it outputs two values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1419.405,
    "end": 1428.857,
    "text": "One of those values gets looped back into the floating compartment that we see on the right, and the other one gets sent to the output compartment that's also on the far right.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1429.563,
    "end": 1433.713,
    "text": " And that's really all these state transitions across components are.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1433.813,
    "end": 1444.939,
    "text": "When we write them internally, and we'll look at some of what this looks like in a little bit, what we'll notice is that each one of these",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1444.919,
    "end": 1449.005,
    "text": " transitions is relatively simple, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1449.085,
    "end": 1454.153,
    "text": "It's just you just take values in, do try to do something to them and send values out.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1454.754,
    "end": 1471.5,
    "text": "And that is really, again, you'll see this throughout all of NGC learn, that is basically how it all works under the hood is that we just we take values in, we transform them, we send values out, and we don't necessarily need to know where those values are going, or where the input values came from, that we just know how to move them around.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1473.961,
    "end": 1477.672,
    "text": " And it's important to note here again that the parameter parts are fixed.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1478.395,
    "end": 1480.682,
    "text": "It's only the compartment values that we can change.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1480.742,
    "end": 1486.62,
    "text": "So you couldn't see advanced draw a dotted arrow up to one of the fixed parameters because they are once again fixed.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1489.148,
    "end": 1496.706,
    "text": " Now that we know how to do a transition across one component, what if we wanted to do a transition across two components?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1496.887,
    "end": 1499.974,
    "text": "And I'm aware that the parameter little circles are missing their arrows.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1500.114,
    "end": 1506.55,
    "text": "The images got significantly too cluttered when I tried to draw those arrows in as the diagrams get smaller.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1506.682,
    "end": 1518.784,
    "text": " But what we'll notice here is that we now can take a group of components and we can talk about taking the advanced action across a group of components.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1519.686,
    "end": 1527.981,
    "text": "And so what this basically does is we will do the advanced operation or transition on a long component day.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1528.062,
    "end": 1543.827,
    "text": " We will then transmit all of the data along all of the cables going between component A and component B. So whatever that outputted value of advanced state was would get sent into its output compartment and then sent to component B.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1544.11,
    "end": 1551.867,
    "text": " And then component B would once again also do its advanced transition in which it would take on all of its values and compute its own output value.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1552.568,
    "end": 1555.033,
    "text": "And you could chain these together at infinite.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1555.053,
    "end": 1559.503,
    "text": "There's no limit to how many of these you can chain together.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1559.483,
    "end": 1567.191,
    "text": " I will say that eventually it's probably, you know, might want to look at making your model a little bit smaller, but there's no actual limit to it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1567.952,
    "end": 1570.815,
    "text": "There's also the limit to how complex you make these.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1571.496,
    "end": 1577.002,
    "text": "There's nothing that says that you can't have recurrent connections in your cables.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1577.703,
    "end": 1582.328,
    "text": "There's also nothing that says that outputs or inputs need to actually have values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1582.388,
    "end": 1588.815,
    "text": "You can clamp values to them, which is basically the process of we just set the value and then just let it go.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1589.909,
    "end": 1598.045,
    "text": " But there is one thing to note, especially when talking about recurrent things and recurrent connections between neurons and groups of neurons.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1598.866,
    "end": 1606.12,
    "text": "And what that is, is that the order of operations in a state transition is deterministic.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1606.14,
    "end": 1611.31,
    "text": "And thus, it's also something that each one only goes once.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1611.29,
    "end": 1628.425,
    "text": " So if you have component A wire into component B and then component B wire into component A, it will still only execute a transition across A and then across B, or across B and then across A. It will never actually loop itself.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1629.748,
    "end": 1631.712,
    "text": "It will always do one and then the other.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1633.328,
    "end": 1639.215,
    "text": " And so now all of this really, really works itself down to compiling.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1639.895,
    "end": 1647.163,
    "text": "So the compiler of NGC Learn is not actually found in the main repo of NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1647.604,
    "end": 1655.893,
    "text": "So NGC Learn is built on top of what is known as NGC Stimulation Library, or NGC Simlib for short.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1655.873,
    "end": 1666.229,
    "text": " And that is where all of the, I don't want to say messy or ugly, but that is where all of this code behind the scenes that are making everything work exists.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1667.07,
    "end": 1673.701,
    "text": "And that is all of that library can be found in that little tiny compiling arrow that we see down here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1675.564,
    "end": 1682.134,
    "text": "Now, for the way compiling works, though, is we have our state transition.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1682.317,
    "end": 1689.27,
    "text": " We have the state transition that we talked about in the previous slide, and we want to turn it into a pure operation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1689.29,
    "end": 1701.793,
    "text": "And what we mean by that is that the same inputs will always produce the same outputs, and no value outside of the outputs of the method are ever modified.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1702.33,
    "end": 1713.312,
    "text": " And so how we can do that is with the way that the transitions all work is we can just pass in the entire state of our model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1713.973,
    "end": 1721.368,
    "text": "And then based on the transitions inside each component, they know what compartments they have to be looking at.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1721.348,
    "end": 1727.499,
    "text": " And so they will look at those compartments and they will then update and modify the values in the model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1727.72,
    "end": 1735.594,
    "text": "And then it'll move from that one into the next one and from the next one into the next one and so on and so forth until it's actually done.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1736.198,
    "end": 1738.962,
    "text": " And so these produce pure methods.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1739.082,
    "end": 1749.316,
    "text": "And if we think back to what I talked about with JAX all along at the beginning, that means that we can pass these compiled methods into JAX's just-in-time compilation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1750.077,
    "end": 1764.096,
    "text": "And so what this gives us is this allows us to basically call, advance, or reset, or any transition function that's defined across all of our components effectively at once in one operation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1764.16,
    "end": 1766.222,
    "text": " Here we have it as advanced the model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1767.907,
    "end": 1772.754,
    "text": " And so this is truly where the speedup of NGC Learn comes from.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1772.814,
    "end": 1794.724,
    "text": "Even if you do not use JAX or if you don't use JAX's just-in-time compilation because you're debugging, it is still a fairly large speedup just to go from Python being written the way it is into compiling into just running the compiled operation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1794.704,
    "end": 1811.245,
    "text": " um so if you really want to look into and care about how are we getting the speed that we're getting look into the compilers and once again the compilers are actually located in ngc learn ngc simlib which still can be found through all of the knack labs github pages it is also public",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1814.6,
    "end": 1817.226,
    "text": " Now, what does this actually look like in code?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1818.048,
    "end": 1831.36,
    "text": "And so I wanted to take a brief look because pretty pictures are really a tool that helps us understand the thought process behind the models, and they understand how the models actually work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1831.34,
    "end": 1835.069,
    "text": " But sometimes people will show us really pretty pictures.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1835.249,
    "end": 1843.208,
    "text": "And then when you go to actually implement it in code, it looks a whole lot different or things just don't quite or not quite as pretty of a picture.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1843.81,
    "end": 1849.062,
    "text": "So we do have a short section here where we're going to talk about all of the different code that we do have.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1856.585,
    "end": 1860.211,
    "text": " Here's an example of a component in NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1860.552,
    "end": 1863.958,
    "text": "Specifically, we are going to be looking at the dense synapse.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1864.519,
    "end": 1880.888,
    "text": "Now, all a dense synapse is, is it is a weight matrix that has both a resistance scale value on it, so just a constant multiplication scale factor being applied to everything, as well as a bias term that is added to everything.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1882.69,
    "end": 1886.233,
    "text": " Now, so here we have some compartment values on the left.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1886.394,
    "end": 1890.958,
    "text": "So as you can see, defining compartments is incredibly easy.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1891.018,
    "end": 1893.621,
    "text": "So now everything right here where you see self.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1893.721,
    "end": 1896.343,
    "text": "is all inside of the constructor of our object.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1897.825,
    "end": 1902.65,
    "text": "So here we have self.inputs is just compartment and then some values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1902.73,
    "end": 1903.931,
    "text": "For us, that's the prevals.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1903.951,
    "end": 1905.152,
    "text": "So that's whatever we want.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1905.272,
    "end": 1908.175,
    "text": "It's a matrix of all zeros of the correct shape.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1908.543,
    "end": 1914.197,
    "text": " And then we have self.outputs, which is just, again, another compartment defined with postvals.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1915.139,
    "end": 1916.061,
    "text": "And then we have our weights.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1916.121,
    "end": 1920.713,
    "text": "Now, weights are just our weight matrix, which is defined previously in the function.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1921.595,
    "end": 1925.404,
    "text": "But it is just, again, simply compartment value.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1925.384,
    "end": 1953.113,
    "text": " and what this does a bunch of stuff under the hood but this basically actually associates so when you build one of these objects when you build a dense synapse and it construct it this will actually build a bunch of compart this will build three compartments under the hood and basically register them inside the dense synapse and link everything together correctly so that way we know that they exist and we can wire into them and it does a little bit more than just",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1953.093,
    "end": 1957.94,
    "text": " Python knowing that the object has these fields in it, they exist, and they have their own set of properties.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1958.822,
    "end": 1970.439,
    "text": "And then we have our fixed parameters, which if you look, look exactly like just values that exist on a class, right, we have self dot shape, which and self dot our scale, which is just a resistance scaling.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1970.9,
    "end": 1974.966,
    "text": "And I'm sure everybody here who's worked with Python is very familiar with what that looks like.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1976.313,
    "end": 1979.9,
    "text": " And so finally we have defining our state transitions.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1980.661,
    "end": 1982.645,
    "text": "Now there's a couple things to note about this.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1982.665,
    "end": 1986.392,
    "text": "We'll notice that our state transition definitions are static methods.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1987.294,
    "end": 1989.979,
    "text": "And what they are really is they're just method.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1990.159,
    "end": 1994.367,
    "text": "These have to be pure methods to define our state transitions.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1995.489,
    "end": 1998.034,
    "text": "So here we have advanced state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 1998.014,
    "end": 2010.551,
    "text": " And we want to still be able to use our scale inputs, weights and biases inside of advanced state and have them all correlate to the values that exist inside of our component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2011.131,
    "end": 2015.357,
    "text": "But due to the way that the compiler works is we still need this to all be a pure method.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2015.757,
    "end": 2016.839,
    "text": "So how do we combat that?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2017.199,
    "end": 2023.768,
    "text": "Well, we come by that by just doing effectively pattern matching, where as long as your names or",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2023.748,
    "end": 2044.896,
    "text": " the various inputs, so our scale inputs, weights, biases, whatever, as long as those values are found inside of the component that this transition is acting on, it will automatically grab those values out of those components when it's doing the transition.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2045.888,
    "end": 2052.877,
    "text": " And so here we can see this is a pretty straightforward matrix multiplication with a scaling and a bias term to compute outputs.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2053.438,
    "end": 2058.965,
    "text": "And we'll notice that once again, outputs is something that is keyworded on the component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2059.686,
    "end": 2069.799,
    "text": "And because when it's done resolving its transition, it needs to know where to put the output value, or in this case, outputs of the state transition, like what values are changed.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2070.721,
    "end": 2074.866,
    "text": "And so it knows how to put outputs back into self.outputs.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2076.128,
    "end": 2097.31,
    "text": " And so this is kind of the key to how all of NGC learns compilation and just plug and play models work with these state transitions is that you can define these methods that can pull in values from the components that they are being applied to without actually having to have an instance of the component itself.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2097.29,
    "end": 2106.38,
    "text": " Now there's one other aspect of these that's not actually shown in this example, and that is parameters at runtime.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2106.721,
    "end": 2112.867,
    "text": "So for instance, let's just say that we wanted to add the current time to our output.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2112.928,
    "end": 2115.651,
    "text": "I don't know why we would want to be doing that, but let's say we wanted to.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2116.151,
    "end": 2124.04,
    "text": "So if inside advanced state, inside the parameter list, we had another value, say time or t,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2124.02,
    "end": 2139.784,
    "text": " and t doesn't exist on the component that this transition is being applied to what we'll see with this then is that late it will and we'll see this a little bit later in an example what it will want to do is it will say hey",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2139.764,
    "end": 2145.955,
    "text": " I can found all of these values, but this specific value T is not found in this component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2146.516,
    "end": 2151.325,
    "text": "You need to give me T for whatever I need to do for this state transition.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2152.066,
    "end": 2160.642,
    "text": "And so this is how you can get runtime parameters to be passed into your state transitions and modify them that way.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2161.955,
    "end": 2173.18,
    "text": " So now that we have a component and we kind of figured out how to define a component, and I should note that we can define as many of these state transition as we want because they're not actually bound to any specific component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2174.797,
    "end": 2175.878,
    "text": " We need to do something.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2176.479,
    "end": 2179.443,
    "text": "So how do we actually define these components in a model?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2179.543,
    "end": 2182.187,
    "text": "Because generally, we want multiple of them in a model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2182.307,
    "end": 2185.411,
    "text": "A component as one piece of a model is not very useful.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2186.232,
    "end": 2189.176,
    "text": "So in order to do that, we use with blocks in Python.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2189.577,
    "end": 2191.039,
    "text": "For us, we call them contexts.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2191.9,
    "end": 2194.584,
    "text": "So we do a with a context, and then we give our context a name.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2194.684,
    "end": 2197.007,
    "text": "In this case, we've named it model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2196.987,
    "end": 2200.372,
    "text": " And so what we have here is this is a width block.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2201.033,
    "end": 2214.674,
    "text": "And so what this does is this is just saying everywhere, every time we define a new NGC learn component or initialize a new NGC learn component inside of this width block, it will automatically be added to the model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2215.195,
    "end": 2225.07,
    "text": "So there's no model.register various built things, no model.components list that you need to make sure is up to date, nothing like that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2225.624,
    "end": 2232.312,
    "text": " If we call Hebbian synapse here inside of this width block, the Hebbian synapse exists on your model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2233.253,
    "end": 2238.66,
    "text": "Now, what this does mean, though, is that the names of all of our synapses are required to be unique.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2239.821,
    "end": 2247.611,
    "text": "But I feel like that shouldn't be super challenging because in our models, just for clarity and human readability, we try not to name things the same.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2248.071,
    "end": 2253.538,
    "text": "For instance, it wouldn't really make sense if I have three different parts of my model that I've named Z1.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2254.447,
    "end": 2260.047,
    "text": " So with that, we can see that we can define components like this.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2260.409,
    "end": 2266.009,
    "text": "But what if we have complex models in which we have one overarching model",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2266.158,
    "end": 2270.842,
    "text": " with sub models that run maybe at different times or at a different frequency.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2271.343,
    "end": 2278.349,
    "text": "And we want to be able to have those still be a part of this bigger model, the bigger scope of the model, but run on their own.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2278.909,
    "end": 2281.492,
    "text": "Well, luckily for you, we can do that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2281.612,
    "end": 2285.555,
    "text": "So components are, sorry, contexts are fully nestable.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2285.996,
    "end": 2288.198,
    "text": "You can nest them as deep as you want.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2288.498,
    "end": 2296.165,
    "text": "And when you actually look at the structure internally, you'll notice that it follows very similar to a file structure where everything just ends up with",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2296.145,
    "end": 2298.128,
    "text": " paths based on context name.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2299.551,
    "end": 2302.837,
    "text": "And so you can nest these as deep as you want.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2303.077,
    "end": 2312.213,
    "text": "Generally, in my own personal use, I've never found really a need to go more than an extra layer deep, but there's nothing that stops you from going three, four, or five layers deep.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2312.53,
    "end": 2317.839,
    "text": " And so as we can see here, though, it's incredibly straightforward to actually build the model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2318.38,
    "end": 2321.225,
    "text": "This here is built a model with two Hevian synapses in it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2321.585,
    "end": 2323.589,
    "text": "Now, I'll give you a brief note.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2323.649,
    "end": 2327.936,
    "text": "There's a bunch of other components that are defined below this to get the model to do something.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2328.918,
    "end": 2336.631,
    "text": "But those all look pretty much exactly the same as this, just with different objects and different components being built at every line.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2338.231,
    "end": 2340.762,
    "text": " So now we have our components.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2341.224,
    "end": 2344.478,
    "text": "We have our components defined inside of our context.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2344.694,
    "end": 2345.956,
    "text": " but they don't do anything.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2345.996,
    "end": 2347.678,
    "text": "They don't interact with one another.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2347.718,
    "end": 2353.386,
    "text": "If we think back to the way that we get components to interact with one another, we have to wire them between each other, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2353.707,
    "end": 2358.854,
    "text": "We have to get data to flow from a Hebbian synapse into an LIF cell.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2358.894,
    "end": 2365.964,
    "text": "We have to get it to flow from an input Poisson neuron into a weight matrix into an LIF cell.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2366.264,
    "end": 2367.886,
    "text": "We have to get all of this data to flow.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2367.906,
    "end": 2368.808,
    "text": "So we do that with cables.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2369.529,
    "end": 2374.195,
    "text": "And luckily, defining cables is incredibly straightforward.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2374.175,
    "end": 2399.507,
    "text": " So we have overridden the left-hand bit shift operator, basically, to say, hey, if we're going to read the top here, so unfortunately, we end up reading right to left with this, is we're going to take the z0's outputs, whatever's in the outputs of z0, and we want to wire it directly into w1, which is one of our weight matrices inputs, or INP.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2399.487,
    "end": 2402.715,
    "text": " And we just write that line, and that cable has been connected.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2402.835,
    "end": 2404.098,
    "text": "Everything under the hood is done.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2406.143,
    "end": 2412.317,
    "text": "And then I should mention, all of this is still inside the width block found that builds the context of our model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2412.718,
    "end": 2417.85,
    "text": "Any time we're dealing with building parts of our model, it is all done inside of the width block.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2418.893,
    "end": 2427.086,
    "text": " And then on the next line, we can take Z1I's spikes and we can output, we can send that into W1IE's inputs.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2427.807,
    "end": 2436.261,
    "text": "And we'll notice that this pattern of just taking an output and wiring it into an input is pretty easy to follow.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2436.241,
    "end": 2452.039,
    "text": " And so if you build your component with the inputs that you're expecting and the outputs you're expecting, and you make it really clear to yourself what you need to do with that, when it comes to wiring up your model, it should be incredibly straightforward.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2453.167,
    "end": 2461.499,
    "text": " But if we think also back to the wiring example, there was a point where I put two outputs and wired them into one input.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2461.519,
    "end": 2467.569,
    "text": "So we can see that actually happening inside the second part of this, where we connect two compartments into a single destination.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2468.23,
    "end": 2472.576,
    "text": "So we can do this with, for us, the operation summation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2472.556,
    "end": 2477.584,
    "text": " And so what this will do is this will add together any number of compartments that we put here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2477.945,
    "end": 2479.808,
    "text": "So in here, we just have it as two.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2480.289,
    "end": 2484.716,
    "text": "But if we had four compartments that we wanted to wire into there, it would be easy.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2485.217,
    "end": 2494.733,
    "text": "Now, one of the advantages of doing this instead of just having two input compartments inside of Z1E is this allows for a variable number of connections.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2495.253,
    "end": 2508.63,
    "text": " So if inside of one model that you define, you need Z1E to have three inputs or three values being added together, or inside of a different model that you're defining, you have Z1E needing to have seven inputs going into it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2509.11,
    "end": 2511.053,
    "text": "You don't have to build new components.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2511.153,
    "end": 2513.636,
    "text": "There's no additional logic that you have to do.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2513.996,
    "end": 2519.303,
    "text": "You just add them to this list of parameters that are being passed in and you're done.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2519.738,
    "end": 2524.744,
    "text": " And another thing to note is that these parameter chains are entirely nestable as well.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2525.124,
    "end": 2538.039,
    "text": "So for instance, if we wanted to invert or negate for W one IEs output value, so it would effectively be W one out minus W one IE outputs.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2538.92,
    "end": 2541.803,
    "text": "You just put in the gate around it and you can just nest them down.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2541.903,
    "end": 2549.492,
    "text": "So if you want it to sum a bunch of things together and then negate it, you can, if you want to negate two of them and add them, it all works.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2551.16,
    "end": 2554.845,
    "text": " And I should also again mention, it does not actually store these values anywhere.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2554.905,
    "end": 2560.492,
    "text": "So they are never actually inspectable outside of just looking at the value of the compartment.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2563.997,
    "end": 2565.379,
    "text": "So compiling.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2565.96,
    "end": 2569.945,
    "text": "So compiling an NGC learn, we didn't want it to be a painful process.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2570.105,
    "end": 2579.918,
    "text": "We didn't want it to be something that you had to make sure that everything was like touched the specific right way where you're holding it in with all your fingers and then it happens to work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2580.607,
    "end": 2584.935,
    "text": " So for compiling, it's just a list of components and a key.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2584.955,
    "end": 2594.734,
    "text": "So if we think back to the example at the beginning where we had advanced state as the name of the transition method that we have,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2596.25,
    "end": 2597.172,
    "text": " That's all we need.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2597.272,
    "end": 2598.835,
    "text": "It's that name, advanced state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2599.356,
    "end": 2604.987,
    "text": "And so what this one I'll do in this line of code here is we'll do model.compileByKey.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2605.307,
    "end": 2607.612,
    "text": "And so this is on your context model, the whole model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2608.514,
    "end": 2613.223,
    "text": "We give it a bunch of components, w1, w1ie, and so on and so forth.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2613.323,
    "end": 2616.469,
    "text": "And then we tell it, compile advanced state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2616.702,
    "end": 2635.757,
    "text": " And so what this will do is it will go through and this just, if we think back to the thing where like composition of functions of everything together, it will go W one goes through its advanced state and then W one IE goes through its advanced state and then W one EI goes through its advanced state and it goes down the list.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2635.737,
    "end": 2640.843,
    "text": " Now, obviously, if we reverse this whole list, that will change the output.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2641.384,
    "end": 2648.713,
    "text": "It won't change what it's really doing, but the order that the advances happen in does matter, and it is dependent on the order that we find here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2650.935,
    "end": 2655.721,
    "text": "And the other advantage is that we can compile many of these.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2656.322,
    "end": 2662.95,
    "text": "So in this case, we can see that we go through all two layers of our model here and all of our neurons in our model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2662.99,
    "end": 2664.732,
    "text": "Everything that's a Z is a neuron.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2665.792,
    "end": 2668.756,
    "text": " But let's just say we only wanted to go through the first chunk.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2669.336,
    "end": 2675.764,
    "text": "We only wanted to do z0, and then we just wanted w1, and then we just wanted z1e.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2676.746,
    "end": 2679.229,
    "text": "That's all we wanted to compute.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2679.689,
    "end": 2686.378,
    "text": "Well, all we would have to do is we would just have to put those three values in a compile argument, and it would just go.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2686.818,
    "end": 2690.803,
    "text": "We don't have to compile every component in our model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2690.783,
    "end": 2696.529,
    "text": " And what this means is that we don't actually have to have every transition defined for every component.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2697.551,
    "end": 2702.937,
    "text": "For example, when we're updating weight matrices, we tend to call it evolving them, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2702.977,
    "end": 2704.458,
    "text": "They're changing in time, they're evolving.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2706.34,
    "end": 2708.002,
    "text": "We don't evolve neurons.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2708.242,
    "end": 2709.644,
    "text": "It's not something that we do.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2709.724,
    "end": 2714.79,
    "text": "It's not something that doesn't make sense in the context of most models.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2715.631,
    "end": 2720.436,
    "text": "So from that standpoint, we would only call evolve on the weights.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2721.293,
    "end": 2730.009,
    "text": " Or we might only call reset on the neurons if our weights never have anything static in them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2730.31,
    "end": 2732.694,
    "text": "I mean, a variable in them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2732.714,
    "end": 2740.669,
    "text": "There's a bunch of different things where we can pick and choose which components and the order of the components that these operations happen in.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2741.425,
    "end": 2756.447,
    "text": " And so in this, again, just to fully explain, we do have two different output values coming out of this compiled key, this model.compileByKey, as well as one hidden aspect that comes out of this model.compileByKey.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2756.427,
    "end": 2758.37,
    "text": " But first, the outputs.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2758.531,
    "end": 2759.613,
    "text": "We have this advance.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2760.114,
    "end": 2763.68,
    "text": "Now, advance here is the pure function returned by the compiler.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2764.541,
    "end": 2772.816,
    "text": "So this is the function that takes in the model state and all of the arguments it's expecting and will return to you the final model state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2774.365,
    "end": 2777.669,
    "text": " ADV args, these are all the arguments it's expecting.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2777.989,
    "end": 2792.067,
    "text": "So as it goes through and it compiles down W1, W1 IE, W1 EI, and so on and so forth, it's slowly collecting a list of all of the keyword arguments that it needs to actually compute this transition.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2792.668,
    "end": 2802.6,
    "text": "So if W1 requires T and Z0 requires T and DT and Z2E requires a J,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2802.935,
    "end": 2816.652,
    "text": " what that means is that it would end up you would have a list that is we need T, D, T and J. If two things require the same parameter, it does assume that they're the same parameter aside, let's say yeah, like the same keyword argument.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2817.513,
    "end": 2822.8,
    "text": "So if you have T used across all of your components, you only have to pass in T once.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2823.792,
    "end": 2826.815,
    "text": " So that's everything that's visibly returned by this function.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2827.316,
    "end": 2838.607,
    "text": "In addition, what this function also does is we can now call model.advancedState whatever this compile key here or an optional name flag that's not currently being used.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2839.428,
    "end": 2845.174,
    "text": "We can take that advanced state and we can do model.advancedState and it's the same as calling model.advanced.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2846.376,
    "end": 2851.461,
    "text": "And this just has its benefits of you don't have to necessarily keep track of the actual advanced function.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2851.521,
    "end": 2853.563,
    "text": "If you have a bunch of them, you can just name them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2855.146,
    "end": 2858.71,
    "text": " So that's everything on actually how we get the compilation to run.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2861.66,
    "end": 2866.464,
    "text": " What if we want to perform many of these state transitions in a row?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2867.145,
    "end": 2876.574,
    "text": "And what I mean by that is if we think about a spiking neural network, we have a forward pass where we take one look at an image.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2877.354,
    "end": 2888.004,
    "text": "But also in spiking neural networks, usually we have to do many forward passes up our image before we say we have an output.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2888.024,
    "end": 2890.266,
    "text": "And so when we look at that,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2891.039,
    "end": 2896.105,
    "text": " we're doing like 200 forward passes before we ever actually care what the output value is.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2897.306,
    "end": 2906.417,
    "text": "So because of that, we don't want to just do a state transition from T0 to T1, get T1, plug it back in over here to get T2.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2907.118,
    "end": 2914.026,
    "text": "What I want to do is I want to plug in T0 here and then do T1, T2 until I get to T200.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2914.799,
    "end": 2916.481,
    "text": " And so for that, we have scanners.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2916.982,
    "end": 2931.624,
    "text": "Now, the ngc learn scanner is built on top of Jax's scan function, which is effectively a method of doing a for loop inside of their compiled, inside of their just-in-time operations.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2932.745,
    "end": 2935.77,
    "text": "And the way this works is we have our scanner.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2936.972,
    "end": 2940.857,
    "text": "We have an observe function for us, but this is just whatever you want to name it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2940.877,
    "end": 2943.962,
    "text": "There's no actual hard, fast rules on what this needs to be called.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2944.735,
    "end": 2948.434,
    "text": " We have compartment values or the model state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2948.752,
    "end": 2950.494,
    "text": " And then we have args.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2950.514,
    "end": 2958.386,
    "text": "And so what the arguments are is these are the keyword arguments for that specific loop in time, so t0.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2958.946,
    "end": 2963.993,
    "text": "So at t0, we would have arg0, t is equal to 0, and dt is equal to, say, 1.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2964.755,
    "end": 2973.166,
    "text": "At t1, or the second loop through this, arg0 would be 1, and so on and so forth.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2973.267,
    "end": 2977.172,
    "text": "And we define that down here in loop args, and we'll talk about that in a moment.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2977.152,
    "end": 2983.8,
    "text": " But then we'll notice that inside of this, we're doing two actual transitions for every loop.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2984.301,
    "end": 2990.128,
    "text": "We go through and we advance all of our state forward, and then we do an evolve step over our model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2990.648,
    "end": 2999.639,
    "text": "And this was done on an STDP, or spike timing dependent plasticity trained model, which means that we do an evolve step at every single forward pass.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 2999.839,
    "end": 3004.645,
    "text": "We do one for every forward pass over an image, we do an evolve step over the image.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3004.625,
    "end": 3015.024,
    "text": " And we'll notice that this gets a compartment values because this is a pure function that takes in the component, the model state, and returns the new model state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3015.906,
    "end": 3022.979,
    "text": "Evolve is another compiled method that takes in the current state and returns the final state.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3023.761,
    "end": 3027.207,
    "text": "And then we just return the final state at the end of that loop.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3027.457,
    "end": 3032.243,
    "text": " and it just loops, and this will loop over for however long you give it arguments for.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3032.704,
    "end": 3036.809,
    "text": "So if we give it 200 loops worth of arguments, it will loop 200 times.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3038.331,
    "end": 3042.377,
    "text": "And this part right here at the end is just how you can actually get an output out.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3042.397,
    "end": 3053.852,
    "text": "So this will return the compartment value located, the raw spike output of Z1E at every time step will be what underscore S is equal to.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3054.71,
    "end": 3057.936,
    "text": " And finally, to call it, we just call observe.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3058.016,
    "end": 3060.48,
    "text": "It's whatever the name of this function is.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3060.721,
    "end": 3064.007,
    "text": "So if you named this foo, it would just be model.foo.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3064.347,
    "end": 3066.511,
    "text": "We tried to use slightly more of that useful name.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3066.551,
    "end": 3069.036,
    "text": "So here we have observe and here we have observe.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3069.697,
    "end": 3072.702,
    "text": "And then the loop arguments is a 2D matrix.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3072.682,
    "end": 3081.222,
    "text": " where every row is just the list of arguments that are found here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3081.282,
    "end": 3085.813,
    "text": "So this is a 200 by 2 matrix, basically.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3088.072,
    "end": 3089.975,
    "text": " And that gets us our state transitions.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3090.015,
    "end": 3097.588,
    "text": "And so this is how we can look at a model many, many... This is how we can transition over many, many, many steps without ever having to come back to Python.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3098.609,
    "end": 3106.502,
    "text": "And since this is fully... So scanners automatically put things inside of just-in-time compilation, just for the way that they work internally for JAX.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3106.482,
    "end": 3127.027,
    "text": " But what this means is that we can go from an incredibly slow forward pass over one image to a compiled forward pass over one image to a just-in-time compiled pass over just one pass over an image to a just-in-time compiled 200 passes over an image and just do that in a single function that we have defined.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3127.068,
    "end": 3129.891,
    "text": "This is where all the speed comes from.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3131.845,
    "end": 3134.41,
    "text": " Finally, I just wanna mention monitors.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3135.472,
    "end": 3145.29,
    "text": "So what a monitor is, is sometimes we have a desire to actually look at, well, the internal state of our model as it's running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3146.132,
    "end": 3152.183,
    "text": "And when we're doing things with just-in-time compilation, we never get access to those internal states.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3152.163,
    "end": 3158.131,
    "text": " because they all exist in C and they never exist in Python, and we can't look at them very easily.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3158.712,
    "end": 3163.479,
    "text": "Again, due to the way that just-in-time compilation works, you can't put print statements in compiled code.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3163.499,
    "end": 3164.2,
    "text": "It does not work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3165.081,
    "end": 3167.985,
    "text": "So what this means is that we have monitors.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3168.505,
    "end": 3173.552,
    "text": "And so the way this monitor works is it's just a component like any other component in NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3173.633,
    "end": 3176.537,
    "text": "Admittedly, it does work differently under the hood, but that's fine.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3177.458,
    "end": 3181.984,
    "text": "What we have is we have a monitor by name, and then we have this default window length.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3182.167,
    "end": 3187.435,
    "text": " What this is doing is this will keep a rolling window of the last n values that you define.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3187.475,
    "end": 3188.597,
    "text": "So in this case, 100.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3189.177,
    "end": 3194.846,
    "text": "So it will keep the last 100 values of whatever you tell it to.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3195.807,
    "end": 3202.217,
    "text": "Now, at some point, you might say, well, why don't we just make this really long and do it for every value?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3203.041,
    "end": 3205.807,
    "text": " Well, that gets really big, really fast.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3205.827,
    "end": 3211.521,
    "text": "If you're storing floating point numbers and you're storing millions of them, you can run out of memory in your computer.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3212.523,
    "end": 3214.668,
    "text": "So you do have to be slightly careful with that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3215.049,
    "end": 3220.662,
    "text": "But generally, if you just keep the things that you're looking at to relatively small amounts, you'd be fine.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3220.642,
    "end": 3225.587,
    "text": " And the use case for this, we'll notice too, is slightly different with the way we wire things into it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3225.967,
    "end": 3228.77,
    "text": "So we'll notice that there isn't a compartment value right here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3228.81,
    "end": 3230.952,
    "text": "There's no m.compartment name.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3231.392,
    "end": 3234.275,
    "text": "We just wire directly into the monitor.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3234.895,
    "end": 3237.217,
    "text": "And this is why I was saying they work slightly differently.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3238.078,
    "end": 3243.643,
    "text": "But as far as the outside user is concerned, you just wire into them like any other compartment.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3243.663,
    "end": 3247.527,
    "text": "You can think of it as one giant compartment that stores everything.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3248.755,
    "end": 3254.54,
    "text": " So here we take the spike output of Z1E and the spike output of Z1I, and we wire them both into the monitor.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3255.161,
    "end": 3262.047,
    "text": "Now, somewhere in between this, we have run the observe function that has gone through and done a forward pass over an image.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3262.748,
    "end": 3265.61,
    "text": "Now we want to actually look at the states as we're running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3266.131,
    "end": 3273.717,
    "text": "And so what we'll notice here is in view, the contents of it, we can just do m.view, and then we just give it the compartment that we want to look at.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3274.238,
    "end": 3278.762,
    "text": "And this will give us the concatenated matrix of all the spikes.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3278.742,
    "end": 3283.49,
    "text": " So if Z1e has 10 neurons in it, it will produce one by 10.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3286.435,
    "end": 3291.784,
    "text": "Like sets of neurons will basically just 10 by comma spikes, either zeros or ones.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3292.425,
    "end": 3304.125,
    "text": "And so as it goes through, the output of the monitor will be 100 by 10, because that'll be all of the all of the spikes for all hundred time steps.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3304.375,
    "end": 3311.719,
    "text": " And so that gets us the ability to look at models after they have run, but",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3312.239,
    "end": 3314.702,
    "text": " the internal states of the models as they're running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3315.563,
    "end": 3327.058,
    "text": "I will say there are a couple of future things coming with monitors about the ability to actually get them to print out and integrate with matplotlib and getting it so you don't even actually ever have to view.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3327.098,
    "end": 3330.643,
    "text": "You can just make lots of compartments and they will just plot nicely for you.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3331.284,
    "end": 3335.209,
    "text": "It is currently working mostly in our development branch.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3336.995,
    "end": 3339.479,
    "text": " Finally, how has this been used, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3339.579,
    "end": 3348.453,
    "text": "I've been marketing this to you as like, hey, this is the thing that we have made and it's really cool and it's really fast and it works really well, but let's see it actually work in action.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3349.214,
    "end": 3358.328,
    "text": "So the paper that started this all was this paper called Neurocoding Frameworks for Learning Generative Models by Dr. Aurobio and Kiefer.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3358.308,
    "end": 3361.511,
    "text": " And so this was kind of the founding idea for NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3361.531,
    "end": 3366.156,
    "text": "This was built in the original version of NGC Learn about two years ago.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3366.897,
    "end": 3376.106,
    "text": "And it built this incredibly complicated looking model here that has both excitatory and inhibitory connections, as well as a bunch of lateral connections.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3376.246,
    "end": 3379.329,
    "text": "Every line that we see here is part of the weight matrices.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3380.03,
    "end": 3385.075,
    "text": "And sometimes, depending on the way that the connections go, it's multiple sets of weight matrices.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3385.055,
    "end": 3396.195,
    "text": " This is a model that you can build in NGC Learn, and it will look no more complicated than a bunch of little brackets telling compartments where to wire to.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3397.593,
    "end": 3408.469,
    "text": " In addition to that, we have reproduced Dillon Cook's paper from 2015 called Unsupervised Learning of Digit Reconstruction Using Spike Timing-Dependent Plasticity.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3409.31,
    "end": 3411.213,
    "text": "This is another model that we had.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3411.253,
    "end": 3418.183,
    "text": "This is more of a historic model that we have built inside NGC Learn and gotten up and running without any problems at all.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3419.767,
    "end": 3442.197,
    "text": " We have one of my papers, actually, with my advisor, Dr. Arrobia, called Time-Integrated Spike-Timing-Dependent Plasticity, in which we built a patching model that basically is this whole structure, where we have a sensory input layer, an image, and it breaks up into a bunch of different subcomponents, or submodels, basically, that all learn small patches of our image.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3442.177,
    "end": 3445.125,
    "text": " And then we have one final part that aggregates them all together.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3445.165,
    "end": 3449.076,
    "text": "This sort of model is also very easy to build in NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3449.316,
    "end": 3453.267,
    "text": "There's no actual time difference between running some of these.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3454.782,
    "end": 3462.171,
    "text": " And so again, this is just something that we can build, and this is all able to be built with components that already exist in NGC Learn.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3462.591,
    "end": 3470.0,
    "text": "If you wanted to build some of these models, this one, the TISDDP synapse isn't quite in there yet, but this model is fully in there.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3470.04,
    "end": 3479.912,
    "text": "You can build this with every component that we have inside of NGC Learn, and it doesn't, without you having to write anything yourself,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3479.892,
    "end": 3486.306,
    "text": " But even if you wanted to rebuild this whole model inside NGC Learn, writing everything yourself, it still would not be that challenging.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3487.148,
    "end": 3495.707,
    "text": "In addition to that, we also have this contrastive signal dependent plasticity, which is a self-supervised learning in spike neural circuits, again, by my advisor.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3495.687,
    "end": 3520.024,
    "text": " uh dr arabia and this is again another model that like this whole thing gets expanded to this which does this and this model is actually inside ngc learn as well all of the components that are needed for it are inside ngc learn and you can build it and you can look at it and it's all linked to in his paper and what that kind of wraps me up to here is the ngc learn museum or just ngc museum",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3520.004,
    "end": 3530.138,
    "text": " And so NGC Museum is a public repository for NGC Learn that houses the biomimetic, the brain-inspired computing, and the computational neuroscience models.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3531.019,
    "end": 3536.327,
    "text": "Basically everything that we've built for all of our models can be found here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3536.347,
    "end": 3543.497,
    "text": "It makes a very convenient place for if you have code that you want to publish somewhere, you can publish it here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3544.456,
    "end": 3546.54,
    "text": " As just a, Hey, here's your paper.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3546.58,
    "end": 3554.215,
    "text": "You can, it's all, it is organized and it's working on being more organized, um, into, uh, different groupings of stuff.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3554.335,
    "end": 3556.399,
    "text": "There's an whole exhibitors section for it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3556.46,
    "end": 3566.92,
    "text": "So if you have multiple pieces of work that are all done using NGC learn, you can, you, you will have your own, you'll have your ability to have your own folder that you can all that you can organize however you want.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3566.9,
    "end": 3588.182,
    "text": " that will have all of your papers that you've built together which would mean that if somebody is looking for similar papers that you have done they can come here and they can see ah here is a spike timing dependent plasticity paper that you've done and here's four other spike timing dependent plasticity papers that you have also worked on as well as here's just other spike timing dependent plasticity works by other authors",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3588.162,
    "end": 3597.132,
    "text": " that would allow you to cross-reference things and just have a good community-built platform for models.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3597.332,
    "end": 3611.268,
    "text": "Because as I'm sure we're all aware, it's really frustrating when you read a paper, it has a really interesting method, you go look to reproduce it yourself, and the code is not available, or it's in a Git repo that's been deleted.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3611.969,
    "end": 3613.09,
    "text": "I think we've all been there.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3613.07,
    "end": 3623.333,
    "text": " And so from that standpoint, our goal is to make it so that that doesn't happen again and that everything built with NGC Learn can be found all in one place so we can all see how much it can do.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3624.663,
    "end": 3628.667,
    "text": " And finally, some upcoming features, reinforcement learning.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3629.068,
    "end": 3632.091,
    "text": "So once again, this is actually currently in our development branch.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3633.012,
    "end": 3635.394,
    "text": "So we have grid based environments.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3635.935,
    "end": 3639.038,
    "text": "Technically, you don't need to make them grid based, it's just the easiest one to visualize.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3639.078,
    "end": 3643.042,
    "text": "So it's using components.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3643.062,
    "end": 3649.489,
    "text": "So with the way that components work, if you can basically chunk your environment into its own",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3649.469,
    "end": 3671.022,
    "text": " individually run state machine um you can display it and run it in ngc learn uh currently we have rat water maze rat teammates another model that i'm currently using for a paper that's not published yet uh that are all navigation based tasks that have to perceive the world around them and uh",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3671.373,
    "end": 3672.055,
    "text": " get updates.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3672.477,
    "end": 3674.484,
    "text": "I will say right now it is only limited to 2D.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3674.805,
    "end": 3677.335,
    "text": "I would not stop you from using it in 3D.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3677.375,
    "end": 3681.028,
    "text": "You just might have to see how to visualize it differently.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3681.346,
    "end": 3684.471,
    "text": " And since it is built up out of components, it is fully compilable.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3685.212,
    "end": 3707.185,
    "text": "And what that means is that we can compile the RAT T maze into a C function and integrate it directly with the compiled version of our agent, meaning that at the end of the day, you can do your entire training over your RL environment in C, never having to touch Python.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3707.823,
    "end": 3710.788,
    "text": " And I will say egocentric and worldviews are both available.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3710.968,
    "end": 3712.931,
    "text": "So obviously, these are rendering the worldview.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3713.011,
    "end": 3715.515,
    "text": "And then the little highlighted section is your egocentric view.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3715.575,
    "end": 3717.638,
    "text": "Both of them are very easily attainable.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3720.082,
    "end": 3720.983,
    "text": "Yeah.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3721.003,
    "end": 3723.787,
    "text": "And so with that, there's some links to all everything.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3723.907,
    "end": 3728.354,
    "text": "And if anybody has any questions, please don't hesitate to ask.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3729.937,
    "end": 3732.801,
    "text": "I'm slightly early on time, but that was kind of the goal.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3740.932,
    "end": 3741.673,
    "text": " Thank you, William.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3742.395,
    "end": 3749.369,
    "text": "Okay, just while I'm getting back into the game here, maybe just share a little bit of your journey to working on this.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3749.91,
    "end": 3751.733,
    "text": "Like, where are you at in grad school?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3751.954,
    "end": 3753.817,
    "text": "How did you come to be working on it?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3754.379,
    "end": 3762.214,
    "text": "Yeah, so I am a fourth-year graduate student working under Dr. Alexander Arrobia at the Rochester Institute of Technology.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3762.194,
    "end": 3781.671,
    "text": " um here in new york and so this kind of all started so my journey on spiking neural net started about two and a half years ago or so and very rapidly i found just like the speed problem to be incredibly annoying on like how do i actually get this to run in a way that's efficient",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3781.651,
    "end": 3788.684,
    "text": " And as I started moving to bigger and bigger models, specifically RL and some other models, it started getting really, really slow.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3789.285,
    "end": 3801.246,
    "text": "And so around that time, so around like two years ago or three years ago or so, Dr. Raburbia had started working on the first iteration of NGC Learn, which is what his original paper was.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3802.947,
    "end": 3809.016,
    "text": " This one was written using and then I got a hold of it and it works.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3809.136,
    "end": 3810.037,
    "text": "It works beautifully.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3811.019,
    "end": 3819.831,
    "text": "But there, since that paper came out, there were some pretty large advancements in the just computational things.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3819.951,
    "end": 3823.116,
    "text": "Jackson really taken off a little bit since that had come out.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3823.096,
    "end": 3833.21,
    "text": " It was all originally built in TensorFlow, which works, but it really felt like we were hammering a square peg through a circular hole to get it to do what we wanted.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3833.25,
    "end": 3843.565,
    "text": "And so starting about a year and a half ago now, we kind of set out to make NGC learn what it is today.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3843.585,
    "end": 3851.736,
    "text": "And then probably eight months ago, it really kind of took off on where it is with its compiling and the speed.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3851.851,
    "end": 3854.617,
    "text": " And we've been using it and developing it ever since.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3856.26,
    "end": 3856.601,
    "text": "Cool.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3856.961,
    "end": 3857.242,
    "text": "Epic.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3857.382,
    "end": 3857.623,
    "text": "Okay.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3857.843,
    "end": 3860.408,
    "text": "I'll start asking some questions from the live chat.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3860.609,
    "end": 3863.936,
    "text": "And if anybody wants to add more questions, they can go for it.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3863.956,
    "end": 3864.156,
    "text": "Okay.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3867.376,
    "end": 3873.864,
    "text": " Okay, I'm going to read a possibly unrelated comment, but if you have a thought, otherwise it's not necessarily a direct question.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3874.064,
    "end": 3878.329,
    "text": "Okay, Scott wrote, Lawyers say that contracts are a meeting of the minds.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3878.97,
    "end": 3883.335,
    "text": "Singers and choruses experience aesthetic amplification of group identity.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3883.855,
    "end": 3891.905,
    "text": "Here, the meeting of voices in storytelling equals a smart mirror for group identity.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3891.925,
    "end": 3895.609,
    "text": "That's... Okay.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3895.629,
    "end": 3895.729,
    "text": "Okay."
  },
  {
    "start": 3896.722,
    "end": 3897.604,
    "text": " It's interesting.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3897.684,
    "end": 3916.318,
    "text": "I do kind of, thinking about it, it's like, just my initial gut reaction to that is that I think especially when we're doing science, sometimes we can get a little bit too bogged down in being scientists and not enough time in being like, rethinking and actually just coming up with like new ideas, right?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3916.358,
    "end": 3920.265,
    "text": "We get too ingrained in like ruts of how things have been done in the past.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3921.055,
    "end": 3924.362,
    "text": " And so I think that's something that we all do need to work towards more.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3924.562,
    "end": 3928.991,
    "text": "It's just being a little bit more embracing of just new ideas that might not work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3930.895,
    "end": 3931.235,
    "text": "Awesome.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3931.516,
    "end": 3931.837,
    "text": "Okay.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3932.498,
    "end": 3933.66,
    "text": "First question.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3934.282,
    "end": 3939.452,
    "text": "Mobina wrote, does it only work with discrete value spiking?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3940.445,
    "end": 3940.845,
    "text": " No.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3941.126,
    "end": 3943.508,
    "text": "So I'm going to flip through a couple of slides here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3943.628,
    "end": 3954.64,
    "text": "So when you go to these wires here, there's nothing that says that the wires actually move discrete values, but the advantage that we run into is that the fact that they can move discrete values.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3955.121,
    "end": 3962.449,
    "text": "So when we look at here, so the weight outputs, so like w, like the weight outputs are actual matrix multiplications of weight outputs.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3962.489,
    "end": 3963.61,
    "text": "We can see that here.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3964.131,
    "end": 3969.777,
    "text": "This is, this is not a discrete value, but for us, when we're dealing with spiking neural networks,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3969.757,
    "end": 3971.141,
    "text": " The input coming.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3971.181,
    "end": 3976.195,
    "text": "So the short answer to the question is no, it works fine with floating point values as well.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3976.436,
    "end": 3980.607,
    "text": "Um, it just also works with discrete values, which many other systems do not.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 3983.054,
    "end": 3983.395,
    "text": "Okay.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3984.91,
    "end": 3990.162,
    "text": " To give you a breather, I'm going to read an interesting quote that your last comment reminded me of.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3990.683,
    "end": 3993.469,
    "text": "It's from Henry David Thoreau in Walden.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 3994.071,
    "end": 4003.392,
    "text": "He wrote, \"...I had not lived there a week before my feet wore a path from my door to the pondside, and though it is five or six years since I trod it, it is still quite distinct.\"",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4003.372,
    "end": 4007.936,
    "text": " It is true, I fear that others may have fallen into it and so help to keep it open.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4008.336,
    "end": 4013.741,
    "text": "The surface of the earth is soft and impressible by the feet of men, and so with the paths which the mind travels.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4014.142,
    "end": 4022.049,
    "text": "How worn and dusty then must be the highways of the world, how deep the ruts of tradition and conformity.\"",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4022.349,
    "end": 4023.109,
    "text": "It's a good quote, it's a good quote.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4023.129,
    "end": 4025.732,
    "text": "I've seen his cabin, I've been to that lake.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4026.232,
    "end": 4028.875,
    "text": "Cool, like I had a sense that you would.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4029.335,
    "end": 4031.657,
    "text": "Yeah, yeah, it's a really cool place.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4032.329,
    "end": 4039.2,
    "text": " Okay, reading down Viet, your colleague and previous presenter wrote two questions.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4039.24,
    "end": 4049.576,
    "text": "So first question, I saw that JAX also has a method dot lower to lower the pure function down to machine code, but not compiling.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4050.297,
    "end": 4055.846,
    "text": "Do you see any fruitful exploitation of this function in the context of NGC simulation library?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4057.989,
    "end": 4058.37,
    "text": "Um,",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4060.105,
    "end": 4060.846,
    "text": " Possibly.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4061.227,
    "end": 4063.952,
    "text": "So that could get us definitely some of the beneficial parts.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4063.972,
    "end": 4071.045,
    "text": "So right now when you compile a function and then it throws an error, debugging that error is a nightmare because it's all compiled under the hood.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4071.385,
    "end": 4075.854,
    "text": "I would have to look more into it, but if we can just get to machine code, that would be really cool.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4076.515,
    "end": 4077.777,
    "text": "Like if it didn't end up",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4078.786,
    "end": 4082.713,
    "text": " like if it ended up skipping over, like it's going into C, but I'm not sure if it does.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4083.073,
    "end": 4101.925,
    "text": "On top of that, something else that would be kind of interesting is, and I've actually spoken to my father who also does computer programming about this, is if we can get it all written into C or machine code, theoretically, you should be able to pre-compile this, which means that you could get your entire model and all of the state transitions",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4101.905,
    "end": 4113.096,
    "text": " as a program basically that sits on your computer without actually ever having to touch Python, which I also think would be a really cool place and direction to go.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4113.65,
    "end": 4123.72,
    "text": " Yeah, I think the presentation and the package architecture reflects many octaves of computer science.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4123.74,
    "end": 4141.817,
    "text": "You're really getting down into the compilation details, but understanding those is critical because the point you mentioned sort of by the by that there's the possibility with only some constraints to run a model on CPU, GPU, and neuromorphic",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4142.894,
    "end": 4152.914,
    "text": " That's an incredible cross deployment of potentially identical models.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4153.655,
    "end": 4159.647,
    "text": "So you could have certain models deployed across hardware to better understand the hardware, forget the model.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4160.248,
    "end": 4161.611,
    "text": "Yeah, for sure.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4161.631,
    "end": 4162.573,
    "text": "Inside...",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4162.553,
    "end": 4178.855,
    "text": " Yeah, inside of the tutorial section of the documentation for NGC Learn, there's a part with NGC Lava, and it actually will walk you through how to run the same model both on the Loihi simulator and your computer in the same time.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4179.596,
    "end": 4183.0,
    "text": "And you can look, and it will get the same output.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4183.081,
    "end": 4188.628,
    "text": "It's got some randomness to it, so your filter might be in a different spot, but it will produce the same model.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4189.469,
    "end": 4194.197,
    "text": " Yeah, I mean, what is it even like to, or how is it similar and different",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4195.156,
    "end": 4199.541,
    "text": " to be programming on a neuromorphic simulator.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4200.683,
    "end": 4203.506,
    "text": "So the simulator is relatively straightforward.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4204.207,
    "end": 4211.195,
    "text": "Actually going on to the physical Luigi itself, and this is why we have to stress simulator everywhere, is a challenge.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4211.215,
    "end": 4217.743,
    "text": "So first off, Intel's NeuroCore, which is like their proprietary code for running on their Luigi chips.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4218.884,
    "end": 4221.467,
    "text": "Well, it's proprietary code, which means that",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4221.447,
    "end": 4223.329,
    "text": " I don't have easy access to it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4225.091,
    "end": 4231.237,
    "text": "I have a couple working groups that I can have access to it through, but it's not something that I can just put on my own machine and test.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4232.158,
    "end": 4241.267,
    "text": "In addition to that, microcode is needed, which is basically what is usually used to patch CPUs and GPUs and whatnot.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4241.908,
    "end": 4247.353,
    "text": "But the microcode, it's the level between machine code, and it looks somewhat like assembly.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4247.333,
    "end": 4251.621,
    "text": " You need to write a lot of your models in that, which gets complicated.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4252.062,
    "end": 4265.646,
    "text": "So until we get a good translation layer between Python and either C and then C to that layer, or between just Python to that layer, the physically putting it onto hardware still is a hurdle.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4267.229,
    "end": 4278.826,
    "text": " Yeah, again, super interesting how this is really spanning the gamut with different layers of computer science and bringing in all these unconventional compute.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4279.807,
    "end": 4281.57,
    "text": "Okay, another question from Viet.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4282.772,
    "end": 4296.612,
    "text": "Have you also considered automatic operator, such as when we add two compartments A and B together, instead of summation of A comma B, it is A plus B and the library would wire them to the summation operation?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4298.144,
    "end": 4299.332,
    "text": " Yes.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4299.855,
    "end": 4301.688,
    "text": "So yeah, we definitely have considered that.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4302.231,
    "end": 4304.003,
    "text": "You run into",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4306.177,
    "end": 4306.938,
    "text": " So it works.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4307.859,
    "end": 4309.821,
    "text": "So the long story short is that can work.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4309.941,
    "end": 4325.679,
    "text": "The problem that you can run into is it can become a little bit syntactically weird to look at when you have compartment plus compartment meaning one thing and compartment.value plus compartment.value being another thing.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4326.58,
    "end": 4332.387,
    "text": "Basically, the problem is that if we start overloading those operators, you now have to be careful",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4332.367,
    "end": 4343.161,
    "text": " Like right now, if you try and add two compartments together, and you forget to do like compartment dot value, it'll just error because compartments don't have an addition with one another.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4343.541,
    "end": 4351.732,
    "text": "But if we produce an addition with one another, it starts to make it you have a lot more silent errors.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4352.533,
    "end": 4359.201,
    "text": "So until we find a good way to overcome that problem, it's currently on pause.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4360.683,
    "end": 4371.232,
    "text": " But this brings in a lot of interesting category theory type questions about concatenating nested systems and putting them in parallel in series.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4371.832,
    "end": 4373.594,
    "text": "And what are these operators?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4373.674,
    "end": 4379.299,
    "text": "What does it really mean when just to have a certain symbol and then what do you really want to do?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4379.339,
    "end": 4380.84,
    "text": "What are the operations supposed to do?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4380.86,
    "end": 4390.048,
    "text": "Yeah, and that's kind of been why like we overrode the shifting operator just because I wanted something there that was not just like dot connect.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4390.028,
    "end": 4395.803,
    "text": " But beyond that, I've been a little bit hesitant to override them.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4396.441,
    "end": 4414.922,
    "text": " The nod from Will to the old, many years ago, NGC Learn was nice.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4415.343,
    "end": 4416.384,
    "text": "Wink.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4416.404,
    "end": 4423.512,
    "text": "The original NGC Learn was written in TensorFlow and started by offering generic customizable support for predictive coding.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4423.492,
    "end": 4423.973,
    "text": " First note.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4423.993,
    "end": 4432.486,
    "text": "And then second note, I posted a link to where we've curated many implementations of active inference.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4433.287,
    "end": 4440.117,
    "text": "And Alex wrote, we would love to have community contributions translating these active inference models to NGC Learn.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4440.678,
    "end": 4443.703,
    "text": "We would love to feature and maintain these in the NGC Museum.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4443.863,
    "end": 4446.006,
    "text": "I mean, that was an incredible...",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4447.69,
    "end": 4455.675,
    "text": " insight to have a package centric repository",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4456.195,
    "end": 4456.876,
    "text": " Yeah.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4457.036,
    "end": 4457.577,
    "text": "Yeah.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4457.657,
    "end": 4458.959,
    "text": "The whole goal of this.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4459.079,
    "end": 4465.549,
    "text": "So all four of these models that are shown here are all in the museum already or on their way to being in the museum.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4466.15,
    "end": 4477.466,
    "text": "And yet the goal is just so that way, like if you guys have this repository of here's all the papers, well, what's better than here's all the papers that kills all the papers and the code to reproduce them all in one place.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4481.212,
    "end": 4481.933,
    "text": "Yeah.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4483.6,
    "end": 4494.872,
    "text": " Okay, you mentioned a few pieces of this, but Mobina wrote, what improvements are currently being explored to enhance NGC learning?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4496.434,
    "end": 4503.481,
    "text": "Yeah, so again, one of the main ones is just getting reinforcement learning up there and available for people to use easily.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4504.382,
    "end": 4510.268,
    "text": "In addition to that, there's an overhaul of our visualization tools that I'd want to have.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4510.428,
    "end": 4512.831,
    "text": "So we already support",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4512.811,
    "end": 4518.198,
    "text": " Things like the raster plots, all of the spike patterns.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4519.099,
    "end": 4528.351,
    "text": "We support, obviously, Matplotlib does all of its stuff, and since all of our NGC Learn stuff is built inside of NumPy, it all plugs and plays into that really easily.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4528.411,
    "end": 4536.261,
    "text": "But we do have a couple other additions to all of this that we're trying to get up and running.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4536.281,
    "end": 4539.105,
    "text": "Basically, there's an overhaul to the visualization library.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4541.448,
    "end": 4550.185,
    "text": " In addition to that, I'm sure there's other projects that I've been thinking about, but I don't have my notebook with my list of plans in front of me.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4550.566,
    "end": 4555.997,
    "text": "But those two are probably the first two on my list is the reinforcement learning and then visualizations.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4556.558,
    "end": 4556.858,
    "text": "Cool.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4557.199,
    "end": 4558.041,
    "text": "And this is a question.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4558.061,
    "end": 4561.347,
    "text": "And the help section and the library built help section.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4561.411,
    "end": 4563.274,
    "text": " Yes, the lobby of the museum.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4564.716,
    "end": 4564.976,
    "text": "Yeah.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4565.136,
    "end": 4566.338,
    "text": "And then the art outside.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4566.758,
    "end": 4578.375,
    "text": "Here's a question that we've discussed with each of the previous package developers today, ActiveInference.jl and the RxInfer.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4578.495,
    "end": 4582.34,
    "text": "What was the most challenging part of developing this out?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4586.085,
    "end": 4587.908,
    "text": "Definitely the compiler.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4588.951,
    "end": 4597.123,
    "text": " And more and it's not the funny thing is, it's not the compiler specifically, that was the most challenging part of developing this out.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4597.584,
    "end": 4603.032,
    "text": "It was how did I want the user to actually interface with it?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4604.154,
    "end": 4616.612,
    "text": "Because one of the most complicated things and I can go back to here, right, was getting this to all work in a way that didn't feel clunky.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4618.077,
    "end": 4620.94,
    "text": " And it still isn't perfect.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4620.98,
    "end": 4623.302,
    "text": "It's just the best we've figured out so far.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4623.982,
    "end": 4648.084,
    "text": "But the way to define your compartments and your fixed parameters and then write transition functions that can pull them into itself and do the operation, getting that workflow down in a way that made it so that way if you want to build a new component, it doesn't take very long was a challenge.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4648.064,
    "end": 4668.857,
    "text": " um that was probably the most challenging part um the next one's definitely just actually getting the simulator to plug and play everything together um i could give another like three hour talk on how the simulator act like the ngc sim lib actually works under the hood um because it's",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4670.221,
    "end": 4676.982,
    "text": " It does a lot of metaprogramming and pattern matching and function generation.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4677.524,
    "end": 4682.138,
    "text": "Like your actual compiled method that you're running is like four step.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4682.32,
    "end": 4687.309,
    "text": " three steps of of, like dynamically created functions deep, basically.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4687.93,
    "end": 4691.196,
    "text": "And so getting that to all work without bugs was hard.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4692.018,
    "end": 4693.881,
    "text": "And it's been doing pretty well.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4694.522,
    "end": 4699.472,
    "text": "It's all we've only had two very, very minor bugs in the past, like five months.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4699.752,
    "end": 4701.956,
    "text": "So I'll call that a success.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4703.038,
    "end": 4705.122,
    "text": "In entomology, we love minor bugs.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4706.131,
    "end": 4706.813,
    "text": " Oh, yeah, of course.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4707.113,
    "end": 4709.118,
    "text": "Okay, I'll read another question.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4709.338,
    "end": 4716.134,
    "text": "Rorick wrote, is there an active outreach program to the museum as such treasure ought not to be buried?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4718.699,
    "end": 4725.675,
    "text": "So we're not actively going out and trying to see things, but it is open source and anybody can make pull requests into it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4726.28,
    "end": 4739.785,
    "text": " Um, so, and we are, and whatever we, for, like, our lab or, like, for our own personal research, reproduce a model, um, or either a baseline or just as, like, as we're learning something new, that also ends up in there.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4740.386,
    "end": 4747.579,
    "text": "But, um, I think as the going out to people specifically and being like, hey, we're going to...",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4747.863,
    "end": 4756.859,
    "text": " It's a lot of it is, is we're, we're trying to get the people that use our tool to just, when they've published the paper using the tool, put it also up there.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4757.961,
    "end": 4759.664,
    "text": "That's a very humble answer.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4759.924,
    "end": 4764.572,
    "text": "Also, you're doing the active part now, so that can't be discounted.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4765.447,
    "end": 4770.136,
    "text": " Okay, I'm going to read another, this is not a question from Scott, but just if you have any thoughts.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4770.778,
    "end": 4781.92,
    "text": "Okay, he just wrote, things get interesting as our new computational and information processing systems, computers, internet, AI, etc., etc., etc.,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4781.9,
    "end": 4799.25,
    "text": " more faithfully reflect human cognition active inference and biophysical models than our existing institutions and organizations the latter are historical artifacts not yet improved and socialized to loot new learnings about physics supported flows",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4801.913,
    "end": 4817.132,
    "text": " I mean, I think, I think this is just, uh, my first thought of that is, uh, many, yeah, many, many modern AI systems and giant structures that are made, uh, do not reflect well on how odd, like are not faithful to biology.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4818.173,
    "end": 4828.326,
    "text": "Um, and we definitely have a, we should definitely have a goal on making them more faithful to biology and, uh, getting a.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4829.96,
    "end": 4845.201,
    "text": " Basically, there's a bunch of things that biological models can achieve for us, with one of the biggest ones just being the energy efficiency of neuromorphic computing, and the fact that we have things like chat GPT and whatnot that have",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4845.181,
    "end": 4864.573,
    "text": " uh you know use power drives of small cities to train uh kind of goes against all of that and so i do think that like this is definitely a way of the future i don't think it will ever beat out everything but i do think it's definitely something that we do need to continue pursuit of okay",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4864.891,
    "end": 4865.812,
    "text": " I have a question.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4865.853,
    "end": 4872.743,
    "text": "What is the putative or possible title or topic of your dissertation overall?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4873.104,
    "end": 4876.63,
    "text": "Like, is this one puzzle piece, or is this the major one?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4876.87,
    "end": 4878.673,
    "text": "Yeah, so I've done my dissertation proposal.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4879.033,
    "end": 4882.038,
    "text": "Off the top of my head, I do not remember what my proposal's name was.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4883.14,
    "end": 4886.325,
    "text": "So I do spiking representation learning.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4886.305,
    "end": 4899.454,
    "text": " So up until now, most of my focus has been specifically on the learning rules and credit assignment plasticity rules of spiking neural nets, specifically spike timing dependent plasticity.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4901.037,
    "end": 4905.704,
    "text": " This is my paper, Time Integrated Spike Time Independent Plasticity.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4905.744,
    "end": 4918.862,
    "text": "And then I wanted to do all of this with the direct goal of putting it into reinforcement learning, which is why one of the reinforcement learning parts of NGC Learn is on the way, is because I need it for my research.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4919.242,
    "end": 4926.893,
    "text": "And since other people have also expressed an interest in it for their research, I'm like, let's all put it in the library together.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4927.463,
    "end": 4940.659,
    "text": " And so, yeah, so I've got that and then the actual reinforced and then all of this basically played together to go with the representation learning of how do humans actually represent stuff?",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4940.78,
    "end": 4945.586,
    "text": "Because I'm not a fan of directly going from like pixels to thought process.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4945.706,
    "end": 4948.509,
    "text": "I want to go pixels to representation to thought process.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4949.37,
    "end": 4953.876,
    "text": "And so that's kind of where I've been at right now in my career path.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4955.223,
    "end": 4957.892,
    "text": " Cool, okay, another comment from Alex, he wrote,",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4958.817,
    "end": 4967.945,
    "text": " We should also mention that NGC Learn is going to offer support for dynamical systems and even more detailed support for differential equations beyond the basics we have now.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4968.526,
    "end": 4969.066,
    "text": "Smiley face.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 4969.306,
    "end": 4969.547,
    "text": "Yes.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4970.307,
    "end": 4973.79,
    "text": "Yes, that is the thing too that we are on track for.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4973.991,
    "end": 4985.301,
    "text": "We've got currently a bunch of different integration methods that are in there, but they allow for some complex dynamical systems, but not every complex dynamical system that we want.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4985.901,
    "end": 4988.824,
    "text": "And so the goal is to be able to put all of those in there too.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4988.804,
    "end": 4995.616,
    "text": " Pretty much anything you think of that can be represented as a state machine is something that we would love to be able to support.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 4996.858,
    "end": 5001.746,
    "text": "Just because at the core of it, it is just a giant state machine moving pieces around.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5002.527,
    "end": 5013.546,
    "text": "And so while it works really well for spiking neural nets, it works really well for so many other things that are a dynamical system, something that changes with time.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5013.847,
    "end": 5035.956,
    "text": " yeah from the active inference side when i see that well first the reinforcement learning and the ability to have the egocentric and the allocentric i think is very fascinating and it makes me wonder how do epistemic value inferences come into the picture",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5037.083,
    "end": 5054.4,
    "text": " when we zoom out beyond utility or reward maximization and include these networks with structural fixity or with a dynamic structure doing learning, that's kind of just an interesting... Yeah, for sure, for sure.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5054.98,
    "end": 5063.108,
    "text": "I don't have any great insight on that right now other than it sounds really cool and I would love to be there working on it.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5063.442,
    "end": 5063.743,
    "text": " Cool.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5064.143,
    "end": 5068.932,
    "text": "Well, I don't know if I should say that I do or don't hope your PhD ends before then.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5071.616,
    "end": 5072.538,
    "text": "Do you have any?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5072.558,
    "end": 5075.543,
    "text": "I hope to get to work on this.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5076.004,
    "end": 5079.37,
    "text": "I'm pretty sure even after my PhD ends, I'm still going to be working on this.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5079.47,
    "end": 5080.753,
    "text": "So it's all good.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5081.714,
    "end": 5082.035,
    "text": "Cool.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5082.135,
    "end": 5085.501,
    "text": "Do you have any last comments or thoughts to add?",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5087.185,
    "end": 5100.748,
    "text": " Not really, just that if you are ever trying to set up NGC Learn and you're struggling with anything, do not hesitate to reach out to either myself or my advisor, Dr. Arurbia.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5100.768,
    "end": 5106.578,
    "text": "Both of us are on the main dev team of NGC Learn, and we would be more than happy to help.",
    "speaker": "SPEAKER_02"
  },
  {
    "start": 5106.912,
    "end": 5111.177,
    "text": " Okay, I'll just read a closing comment from Dr. Robia.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5111.657,
    "end": 5122.009,
    "text": "We really hope the active inference community and audience considers community contributions to NGC Learn, especially if they want to go beyond using backprop slash standard deep learning.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5122.569,
    "end": 5126.494,
    "text": "Also consider using it in the classroom to teach computational neuroscience.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5128.376,
    "end": 5128.536,
    "text": "Cool.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5128.556,
    "end": 5129.637,
    "text": "All right.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5130.358,
    "end": 5130.698,
    "text": "Excellent.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5130.718,
    "end": 5131.419,
    "text": "Thank you, William.",
    "speaker": "SPEAKER_01"
  },
  {
    "start": 5131.679,
    "end": 5132.16,
    "text": "Farewell.",
    "speaker": "SPEAKER_01"
  }
]