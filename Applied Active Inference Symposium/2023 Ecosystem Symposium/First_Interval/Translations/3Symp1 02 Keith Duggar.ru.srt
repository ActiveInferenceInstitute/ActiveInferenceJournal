1
00:00:01,290 --> 00:00:04,494
Хорошо, следующим будет

2
00:00:04,532 --> 00:00:06,606
Кит Даггер, который прислал заранее записанное

3
00:00:06,628 --> 00:00:09,118
видео.  Предварительно записанное видео

4
00:00:09,204 --> 00:00:11,694
называется активным выводом.  И

5
00:00:11,732 --> 00:00:14,765
модель актера. Я подниму этот вопрос

6
00:00:14,788 --> 00:00:15,920
прямо сейчас.

7
00:00:29,430 --> 00:00:32,958
Хорошо, вот

8
00:00:33,134 --> 00:00:35,910
заранее записанное видео Кита об активном умозаключении

9
00:00:35,990 --> 00:00:37,660
и модели Актера.

10
00:00:44,240 --> 00:00:46,956
Активный вывод и модель актора.

11
00:00:47,138 --> 00:00:49,608
Привет.  Привет.  Я доктор Кейт Таггер,

12
00:00:49,704 --> 00:00:52,684
технический директор платформы X Ray,

13
00:00:52,732 --> 00:00:56,464
ИИ расширенной реальности.  Company и соведущий

14
00:00:56,502 --> 00:00:58,880
подкаста Machine Learning Street Talk.

15
00:00:59,780 --> 00:01:02,624
Теперь, когда мы все работаем над созданием

16
00:01:02,662 --> 00:01:05,536
экосистемы, основанной на активном умозаключении,

17
00:01:05,728 --> 00:01:08,324
программное обеспечение, очевидно, будет играть

18
00:01:08,362 --> 00:01:11,363
основополагающую роль в максимальном использовании

19
00:01:11,402 --> 00:01:13,204
активного вывода.  Нам нужно будет использовать

20
00:01:13,242 --> 00:01:15,524
парадигмы разработки программного обеспечения,

21
00:01:15,562 --> 00:01:17,636
соответствующие принципам активного

22
00:01:17,668 --> 00:01:20,136
вывода, и я думаю, что есть одна из них,

23
00:01:20,238 --> 00:01:22,664
созданная специально для наших нужд.  Это называется

24
00:01:22,702 --> 00:01:26,084
моделью актера.  Активный вывод

25
00:01:26,132 --> 00:01:28,356
и модель актера — два глубоко

26
00:01:28,388 --> 00:01:30,750
связанных понимания мира.

27
00:01:31,280 --> 00:01:34,204
Они обеспечивают фундаментальную основу для

28
00:01:34,242 --> 00:01:36,280
работы с динамикой сложных

29
00:01:36,360 --> 00:01:39,624
систем с упором на автономные

30
00:01:39,672 --> 00:01:42,672
агенты, которые взаимодействуют в среде

31
00:01:42,726 --> 00:01:46,283
вложенных систем.  Я хотел бы изучить

32
00:01:46,332 --> 00:01:47,916
некоторые из их ключевых взаимосвязей,

33
00:01:48,108 --> 00:01:50,050
включая роль

34
00:01:50,500 --> 00:01:53,040
параллельной работы агентов, автономии,

35
00:01:53,380 --> 00:01:57,300
неопределенности и адаптации поведения.

36
00:01:58,680 --> 00:02:00,596
Мы увидим, что активный вывод и

37
00:02:00,618 --> 00:02:03,184
активная модель представляют собой

38
00:02:03,232 --> 00:02:06,300
сдвиги парадигмы от детерминированного,

39
00:02:06,480 --> 00:02:10,392
централизованного, пошагового мышления к

40
00:02:10,446 --> 00:02:14,004
децентрализованной сетевой

41
00:02:14,052 --> 00:02:17,751
перспективе одновременного вычисления и

42
00:02:17,806 --> 00:02:21,052
познания.  Немного истории

43
00:02:21,106 --> 00:02:25,100
о модели Actor.  Еще в 1973 году

44
00:02:25,250 --> 00:02:28,504
Карл Хьюитт, Питер Бишоп и Ричард

45
00:02:28,552 --> 00:02:30,555
Штайгер работали в лаборатории

46
00:02:30,578 --> 00:02:33,676
искусственного интеллекта Массачусетского технологического института

47
00:02:33,708 --> 00:02:37,804
над фундаментализацией концепции

48
00:02:37,852 --> 00:02:40,972
параллельных вычислений, которая включала

49
00:02:41,036 --> 00:02:44,304
как структуру, так и адаптируемое

50
00:02:44,352 --> 00:02:46,020
выполнение алгоритмов.

51
00:02:47,480 --> 00:02:49,744
Обычным методам того времени не хватало

52
00:02:49,792 --> 00:02:52,224
надежности и надежной математической

53
00:02:52,272 --> 00:02:55,263
основы.  Их совместные усилия

54
00:02:55,312 --> 00:02:57,576
в конечном итоге привели к созданию

55
00:02:57,598 --> 00:03:01,076
модели Актера.  В то время его считали

56
00:03:01,108 --> 00:03:03,224
революционным из-за его

57
00:03:03,262 --> 00:03:05,764
характеристик как повышенной

58
00:03:05,812 --> 00:03:08,784
устойчивости к ошибкам, так и возможностей распределенных вычислений

59
00:03:08,852 --> 00:03:12,236
.  На протяжении 1980-х и

60
00:03:12,258 --> 00:03:15,388
1990-х годов модель Актера стала

61
00:03:15,394 --> 00:03:18,476
основой для многочисленных исследовательских

62
00:03:18,498 --> 00:03:20,856
и практических проектов, завоевав

63
00:03:20,888 --> 00:03:23,184
популярность благодаря своей гибкости и

64
00:03:23,222 --> 00:03:25,516
интуитивному подходу к параллельным

65
00:03:25,548 --> 00:03:29,648
вычислениям.  В основном он использовался в

66
00:03:29,734 --> 00:03:32,240
искусственном интеллекте и многоагентных

67
00:03:32,310 --> 00:03:34,400
системах.  Звучит знакомо?

68
00:03:35,880 --> 00:03:38,784
Новые языки на основе Actor, такие как Actor,

69
00:03:38,912 --> 00:03:42,116
Saulson и Erlang, способствовали

70
00:03:42,138 --> 00:03:44,356
усовершенствованию модели, превратив ее

71
00:03:44,378 --> 00:03:47,203
в более надежный и гибкий подход

72
00:03:47,332 --> 00:03:50,148
к параллельным вычислениям, и она остается

73
00:03:50,244 --> 00:03:52,164
жива и здорова в информатике и

74
00:03:52,212 --> 00:03:55,272
сегодня.  Совсем недавно к модели актеров

75
00:03:55,326 --> 00:03:57,796
возобновился интерес, главным образом из-за

76
00:03:57,828 --> 00:03:59,944
растущей потребности в распределенных

77
00:03:59,992 --> 00:04:02,904
системах, облачных вычислениях и периферийных

78
00:04:02,952 --> 00:04:05,036
вычислениях, которые способствуют развитию Интернета

79
00:04:05,058 --> 00:04:07,310
вещей и Web 30.

80
00:04:08,480 --> 00:04:11,351
Эти компьютерные задачи идеально подходят

81
00:04:11,416 --> 00:04:13,436
для использования преимуществ архитектуры модели ACA.

82
00:04:13,468 --> 00:04:16,800
, который предназначен именно

83
00:04:16,950 --> 00:04:20,368
для моделирования одновременной обработки как

84
00:04:20,534 --> 00:04:23,409
больших объемов данных с одной стороны,

85
00:04:23,800 --> 00:04:26,752
так и мелкозернистых разрозненных автономных

86
00:04:26,816 --> 00:04:28,710
систем с другой.

87
00:04:29,640 --> 00:04:32,003
Такое применение модели Актера

88
00:04:32,042 --> 00:04:34,436
оказало глубокое влияние на крупные компании,

89
00:04:34,538 --> 00:04:36,904
которые использовали ее принципы для

90
00:04:36,942 --> 00:04:38,936
решения проблем с большими данными, такие как

91
00:04:38,958 --> 00:04:41,348
Twitter, Facebook,

92
00:04:41,524 --> 00:04:45,256
LinkedIn, так какое же это

93
00:04:45,278 --> 00:04:47,636
имеет отношение к активному выводу?  Я

94
00:04:47,668 --> 00:04:49,368
думаю, вы уже слышали некоторые

95
00:04:49,374 --> 00:04:51,656
параллели во вступлении.  Но давайте

96
00:04:51,688 --> 00:04:53,656
начнем с рассмотрения нескольких основных

97
00:04:53,688 --> 00:04:56,396
принципов модели актора и того, как

98
00:04:56,418 --> 00:04:58,568
они связаны с принципами активного

99
00:04:58,584 --> 00:05:01,236
вывода.  Начнем с концепции

100
00:05:01,288 --> 00:05:04,832
изоляции.  Изоляция означает,

101
00:05:04,886 --> 00:05:07,664
что актер в модели актера

102
00:05:07,702 --> 00:05:10,464
не разделяет свое состояние ни с одним другим

103
00:05:10,502 --> 00:05:14,212
актером.  На это можно повлиять только

104
00:05:14,266 --> 00:05:17,060
получив сообщение.  И оно может

105
00:05:17,130 --> 00:05:19,524
повлиять на изменение состояния других

106
00:05:19,562 --> 00:05:22,164
акторов, только отправив

107
00:05:22,202 --> 00:05:25,776
в ответ конечное число сообщений.  С

108
00:05:25,808 --> 00:05:27,512
точки зрения разработки программного обеспечения, этот

109
00:05:27,566 --> 00:05:30,051
принцип изоляции ограничивает потенциальные

110
00:05:30,116 --> 00:05:33,111
побочные эффекты операции одним

111
00:05:33,166 --> 00:05:35,924
действующим лицом, тем самым повышая

112
00:05:35,972 --> 00:05:39,072
общую предсказуемость системы

113
00:05:39,236 --> 00:05:42,104
и, что наиболее важно, если его полностью принять,

114
00:05:42,232 --> 00:05:44,910
может фактически упростить проект.

115
00:05:46,560 --> 00:05:48,636
Глядя на диаграмму, мы видим

116
00:05:48,658 --> 00:05:51,616
экосистему актеров, отправляющих сообщения

117
00:05:51,638 --> 00:05:54,635
определенному актеру, который, в свою очередь, отправляет

118
00:05:54,668 --> 00:05:57,040
обратно сообщения другим актерам.

119
00:05:58,340 --> 00:06:00,690
Где активный вывод?  Что ж,

120
00:06:01,300 --> 00:06:03,816
давайте переведем получение и отправку

121
00:06:03,868 --> 00:06:07,392
сообщений в цикл действий восприятия

122
00:06:07,536 --> 00:06:09,620
и обозначим внешние,

123
00:06:10,200 --> 00:06:13,539
внутренние, сенсорные и

124
00:06:13,610 --> 00:06:17,112
активные состояния.  И теперь у нас явно есть

125
00:06:17,166 --> 00:06:19,956
необходимая основа для активного

126
00:06:19,988 --> 00:06:22,600
вывода — одеяло Маркова.  Действующие

127
00:06:23,660 --> 00:06:26,436
лица модели акторов

128
00:06:26,468 --> 00:06:28,848
напрямую сопоставляются с агентами активного

129
00:06:28,884 --> 00:06:32,840
вывода.  Кроме того, важным общим свойством также является конечность, то есть

130
00:06:33,000 --> 00:06:35,676
тот факт, что актор может отправить

131
00:06:35,698 --> 00:06:39,003
в ответ только конечное число сообщений

132
00:06:39,042 --> 00:06:41,150
.

133
00:06:41,940 --> 00:06:44,780
Поскольку активный вывод моделирует реальность,

134
00:06:44,940 --> 00:06:47,452
он обязательно учитывает

135
00:06:47,516 --> 00:06:50,704
ограничения ресурсов реальных систем.  И это

136
00:06:50,742 --> 00:06:53,376
прекрасно заложено в основу

137
00:06:53,398 --> 00:06:56,496
активной модели.  Давайте рассмотрим еще один основной

138
00:06:56,528 --> 00:06:59,860
принцип асинхронной передачи сообщений.

139
00:07:00,840 --> 00:07:03,012
Общение между актерами

140
00:07:03,066 --> 00:07:05,936
асинхронно.  Это означает, что актер

141
00:07:05,968 --> 00:07:07,832
не ждет ответа после

142
00:07:07,886 --> 00:07:10,680
отправки сообщения.  Он продолжает работать,

143
00:07:10,830 --> 00:07:13,210
он продолжает как бы жить.

144
00:07:13,820 --> 00:07:17,256
Это имеет решающее значение, поскольку оно разделяет

145
00:07:17,278 --> 00:07:20,284
участников, что приводит к созданию системы, которая может

146
00:07:20,322 --> 00:07:23,020
продолжать функционировать, жить и

147
00:07:23,090 --> 00:07:25,948
прогрессировать, даже когда части системы

148
00:07:26,034 --> 00:07:28,551
работают медленно или даже временно

149
00:07:28,616 --> 00:07:31,964
недоступны.  Профессор Фристон

150
00:07:32,012 --> 00:07:34,028
сказал, что принцип свободной энергии —

151
00:07:34,124 --> 00:07:38,240
это главный экзистенциальный вопрос. Если

152
00:07:38,310 --> 00:07:41,490
вещи существуют, что они должны делать?

153
00:07:42,660 --> 00:07:45,412
Что ж, модель актера утверждает, что они

154
00:07:45,466 --> 00:07:47,350
не должны ждать от других.

155
00:07:48,360 --> 00:07:51,572
Конечно, актер может ждать

156
00:07:51,626 --> 00:07:55,284
от других, но его нельзя принуждать к

157
00:07:55,322 --> 00:07:58,808
этому в модели.  Выбор должен быть свободен

158
00:07:58,894 --> 00:07:59,770
.

159
00:08:01,820 --> 00:08:04,004
Это подводит нас к другому важнейшему

160
00:08:04,052 --> 00:08:06,456
принципу: обе модели обладают

161
00:08:06,558 --> 00:08:09,719
автономией.  Принцип свободной энергии —

162
00:08:09,790 --> 00:08:12,860
это модель физической реальности,

163
00:08:13,280 --> 00:08:15,547
а наша реальность, в конце концов,

164
00:08:15,634 --> 00:08:18,904
параллельна.  По всему бесконечному

165
00:08:18,952 --> 00:08:21,572
пространству системы развиваются

166
00:08:21,656 --> 00:08:24,048
одновременно в соответствии со своей локальной

167
00:08:24,134 --> 00:08:27,696
динамикой.  И поэтому это

168
00:08:27,718 --> 00:08:29,344
отражено в основе

169
00:08:29,382 --> 00:08:33,024
принципа свободной энергии.  Конечно, модель

170
00:08:33,062 --> 00:08:35,796
вычислений не должна ограничиваться

171
00:08:35,818 --> 00:08:38,784
физикой.  Но Хьюитт и др.  Мы стремились

172
00:08:38,832 --> 00:08:41,395
разработать модель, которая моделировала бы

173
00:08:41,418 --> 00:08:43,664
реальность распределенных параллельных

174
00:08:43,712 --> 00:08:47,056
систем.  И, к счастью для нас,

175
00:08:47,088 --> 00:08:50,824
модель актора охватывает как параллелизм, рассматриваемый

176
00:08:50,862 --> 00:08:53,352
с точки зрения принципа изоляции, так и

177
00:08:53,486 --> 00:08:56,500
автономию актора, что делает ее совместимой

178
00:08:56,580 --> 00:08:58,040
с активным выводом.

179
00:08:59,200 --> 00:09:01,820
Далее мы переходим к гнездованию.

180
00:09:02,640 --> 00:09:05,532
Модель актера позволяет актеру

181
00:09:05,586 --> 00:09:08,552
не только получать и отправлять конечное

182
00:09:08,616 --> 00:09:11,984
количество сообщений для восприятия и действия, но

183
00:09:12,182 --> 00:09:15,292
также позволяет в качестве действия создавать

184
00:09:15,356 --> 00:09:18,240
конечное число новых актеров.

185
00:09:19,220 --> 00:09:21,504
Эти акторы могут либо быть вложены в

186
00:09:21,542 --> 00:09:24,336
родительский элемент, скажем, в части животной

187
00:09:24,368 --> 00:09:26,564
клетки, либо выпущены в

188
00:09:26,602 --> 00:09:29,076
окружающую среду как независимые акторы.  С

189
00:09:29,098 --> 00:09:32,336
этого момента модель

190
00:09:32,368 --> 00:09:34,628
прекрасно сочетается с прекрасными концепциями

191
00:09:34,714 --> 00:09:37,960
многомасштабного вложения и активного вывода.

192
00:09:38,940 --> 00:09:41,460
Это позволяет акторам содержать

193
00:09:41,540 --> 00:09:44,791
экосистемы акторов как

194
00:09:44,846 --> 00:09:47,290
снизу, так и сверху.

195
00:09:49,200 --> 00:09:51,976
Наконец, я хочу рассказать еще о двух

196
00:09:52,008 --> 00:09:55,436
принципах проектирования моделей актеров: изменении поведения

197
00:09:55,618 --> 00:09:57,020
и постоянстве.

198
00:09:59,040 --> 00:10:01,664
Актеры имеют возможность изменить свое

199
00:10:01,702 --> 00:10:04,450
поведение в ответ на сообщение.

200
00:10:05,140 --> 00:10:08,192
Эта адаптивность позволяет

201
00:10:08,246 --> 00:10:10,924
создавать сложные

202
00:10:10,972 --> 00:10:14,130
объекты с состоянием, которые могут развиваться со временем.

203
00:10:14,760 --> 00:10:17,492
И действительно, это позволяет целым

204
00:10:17,626 --> 00:10:21,584
экосистемам развивать новые формы

205
00:10:21,632 --> 00:10:25,263
поведения.  При использовании для

206
00:10:25,312 --> 00:10:28,264
разработки программного обеспечения это становится мощным инструментом

207
00:10:28,382 --> 00:10:31,800
для управления сложными динамическими системами.

208
00:10:32,700 --> 00:10:35,412
Активный вывод, конечно, доводит

209
00:10:35,476 --> 00:10:39,304
это до крайности.  Сама суть

210
00:10:39,352 --> 00:10:42,363
вещности — это постоянная попытка

211
00:10:42,402 --> 00:10:45,324
предсказать окружающую среду и адаптироваться к ней и,

212
00:10:45,362 --> 00:10:48,439
таким образом, продолжать существовать, чтобы сохранить

213
00:10:48,520 --> 00:10:52,828
марковское одеяло в бурлящем море

214
00:10:53,004 --> 00:10:56,736
активности.  Наряду с

215
00:10:56,758 --> 00:10:58,912
этим также приходит концепция

216
00:10:58,966 --> 00:11:02,444
настойчивости.  Постоянство позволяет акторам

217
00:11:02,492 --> 00:11:05,524
сохранять свое состояние и позже восстанавливать или

218
00:11:05,562 --> 00:11:08,640
изменять его — особенность,

219
00:11:08,720 --> 00:11:11,300
воплощающая принцип памяти.

220
00:11:11,800 --> 00:11:14,675
Память является необходимым условием для обучения

221
00:11:14,778 --> 00:11:18,504
и адаптации.  Способность агента

222
00:11:18,622 --> 00:11:21,640
прогнозировать зависит от его способности

223
00:11:21,710 --> 00:11:24,356
запоминать прошлый опыт и, таким образом,

224
00:11:24,388 --> 00:11:27,176
минимизировать удивление, связанное с

225
00:11:27,198 --> 00:11:30,520
неожиданностью.  Жизненно важная роль памяти

226
00:11:30,600 --> 00:11:34,056
также подчеркивается, когда мы предполагаем,

227
00:11:34,088 --> 00:11:36,199
что у агентов есть индуктивные априоры,

228
00:11:36,280 --> 00:11:39,100
либо основанные на опыте, либо наследственности,

229
00:11:39,440 --> 00:11:41,470
вносящие вклад в их модель мира.

230
00:11:42,340 --> 00:11:44,464
Эта модель мира одновременно направляет их

231
00:11:44,502 --> 00:11:47,291
нынешнее поведение и постоянно

232
00:11:47,356 --> 00:11:50,028
обновляется на основе нового опыта,

233
00:11:50,204 --> 00:11:52,939
способствующего их постоянной адаптации

234
00:11:53,020 --> 00:11:54,240
и существованию.

235
00:11:56,600 --> 00:11:59,684
Хорошо, отлично.  Вы говорите, что

236
00:11:59,722 --> 00:12:02,308
между моделью актора

237
00:12:02,394 --> 00:12:06,424
и активным выводом существуют четкие и глубокие связи.  Но как

238
00:12:06,462 --> 00:12:08,756
это поможет нам в сообществе активных выводов

239
00:12:08,788 --> 00:12:11,988
?  Ну, во-первых,

240
00:12:12,084 --> 00:12:14,084
на мой взгляд, это

241
00:12:14,132 --> 00:12:16,520
парадигма разработки программного обеспечения, которую нам следует принять.

242
00:12:16,860 --> 00:12:19,340
И если мы это сделаем, то, конечно, есть

243
00:12:19,410 --> 00:12:21,815
библиотеки и платформы моделей актеров,

244
00:12:21,848 --> 00:12:25,448
которые мы можем использовать, такие как ACA,

245
00:12:25,624 --> 00:12:29,752
Orleans, театральный Actix

246
00:12:29,896 --> 00:12:33,055
Protoactor и многие другие, которые мы можем

247
00:12:33,078 --> 00:12:35,516
немедленно использовать при создании

248
00:12:35,548 --> 00:12:37,872
программных модулей и

249
00:12:37,926 --> 00:12:41,596
приложений для активного вывода.  Существуют также библиотеки,

250
00:12:41,708 --> 00:12:43,944
языки и даже языковые функции,

251
00:12:44,012 --> 00:12:46,016
которые очень хорошо согласуются с

252
00:12:46,048 --> 00:12:49,380
принципами модели актера, такие как Zero,

253
00:12:49,450 --> 00:12:52,640
MQ, tokyo и Rust,

254
00:12:52,800 --> 00:12:56,284
Erlang, Async, Await и C. Sharp

255
00:12:56,432 --> 00:13:00,104
и т. д.  Но более важным, чем

256
00:13:00,142 --> 00:13:04,712
инструменты, доступные нам сегодня, является

257
00:13:04,766 --> 00:13:07,544
подход к проектированию программного обеспечения, который будет

258
00:13:07,582 --> 00:13:10,136
направлять нас при создании

259
00:13:10,168 --> 00:13:13,996
программного обеспечения для активного вывода завтрашнего дня.

260
00:13:14,018 --> 00:13:16,764
Модель актера обеспечивает парадигму

261
00:13:16,802 --> 00:13:20,588
проектирования и разработки программного обеспечения, которая

262
00:13:20,754 --> 00:13:24,064
наиболее идеально подходит для

263
00:13:24,102 --> 00:13:28,160
активного вывода.  Это очевидно

264
00:13:28,580 --> 00:13:30,876
не только из согласованности основных

265
00:13:30,908 --> 00:13:34,084
принципов, которые мы обсуждали ранее, но

266
00:13:34,122 --> 00:13:37,055
и из понимания, которое активный

267
00:13:37,088 --> 00:13:39,156
вывод в модели актора приносит

268
00:13:39,178 --> 00:13:42,916
друг другу.  Например, рассмотрим то, что

269
00:13:42,938 --> 00:13:46,604
сейчас называется законом Хьюитта.  Неформально

270
00:13:46,672 --> 00:13:49,800
сформулированный, поскольку все есть повсюду,

271
00:13:51,260 --> 00:13:54,824
этот закон означает идею о том, что

272
00:13:54,942 --> 00:13:57,844
в действительно асинхронной распределенной

273
00:13:57,892 --> 00:14:00,652
системе сообщение может пройти произвольное количество

274
00:14:00,706 --> 00:14:03,532
времени из одного

275
00:14:03,586 --> 00:14:07,032
места в другое, и любой субъект

276
00:14:07,096 --> 00:14:10,364
должен быть готов к этому событию.  В такой системе

277
00:14:10,402 --> 00:14:13,900
просто не существует такого понятия, как мгновенность

278
00:14:13,980 --> 00:14:17,888
, и ни один компонент не может

279
00:14:17,974 --> 00:14:20,384
сделать предположение о времени

280
00:14:20,422 --> 00:14:23,548
действий другого компонента.  Фактически,

281
00:14:23,734 --> 00:14:26,980
нужно действовать так, как будто сообщение может

282
00:14:27,050 --> 00:14:30,819
никогда не прийти.  Это имеет важные

283
00:14:30,890 --> 00:14:34,644
последствия.  Это говорит о том, что

284
00:14:34,682 --> 00:14:36,744
невозможно точно и

285
00:14:36,782 --> 00:14:39,176
последовательно определить состояние

286
00:14:39,198 --> 00:14:42,569
всей системы в любой момент времени,

287
00:14:43,260 --> 00:14:45,464
поскольку информация, возможно, даже не

288
00:14:45,502 --> 00:14:48,410
распространилась по системе.

289
00:14:49,760 --> 00:14:52,904
А также попытки реализовать глобальную

290
00:14:52,952 --> 00:14:55,400
синхронизацию неизбежно приведут к

291
00:14:55,480 --> 00:14:57,864
появлению узких мест и снижению

292
00:14:57,912 --> 00:15:01,844
эффективности.  Закон Хьюитта подчеркивает

293
00:15:01,912 --> 00:15:04,976
необходимость разработки систем таким

294
00:15:04,998 --> 00:15:07,580
образом, чтобы они могли эффективно справляться с

295
00:15:07,660 --> 00:15:09,504
этими неизбежными задержками и

296
00:15:09,542 --> 00:15:11,776
неопределенностями, подчеркивая

297
00:15:11,798 --> 00:15:14,424
важность надежных неблокирующих

298
00:15:14,492 --> 00:15:17,540
механизмов связи и

299
00:15:17,690 --> 00:15:21,284
возможностей принятия локальных решений.  Короче говоря,

300
00:15:21,482 --> 00:15:24,240
модельные системы Гектора по своей природе

301
00:15:24,400 --> 00:15:27,944
недетерминированы.  Это звучит

302
00:15:27,982 --> 00:15:31,800
знакомо?  Какая еще парадигма подчеркивает

303
00:15:32,140 --> 00:15:34,616
работу в условиях неопределенности и

304
00:15:34,638 --> 00:15:36,904
автономию, позволяющую продолжать работу, несмотря на окружающую

305
00:15:36,942 --> 00:15:40,328
среду?  Активный вывод и

306
00:15:40,334 --> 00:15:43,767
принцип свободной энергии?  Активный вывод

307
00:15:43,864 --> 00:15:46,552
отражает реальность непредсказуемого

308
00:15:46,616 --> 00:15:48,792
мира, в котором работают наши программные системы

309
00:15:48,856 --> 00:15:51,920
.  Различные исходы могут быть результатом одних и тех

310
00:15:51,990 --> 00:15:55,136
же начальных условий из-за

311
00:15:55,158 --> 00:15:57,756
возникновения событий в случайном,

312
00:15:57,868 --> 00:16:01,644
непредсказуемом порядке.  Это концепция

313
00:16:01,692 --> 00:16:04,310
неожиданности, которую мы все хорошо знаем:

314
00:16:05,000 --> 00:16:07,572
агент обновляет свои представления о

315
00:16:07,626 --> 00:16:10,404
мире, когда получаемая им сенсорная информация

316
00:16:10,442 --> 00:16:13,060
не соответствует его предсказаниям.

317
00:16:13,720 --> 00:16:15,856
И модель актора, и активный

318
00:16:15,888 --> 00:16:18,328
вывод признают, что мир

319
00:16:18,414 --> 00:16:21,624
непредсказуем.  Модели даже больше, чем

320
00:16:21,662 --> 00:16:24,632
признают это, принимают эту

321
00:16:24,686 --> 00:16:27,688
неопределенность как данность, а не как нечто, от чего можно

322
00:16:27,774 --> 00:16:29,530
избавиться.

323
00:16:30,780 --> 00:16:33,752
Действительно, как мы знаем из принципа свободной энергии

324
00:16:33,806 --> 00:16:36,204
, неопределенность, которую мы

325
00:16:36,242 --> 00:16:38,459
поддерживаем в наших моделях, дает нам

326
00:16:38,530 --> 00:16:41,020
гибкость для адаптации.

327
00:16:43,540 --> 00:16:46,555
Возможно, это всего лишь мой личный полет

328
00:16:46,588 --> 00:16:49,199
фантазии, но я представляю себе будущее, в котором

329
00:16:49,270 --> 00:16:51,596
программные модули, управляемые активным

330
00:16:51,628 --> 00:16:54,976
выводом, покончат с жестко запрограммированной

331
00:16:55,008 --> 00:16:57,792
обработкой ошибок и заменяются

332
00:16:57,856 --> 00:17:00,672
алгоритмами вероятностного обучения, которые оптимизируются

333
00:17:00,736 --> 00:17:03,200
по мере развития ландшафта ошибок

334
00:17:03,280 --> 00:17:07,316
.  Модули, которые представляют собой надежные

335
00:17:07,428 --> 00:17:11,268
и самовосстанавливающиеся распределенные системы

336
00:17:11,364 --> 00:17:13,672
без единых точек отказа,

337
00:17:13,726 --> 00:17:17,716
ориентированные на прогнозируемое предотвращение сбоев,

338
00:17:17,907 --> 00:17:21,659
а не на реактивное восстановление после сбоев.

339
00:17:23,040 --> 00:17:25,308
Заглядывая в будущее, мы, как

340
00:17:25,314 --> 00:17:28,044
сообщество, обладаем потенциалом раздвинуть

341
00:17:28,082 --> 00:17:31,700
границы как теории активных импринтов, так

342
00:17:31,880 --> 00:17:34,576
и практической реализации

343
00:17:34,598 --> 00:17:37,611
модели актора.  Объединив сильные стороны

344
00:17:37,676 --> 00:17:40,096
этих двух парадигм, мы можем

345
00:17:40,118 --> 00:17:42,860
создавать надежные,

346
00:17:43,020 --> 00:17:45,876
адаптивные и более адаптированные к

347
00:17:45,898 --> 00:17:48,500
физическому миру, в котором они фактически

348
00:17:48,650 --> 00:17:52,100
работают, программные системы.  Представьте себе будущее,

349
00:17:52,170 --> 00:17:54,976
в котором программные компоненты, использующие активный

350
00:17:55,008 --> 00:17:57,112
вывод в модели субъекта, смогут

351
00:17:57,166 --> 00:18:00,344
предвидеть потенциальные проблемы, учиться на

352
00:18:00,382 --> 00:18:04,024
прошлых ошибках и адаптироваться в реальном времени к

353
00:18:04,062 --> 00:18:07,144
изменениям окружающей среды.  Благодаря такому

354
00:18:07,182 --> 00:18:09,212
подходу мы можем создавать системы, которые

355
00:18:09,266 --> 00:18:11,996
существенно более устойчивы и

356
00:18:12,018 --> 00:18:15,084
эффективны.  По моему мнению, это может привести к

357
00:18:15,122 --> 00:18:17,784
существенному изменению надежности

358
00:18:17,912 --> 00:18:21,052
, производительности и масштабируемости программного обеспечения и

359
00:18:21,106 --> 00:18:24,044
ознаменует новую эру вычислений, вплетая

360
00:18:24,092 --> 00:18:27,264
принципы биологии и познания в

361
00:18:27,302 --> 00:18:30,060
структуру наших программных систем,

362
00:18:30,220 --> 00:18:32,416
приближая их к жизни

363
00:18:32,438 --> 00:18:36,420
.  В заключение отметим, что

364
00:18:37,160 --> 00:18:39,636
сочетание активного вывода с

365
00:18:39,658 --> 00:18:42,803
моделью субъекта обеспечивает новую мощную

366
00:18:42,842 --> 00:18:44,564
линзу, через которую мы можем взглянуть на

367
00:18:44,602 --> 00:18:46,820
проектирование и разработку программного обеспечения.

368
00:18:47,180 --> 00:18:49,412
Независимо от того, используем ли мы существующие языки

369
00:18:49,476 --> 00:18:51,476
и библиотеки, ориентированные на активный

370
00:18:51,508 --> 00:18:54,728
вывод, или изобретаем новые,

371
00:18:54,894 --> 00:18:58,056
мы стоим на пороге

372
00:18:58,078 --> 00:19:01,944
захватывающего рубежа.  Итак, давайте воспользуемся

373
00:19:01,992 --> 00:19:05,068
моментом, взглянем на модель актера

374
00:19:05,154 --> 00:19:06,776
и ее связь с активным

375
00:19:06,808 --> 00:19:09,484
выводом и сформируем будущее

376
00:19:09,522 --> 00:19:11,980
интеллектуальных распределенных вычислений.

377
00:19:13,040 --> 00:19:14,460
Спасибо за то, что вы слушали.

378
00:19:17,790 --> 00:19:21,050
Потрясающий.  Отличный доклад

379
00:19:21,120 --> 00:19:23,126
Кейта.  Спасибо, Кит, за

380
00:19:23,158 --> 00:19:25,985
это. В чате было несколько комментариев

381
00:19:26,008 --> 00:19:28,978
.  Итак, Кейт, возможно, если ты захочешь

382
00:19:28,984 --> 00:19:32,641
присоединиться к A-Q-A когда-нибудь в будущем, но это

383
00:19:32,696 --> 00:19:33,949
действительно крутая презентация.

