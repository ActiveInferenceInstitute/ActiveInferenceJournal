1
00:00:01,290 --> 00:00:04,494
Oké, de volgende is

2
00:00:04,532 --> 00:00:06,606
Keith Dugger, die een vooraf opgenomen video heeft ingezonden

3
00:00:06,628 --> 00:00:09,118
.  De vooraf opgenomen video

4
00:00:09,204 --> 00:00:11,694
wordt actieve inferentie genoemd.  En het

5
00:00:11,732 --> 00:00:14,765
acteursmodel. Dus ik zal dat

6
00:00:14,788 --> 00:00:15,920
nu ter sprake brengen.

7
00:00:29,430 --> 00:00:32,958
Oké, hier is Keiths

8
00:00:33,134 --> 00:00:35,910
vooraf opgenomen video over actieve inferentie

9
00:00:35,990 --> 00:00:37,660
en het acteursmodel.

10
00:00:44,240 --> 00:00:46,956
Actieve gevolgtrekking en het actormodel.

11
00:00:47,138 --> 00:00:49,608
Hallo.  Hallo.  Ik ben Dr. Keith Thugger,

12
00:00:49,704 --> 00:00:52,684
platform CTO bij X Ray, een uitgebreide

13
00:00:52,732 --> 00:00:56,464
reality-AI.  Bedrijf en medepresentator van de

14
00:00:56,502 --> 00:00:58,880
Machine Learning Street Talk-podcast.

15
00:00:59,780 --> 00:01:02,624
Nu we allemaal werken aan het opbouwen van een

16
00:01:02,662 --> 00:01:05,536
ecosysteem gebaseerd op actieve inferentie,

17
00:01:05,728 --> 00:01:08,324
zal software uiteraard een

18
00:01:08,362 --> 00:01:11,363
fundamentele rol spelen om het meeste uit

19
00:01:11,402 --> 00:01:13,204
actieve inferentie te halen.  We zullen

20
00:01:13,242 --> 00:01:15,524
software-engineeringparadigma's moeten gebruiken die

21
00:01:15,562 --> 00:01:17,636
aansluiten bij de principes van actieve

22
00:01:17,668 --> 00:01:20,136
inferentie, en ik denk dat er één is die

23
00:01:20,238 --> 00:01:22,664
op maat is gemaakt voor onze behoeften.  Het heet

24
00:01:22,702 --> 00:01:26,084
het acteursmodel.  Active Inference

25
00:01:26,132 --> 00:01:28,356
en het Actor Model zijn twee diep

26
00:01:28,388 --> 00:01:30,750
verbonden inzichten in de wereld.

27
00:01:31,280 --> 00:01:34,204
Ze bieden fundamentele raamwerken voor het

28
00:01:34,242 --> 00:01:36,280
omgaan met de dynamiek van complexe

29
00:01:36,360 --> 00:01:39,624
systemen, met een focus op autonome

30
00:01:39,672 --> 00:01:42,672
agenten die op elkaar inwerken in een ecologie van

31
00:01:42,726 --> 00:01:46,283
geneste systemen.  Ik zou graag

32
00:01:46,332 --> 00:01:47,916
enkele van hun belangrijkste verbanden willen onderzoeken,

33
00:01:48,108 --> 00:01:50,050
waaronder de rol van

34
00:01:50,500 --> 00:01:53,040
gelijktijdigheid, autonomie,

35
00:01:53,380 --> 00:01:57,300
onzekerheid en gedragsaanpassing.

36
00:01:58,680 --> 00:02:00,596
We zullen zien dat actieve inferentie en

37
00:02:00,618 --> 00:02:03,184
het Actieve model beide paradigmaverschuivingen zijn,

38
00:02:03,232 --> 00:02:06,300
weg van een deterministisch,

39
00:02:06,480 --> 00:02:10,392
gecentraliseerd, stapsgewijs denken naar

40
00:02:10,446 --> 00:02:14,004
een gedecentraliseerd netwerkconcurrentieperspectief

41
00:02:14,052 --> 00:02:17,751
van zowel berekening als

42
00:02:17,806 --> 00:02:21,052
cognitie.  Even een klein stukje geschiedenis

43
00:02:21,106 --> 00:02:25,100
over het Actor-model.  In 1973 werkten

44
00:02:25,250 --> 00:02:28,504
Karl Hewitt, Peter Bishop en Richard

45
00:02:28,552 --> 00:02:30,555
Steiger allemaal in het

46
00:02:30,578 --> 00:02:33,676
AI-lab van het Massachusetts Institute of Technology

47
00:02:33,708 --> 00:02:37,804
aan Fundamentalize, een concept

48
00:02:37,852 --> 00:02:40,972
van gelijktijdige berekening dat

49
00:02:41,036 --> 00:02:44,304
zowel structuur als aanpasbare

50
00:02:44,352 --> 00:02:46,020
algoritme-uitvoering omvatte.

51
00:02:47,480 --> 00:02:49,744
Conventionele methoden ontbeerden destijds

52
00:02:49,792 --> 00:02:52,224
robuustheid en veilige wiskundige

53
00:02:52,272 --> 00:02:55,263
grondslagen.  Hun gezamenlijke inspanning

54
00:02:55,312 --> 00:02:57,576
leidde uiteindelijk tot de creatie van het

55
00:02:57,598 --> 00:03:01,076
Actor-model.  Destijds werd het

56
00:03:01,108 --> 00:03:03,224
als revolutionair beschouwd vanwege de

57
00:03:03,262 --> 00:03:05,764
kenmerken van zowel verhoogde

58
00:03:05,812 --> 00:03:08,784
fouttolerantie als gedistribueerde

59
00:03:08,852 --> 00:03:12,236
rekenmogelijkheden.  Gedurende de jaren tachtig en

60
00:03:12,258 --> 00:03:15,388
negentig werd het Actor-model een

61
00:03:15,394 --> 00:03:18,476
basis voor talrijke onderzoeksprojecten

62
00:03:18,498 --> 00:03:20,856
en praktische projecten, en won het aan

63
00:03:20,888 --> 00:03:23,184
populariteit vanwege zijn flexibiliteit en

64
00:03:23,222 --> 00:03:25,516
intuïtieve benadering van gelijktijdige

65
00:03:25,548 --> 00:03:29,648
berekeningen.  Het werd voornamelijk gebruikt in

66
00:03:29,734 --> 00:03:32,240
kunstmatige intelligentie en multi-

67
00:03:32,310 --> 00:03:34,400
agentsystemen.  Klinkt bekend?

68
00:03:35,880 --> 00:03:38,784
Nieuwe op Actor gebaseerde talen zoals Actor,

69
00:03:38,912 --> 00:03:42,116
Saulson en Erlang hebben bijgedragen aan

70
00:03:42,138 --> 00:03:44,356
de verfijning van het model, waardoor het is omgevormd

71
00:03:44,378 --> 00:03:47,203
tot een robuustere en flexibelere benadering

72
00:03:47,332 --> 00:03:50,148
van gelijktijdig computergebruik, en het blijft vandaag de dag nog steeds

73
00:03:50,244 --> 00:03:52,164
springlevend in de informatica

74
00:03:52,212 --> 00:03:55,272
.  Meer recentelijk heeft het Actor-model

75
00:03:55,326 --> 00:03:57,796
hernieuwde belangstelling gekregen, voornamelijk als gevolg

76
00:03:57,828 --> 00:03:59,944
van de groeiende behoefte aan gedistribueerde

77
00:03:59,992 --> 00:04:02,904
systemen, cloud computing en edge

78
00:04:02,952 --> 00:04:05,036
computing, die het Internet of

79
00:04:05,058 --> 00:04:07,310
Things en Web 30 voeden.

80
00:04:08,480 --> 00:04:11,351
Deze computertaken zijn bij uitstek geschikt

81
00:04:11,416 --> 00:04:13,436
om te profiteren van de architectuur van het ACA-model.

82
00:04:13,468 --> 00:04:16,800
, dat precies is ontworpen

83
00:04:16,950 --> 00:04:20,368
voor het modelleren van de gelijktijdige verwerking van zowel

84
00:04:20,534 --> 00:04:23,409
grote hoeveelheden gegevens aan de ene kant

85
00:04:23,800 --> 00:04:26,752
als fijnkorrelige, ongelijksoortige autonome

86
00:04:26,816 --> 00:04:28,710
systemen aan de andere kant.

87
00:04:29,640 --> 00:04:32,003
Deze toepassing van het Actor-model heeft

88
00:04:32,042 --> 00:04:34,436
diepgaande gevolgen gehad voor grote bedrijven

89
00:04:34,538 --> 00:04:36,904
die de principes ervan hebben gebruikt om

90
00:04:36,942 --> 00:04:38,936
big data-problemen aan te pakken, zoals

91
00:04:38,958 --> 00:04:41,348
Twitter, Facebook en

92
00:04:41,524 --> 00:04:45,256
LinkedIn, dus wat heeft dit te

93
00:04:45,278 --> 00:04:47,636
maken met actieve gevolgtrekking?  Ik

94
00:04:47,668 --> 00:04:49,368
neem aan dat je al enkele

95
00:04:49,374 --> 00:04:51,656
parallellen in de intro hebt gehoord.  Maar laten we

96
00:04:51,688 --> 00:04:53,656
beginnen met te kijken naar enkele

97
00:04:53,688 --> 00:04:56,396
kernprincipes van het actormodel en hoe

98
00:04:56,418 --> 00:04:58,568
deze zich verhouden tot de principes van actieve

99
00:04:58,584 --> 00:05:01,236
gevolgtrekking.  Laten we beginnen met het concept

100
00:05:01,288 --> 00:05:04,832
van isolatie.  Isolatie betekent

101
00:05:04,886 --> 00:05:07,664
dat een actor in het actormodel

102
00:05:07,702 --> 00:05:10,464
zijn toestand met geen enkele andere

103
00:05:10,502 --> 00:05:14,212
actor deelt.  Dit kan alleen worden beïnvloed door het

104
00:05:14,266 --> 00:05:17,060
ontvangen van een bericht.  En het kan alleen

105
00:05:17,130 --> 00:05:19,524
verandering in de toestand van andere

106
00:05:19,562 --> 00:05:22,164
actoren beïnvloeden door als reactie een eindig aantal

107
00:05:22,202 --> 00:05:25,776
berichten te sturen.  Vanuit het

108
00:05:25,808 --> 00:05:27,512
oogpunt van software-engineering

109
00:05:27,566 --> 00:05:30,051
beperkt dit isolatieprincipe de potentiële

110
00:05:30,116 --> 00:05:33,111
bijwerkingen van een operatie tot één enkele

111
00:05:33,166 --> 00:05:35,924
actor, waardoor de

112
00:05:35,972 --> 00:05:39,072
algehele betrouwbaarheid van de voorspelbaarheid van het systeem wordt verbeterd

113
00:05:39,236 --> 00:05:42,104
en, het allerbelangrijkste: als het volledig wordt omarmd,

114
00:05:42,232 --> 00:05:44,910
het ontwerp daadwerkelijk kan worden vereenvoudigd.  Als we

115
00:05:46,560 --> 00:05:48,636
naar het diagram kijken, zien we een

116
00:05:48,658 --> 00:05:51,616
ecosysteem van actoren die berichten sturen naar

117
00:05:51,638 --> 00:05:54,635
een bepaalde actor, die op zijn beurt

118
00:05:54,668 --> 00:05:57,040
berichten terugstuurt naar andere actoren.

119
00:05:58,340 --> 00:06:00,690
Waar is actieve gevolgtrekking?  Laten

120
00:06:01,300 --> 00:06:03,816
we het ontvangen en verzenden van

121
00:06:03,868 --> 00:06:07,392
berichten herschikken naar een perceptie-actiecyclus

122
00:06:07,536 --> 00:06:09,620
en externe,

123
00:06:10,200 --> 00:06:13,539
interne, zintuiglijke en

124
00:06:13,610 --> 00:06:17,112
actieve toestanden aanduiden.  En we hebben nu duidelijk

125
00:06:17,166 --> 00:06:19,956
de noodzakelijke basis voor actieve

126
00:06:19,988 --> 00:06:22,600
gevolgtrekking, een Markov-deken.

127
00:06:23,660 --> 00:06:26,436
De actoren van het actormodel komen

128
00:06:26,468 --> 00:06:28,848
rechtstreeks overeen met de agenten van actieve

129
00:06:28,884 --> 00:06:32,840
gevolgtrekking.  Daarnaast is ook de eindigheid,

130
00:06:33,000 --> 00:06:35,676
het feit dat een actor slechts een

131
00:06:35,698 --> 00:06:39,003
eindig aantal berichten kan sturen als reactie,

132
00:06:39,042 --> 00:06:41,150
een belangrijke gedeelde eigenschap.

133
00:06:41,940 --> 00:06:44,780
Omdat actieve inferentie de werkelijkheid modelleert,

134
00:06:44,940 --> 00:06:47,452
respecteert het noodzakelijkerwijs de hulpbronnenbeperkingen

135
00:06:47,516 --> 00:06:50,704
van echte systemen.  En dit

136
00:06:50,742 --> 00:06:53,376
baadt mooi in de basis van het

137
00:06:53,398 --> 00:06:56,496
actieve model.  Laten we eens kijken naar een ander

138
00:06:56,528 --> 00:06:59,860
kernprincipe: het asynchrone doorgeven van berichten.  De

139
00:07:00,840 --> 00:07:03,012
communicatie tussen actoren is

140
00:07:03,066 --> 00:07:05,936
asynchroon.  Dit betekent dat een acteur

141
00:07:05,968 --> 00:07:07,832
niet wacht op een reactie nadat hij

142
00:07:07,886 --> 00:07:10,680
een bericht heeft verzonden.  Het blijft werken,

143
00:07:10,830 --> 00:07:13,210
het blijft als het ware leven.

144
00:07:13,820 --> 00:07:17,256
Dit is van cruciaal belang omdat het de

145
00:07:17,278 --> 00:07:20,284
actoren ontkoppelt, wat leidt tot een systeem dat kan

146
00:07:20,322 --> 00:07:23,020
blijven functioneren, leven en

147
00:07:23,090 --> 00:07:25,948
vooruitgang kan blijven boeken, zelfs als delen van het systeem

148
00:07:26,034 --> 00:07:28,551
traag zijn of zelfs tijdelijk

149
00:07:28,616 --> 00:07:31,964
niet beschikbaar zijn.  Professor Friston

150
00:07:32,012 --> 00:07:34,028
heeft gezegd dat het vrije-energieprincipe

151
00:07:34,124 --> 00:07:38,240
de ultieme existentiële vraag is: als

152
00:07:38,310 --> 00:07:41,490
dingen bestaan, wat moeten ze dan doen?

153
00:07:42,660 --> 00:07:45,412
Welnu, het acteursmodel beweert dat ze

154
00:07:45,466 --> 00:07:47,350
niet op anderen moeten wachten.

155
00:07:48,360 --> 00:07:51,572
Natuurlijk kan een acteur ervoor kiezen om

156
00:07:51,626 --> 00:07:55,284
op anderen te wachten, maar hij mag

157
00:07:55,322 --> 00:07:58,808
daartoe in het model niet gedwongen worden.  Het moet vrij zijn

158
00:07:58,894 --> 00:07:59,770
om te kiezen.

159
00:08:01,820 --> 00:08:04,004
Dit brengt ons bij een ander cruciaal

160
00:08:04,052 --> 00:08:06,456
principe: beide modellen delen

161
00:08:06,558 --> 00:08:09,719
autonomie.  Het vrije

162
00:08:09,790 --> 00:08:12,860
energieprincipe is een model van de fysieke realiteit

163
00:08:13,280 --> 00:08:15,547
en onze realiteit is tenslotte

164
00:08:15,634 --> 00:08:18,904
gelijktijdig.  Overal in de oneindige

165
00:08:18,952 --> 00:08:21,572
ruimte evolueren systemen

166
00:08:21,656 --> 00:08:24,048
gelijktijdig volgens hun lokale

167
00:08:24,134 --> 00:08:27,696
dynamiek.  En daarom wordt dit

168
00:08:27,718 --> 00:08:29,344
weerspiegeld in de kern van het vrije

169
00:08:29,382 --> 00:08:33,024
energieprincipe.  Natuurlijk

170
00:08:33,062 --> 00:08:35,796
hoeft een rekenmodel zich niet te beperken tot de

171
00:08:35,818 --> 00:08:38,784
natuurkunde.  Maar Hewitt et al.  We probeerden

172
00:08:38,832 --> 00:08:41,395
een model te ontwikkelen dat de

173
00:08:41,418 --> 00:08:43,664
realiteit van gedistribueerde gelijktijdige

174
00:08:43,712 --> 00:08:47,056
systemen modelleerde.  En gelukkig voor ons

175
00:08:47,088 --> 00:08:50,824
omarmt het actormodel zowel gelijktijdigheid, gezien

176
00:08:50,862 --> 00:08:53,352
vanuit het principe van isolatie als

177
00:08:53,486 --> 00:08:56,500
actorautonomie, waardoor het verenigbaar is

178
00:08:56,580 --> 00:08:58,040
met actieve gevolgtrekking.

179
00:08:59,200 --> 00:09:01,820
Vervolgens komen we bij het nestelen.

180
00:09:02,640 --> 00:09:05,532
Het actormodel maakt het voor een actor

181
00:09:05,586 --> 00:09:08,552
niet alleen mogelijk om een ​​eindig aantal berichten te ontvangen en te versturen,

182
00:09:08,616 --> 00:09:11,984
om waar te nemen en te handelen, maar

183
00:09:12,182 --> 00:09:15,292
het maakt het als actie ook mogelijk om

184
00:09:15,356 --> 00:09:18,240
een ​​eindig aantal nieuwe actoren te creëren.

185
00:09:19,220 --> 00:09:21,504
Deze actoren kunnen ofwel in

186
00:09:21,542 --> 00:09:24,336
de oudercel zijn ingebed, bijvoorbeeld in de delen van een dierlijke

187
00:09:24,368 --> 00:09:26,564
cel, ofwel

188
00:09:26,602 --> 00:09:29,076
als onafhankelijke actoren in de omgeving worden vrijgelaten.  Vanaf

189
00:09:29,098 --> 00:09:32,336
dat moment sluit het model

190
00:09:32,368 --> 00:09:34,628
mooi aan bij de prachtige concepten van

191
00:09:34,714 --> 00:09:37,960
meerschalig nesten en actieve inferentie.

192
00:09:38,940 --> 00:09:41,460
Hierdoor kunnen actoren

193
00:09:41,540 --> 00:09:44,791
ecosystemen van actoren zowel helemaal naar

194
00:09:44,846 --> 00:09:47,290
beneden als helemaal naar boven bevatten.  Als

195
00:09:49,200 --> 00:09:51,976
laatste wil ik nog twee actormodelontwerpprincipes behandelen:

196
00:09:52,008 --> 00:09:55,436
gedragsverandering

197
00:09:55,618 --> 00:09:57,020
en doorzettingsvermogen.

198
00:09:59,040 --> 00:10:01,664
Acteurs hebben de mogelijkheid om hun

199
00:10:01,702 --> 00:10:04,450
gedrag te veranderen als reactie op een boodschap.

200
00:10:05,140 --> 00:10:08,192
Dit aanpassingsvermogen maakt de

201
00:10:08,246 --> 00:10:10,924
constructie mogelijk van complexe stateful

202
00:10:10,972 --> 00:10:14,130
entiteiten die in de loop van de tijd kunnen evolueren.

203
00:10:14,760 --> 00:10:17,492
En inderdaad, het zorgt ervoor dat hele

204
00:10:17,626 --> 00:10:21,584
ecosystemen nieuw opkomend

205
00:10:21,632 --> 00:10:25,263
gedrag kunnen ontwikkelen.  Bij gebruik voor software-

206
00:10:25,312 --> 00:10:28,264
engineering voegt dit een krachtig hulpmiddel toe

207
00:10:28,382 --> 00:10:31,800
voor het beheren van complexe dynamische systemen.

208
00:10:32,700 --> 00:10:35,412
Actieve gevolgtrekking omvat

209
00:10:35,476 --> 00:10:39,304
dit uiteraard tot het uiterste.  De essentie

210
00:10:39,352 --> 00:10:42,363
van dingheid is de voortdurende poging om te

211
00:10:42,402 --> 00:10:45,324
voorspellen en zich aan te passen aan een omgeving en

212
00:10:45,362 --> 00:10:48,439
daardoor te blijven bestaan ​​om de

213
00:10:48,520 --> 00:10:52,828
Markov-deken in een broeiende zee

214
00:10:53,004 --> 00:10:56,736
van activiteit in stand te houden.

215
00:10:56,758 --> 00:10:58,912
Daarmee komt ook het concept van

216
00:10:58,966 --> 00:11:02,444
doorzettingsvermogen.  Doorzettingsvermogen stelt acteurs in staat

217
00:11:02,492 --> 00:11:05,524
hun toestand te bederven en deze later te herstellen of te

218
00:11:05,562 --> 00:11:08,640
wijzigen, een kenmerk

219
00:11:08,720 --> 00:11:11,300
dat het principe van het geheugen belichaamt.

220
00:11:11,800 --> 00:11:14,675
Geheugen is een voorwaarde voor leren

221
00:11:14,778 --> 00:11:18,504
en aanpassing.  Het vermogen van een agent om te

222
00:11:18,622 --> 00:11:21,640
voorspellen hangt af van zijn vermogen om

223
00:11:21,710 --> 00:11:24,356
ervaringen uit het verleden te herinneren en zo

224
00:11:24,388 --> 00:11:27,176
de verrassing die gepaard gaat met

225
00:11:27,198 --> 00:11:30,520
onverwachte gebeurtenissen te minimaliseren.  De cruciale rol van het geheugen

226
00:11:30,600 --> 00:11:34,056
wordt ook benadrukt als we aannemen

227
00:11:34,088 --> 00:11:36,199
dat agenten inductieve priors hebben,

228
00:11:36,280 --> 00:11:39,100
hetzij door ervaring of door erfenis, die

229
00:11:39,440 --> 00:11:41,470
bijdragen aan hun wereldmodel.

230
00:11:42,340 --> 00:11:44,464
Dit wereldmodel stuurt hun

231
00:11:44,502 --> 00:11:47,291
huidige gedrag en wordt voortdurend

232
00:11:47,356 --> 00:11:50,028
bijgewerkt op basis van nieuwe ervaringen die

233
00:11:50,204 --> 00:11:52,939
bijdragen aan hun voortdurende aanpassing

234
00:11:53,020 --> 00:11:54,240
en bestaan.

235
00:11:56,600 --> 00:11:59,684
Oke geweldig.  U zegt dat er duidelijke en

236
00:11:59,722 --> 00:12:02,308
diepgaande verbanden bestaan ​​tussen het actormodel

237
00:12:02,394 --> 00:12:06,424
en actieve gevolgtrekking.  Maar hoe

238
00:12:06,462 --> 00:12:08,756
helpt dit ons in de actieve

239
00:12:08,788 --> 00:12:11,988
gevolgtrekkingsgemeenschap?  Ten eerste

240
00:12:12,084 --> 00:12:14,084
is het naar mijn mening een software-

241
00:12:14,132 --> 00:12:16,520
engineeringparadigma dat we moeten omarmen.

242
00:12:16,860 --> 00:12:19,340
En als we dat doen, zijn er natuurlijk

243
00:12:19,410 --> 00:12:21,815
actormodelbibliotheken en raamwerken

244
00:12:21,848 --> 00:12:25,448
die we kunnen gebruiken, zoals ACA,

245
00:12:25,624 --> 00:12:29,752
Orleans, Thespian Actix

246
00:12:29,896 --> 00:12:33,055
Protoactor en nog veel meer, die we

247
00:12:33,078 --> 00:12:35,516
onmiddellijk kunnen gebruiken bij het bouwen van

248
00:12:35,548 --> 00:12:37,872
softwaremodules en

249
00:12:37,926 --> 00:12:41,596
-applicaties voor actieve inferentie.  Er zijn ook bibliotheken,

250
00:12:41,708 --> 00:12:43,944
talen en zelfs taalkenmerken

251
00:12:44,012 --> 00:12:46,016
die heel goed aansluiten bij de

252
00:12:46,048 --> 00:12:49,380
principes van het actormodel, zoals Zero,

253
00:12:49,450 --> 00:12:52,640
MQ, tokyo en Rust,

254
00:12:52,800 --> 00:12:56,284
Erlang, Async, Await en C. Sharp,

255
00:12:56,432 --> 00:13:00,104
enzovoort.  Maar belangrijker dan

256
00:13:00,142 --> 00:13:04,712
de tools die we vandaag de dag ter beschikking hebben, is

257
00:13:04,766 --> 00:13:07,544
de softwareontwerpmentaliteit die

258
00:13:07,582 --> 00:13:10,136
onze creatie van de actieve

259
00:13:10,168 --> 00:13:13,996
inferentiesoftware van morgen zal begeleiden.  Het

260
00:13:14,018 --> 00:13:16,764
actormodel biedt een paradigma van

261
00:13:16,802 --> 00:13:20,588
softwareontwerp en -engineering dat

262
00:13:20,754 --> 00:13:24,064
de meest perfecte match is die we hebben voor

263
00:13:24,102 --> 00:13:28,160
actieve gevolgtrekking.  Dit blijkt

264
00:13:28,580 --> 00:13:30,876
niet alleen uit de afstemming van de

265
00:13:30,908 --> 00:13:34,084
kernprincipes die we eerder hebben besproken, maar

266
00:13:34,122 --> 00:13:37,055
ook uit de inzichten die actieve

267
00:13:37,088 --> 00:13:39,156
gevolgtrekking in het actormodel met zich meebrengen

268
00:13:39,178 --> 00:13:42,916
.  Denk bijvoorbeeld eens aan wat

269
00:13:42,938 --> 00:13:46,604
nu de wet van Hewitt wordt genoemd.  Informeel

270
00:13:46,672 --> 00:13:49,800
gesteld, aangezien alles overal is,

271
00:13:51,260 --> 00:13:54,824
duidt deze wet op het idee dat het

272
00:13:54,942 --> 00:13:57,844
in een werkelijk asynchronisch gedistribueerd

273
00:13:57,892 --> 00:14:00,652
systeem een ​​willekeurige hoeveelheid tijd kan duren

274
00:14:00,706 --> 00:14:03,532
voordat een boodschap van de ene

275
00:14:03,586 --> 00:14:07,032
plaats naar de andere gaat, en dat elke actor

276
00:14:07,096 --> 00:14:10,364
op die gebeurtenis voorbereid moet zijn.  Er

277
00:14:10,402 --> 00:14:13,900
bestaat eenvoudigweg niet zoiets als ogenblikkelijk

278
00:14:13,980 --> 00:14:17,888
in een dergelijk systeem, en geen enkel onderdeel kan

279
00:14:17,974 --> 00:14:20,384
een aanname doen over de timing van de

280
00:14:20,422 --> 00:14:23,548
acties van een ander onderdeel.  In feite

281
00:14:23,734 --> 00:14:26,980
moet men doen alsof een bericht misschien

282
00:14:27,050 --> 00:14:30,819
nooit aankomt.  Dit heeft belangrijke

283
00:14:30,890 --> 00:14:34,644
implicaties.  Het suggereert dat het

284
00:14:34,682 --> 00:14:36,744
onmogelijk is om

285
00:14:36,782 --> 00:14:39,176


286
00:14:39,198 --> 00:14:42,569
op een bepaald moment de toestand van het hele systeem nauwkeurig en consistent te bepalen,

287
00:14:43,260 --> 00:14:45,464
omdat de informatie zich misschien niet eens

288
00:14:45,502 --> 00:14:48,410
door het systeem heeft verspreid.

289
00:14:49,760 --> 00:14:52,904
En ook pogingen om mondiale

290
00:14:52,952 --> 00:14:55,400
synchronisatie te implementeren zullen onvermijdelijk

291
00:14:55,480 --> 00:14:57,864
knelpunten introduceren en de

292
00:14:57,912 --> 00:15:01,844
efficiëntie verminderen.  De wet van Hewitt benadrukt

293
00:15:01,912 --> 00:15:04,976
de noodzaak om systemen zo te ontwerpen

294
00:15:04,998 --> 00:15:07,580
dat ze effectief kunnen omgaan met

295
00:15:07,660 --> 00:15:09,504
deze onvermijdelijke vertragingen en

296
00:15:09,542 --> 00:15:11,776
onzekerheden, en benadrukt het

297
00:15:11,798 --> 00:15:14,424
belang van robuuste, niet-blokkerende

298
00:15:14,492 --> 00:15:17,540
communicatiemechanismen en lokale

299
00:15:17,690 --> 00:15:21,284
besluitvormingsmogelijkheden.  Kortom,

300
00:15:21,482 --> 00:15:24,240
Hector-modelsystemen zijn van nature

301
00:15:24,400 --> 00:15:27,944
niet-deterministisch.  Klinkt dit

302
00:15:27,982 --> 00:15:31,800
bekend?  Welk ander paradigma benadrukt het

303
00:15:32,140 --> 00:15:34,616
opereren onder onzekerheid en de

304
00:15:34,638 --> 00:15:36,904
autonomie om ondanks de omgeving door te gaan

305
00:15:36,942 --> 00:15:40,328
?  Actieve gevolgtrekking en het

306
00:15:40,334 --> 00:15:43,767
vrije energieprincipe?  Actieve gevolgtrekking

307
00:15:43,864 --> 00:15:46,552
weerspiegelt de realiteit van een onvoorspelbare

308
00:15:46,616 --> 00:15:48,792
wereld waarin onze softwaresystemen

309
00:15:48,856 --> 00:15:51,920
opereren.  Verschillende uitkomsten kunnen voortvloeien

310
00:15:51,990 --> 00:15:55,136
uit dezelfde initiële omstandigheden als gevolg van

311
00:15:55,158 --> 00:15:57,756
het plaatsvinden van gebeurtenissen in een willekeurige,

312
00:15:57,868 --> 00:16:01,644
onvoorspelbare volgorde.  Dit is het concept

313
00:16:01,692 --> 00:16:04,310
van verrassing dat we allemaal goed kennen,

314
00:16:05,000 --> 00:16:07,572
waarbij een agent zijn overtuigingen over

315
00:16:07,626 --> 00:16:10,404
de wereld bijwerkt wanneer de zintuiglijke input die hij

316
00:16:10,442 --> 00:16:13,060
ontvangt niet overeenkomt met zijn voorspellingen.

317
00:16:13,720 --> 00:16:15,856
Zowel het actormodel als de actieve

318
00:16:15,888 --> 00:16:18,328
gevolgtrekking erkennen dat de wereld

319
00:16:18,414 --> 00:16:21,624
onvoorspelbaar is.  Sterker nog dan dat ze

320
00:16:21,662 --> 00:16:24,632
het erkennen, accepteren de modellen deze

321
00:16:24,686 --> 00:16:27,688
onzekerheid als een gegeven en niet als iets dat kan

322
00:16:27,774 --> 00:16:29,530
worden weggemanaged.

323
00:16:30,780 --> 00:16:33,752
Zoals we weten in het vrije-

324
00:16:33,806 --> 00:16:36,204
energieprincipe, geeft de onzekerheid die we

325
00:16:36,242 --> 00:16:38,459
in onze modellen handhaven ons

326
00:16:38,530 --> 00:16:41,020
de flexibiliteit om ons aan te passen.

327
00:16:43,540 --> 00:16:46,555
Misschien is dit gewoon mijn persoonlijke

328
00:16:46,588 --> 00:16:49,199
fantasie, maar ik stel me een toekomst voor waarin

329
00:16:49,270 --> 00:16:51,596
softwaremodules, geleid door actieve

330
00:16:51,628 --> 00:16:54,976
gevolgtrekking, de hardgecodeerde foutafhandeling afschaffen

331
00:16:55,008 --> 00:16:57,792
en probabilistische

332
00:16:57,856 --> 00:17:00,672
leeralgoritmen inwisselen die

333
00:17:00,736 --> 00:17:03,200
zichzelf optimaliseren naarmate het foutenlandschap

334
00:17:03,280 --> 00:17:07,316
evolueert.  Modules die robuuste

335
00:17:07,428 --> 00:17:11,268
en zelfherstellende gedistribueerde systemen zijn

336
00:17:11,364 --> 00:17:13,672
zonder afzonderlijke storingspunten, die zich

337
00:17:13,726 --> 00:17:17,716
richten op voorspellende rampenvermijding

338
00:17:17,907 --> 00:17:21,659
in plaats van reactief rampenherstel.

339
00:17:23,040 --> 00:17:25,308
Kijkend naar de toekomst hebben wij als

340
00:17:25,314 --> 00:17:28,044
gemeenschap het potentieel om de

341
00:17:28,082 --> 00:17:31,700
grens te verleggen van zowel de actieve imprints-theorie

342
00:17:31,880 --> 00:17:34,576
als de praktische implementatie van het

343
00:17:34,598 --> 00:17:37,611
actormodel.  Door de sterke punten

344
00:17:37,676 --> 00:17:40,096
van deze twee paradigma’s samen te benutten, kunnen we

345
00:17:40,118 --> 00:17:42,860
softwaresystemen creëren die robuust en

346
00:17:43,020 --> 00:17:45,876
adaptief zijn en beter zijn afgestemd op de

347
00:17:45,898 --> 00:17:48,500
fysieke wereld waarin ze feitelijk

348
00:17:48,650 --> 00:17:52,100
opereren.  Stel je een toekomst voor

349
00:17:52,170 --> 00:17:54,976
waarin softwarecomponenten die actieve

350
00:17:55,008 --> 00:17:57,112
inferentie in het actormodel gebruiken, kunnen

351
00:17:57,166 --> 00:18:00,344
anticiperen op potentiële problemen, kunnen leren van

352
00:18:00,382 --> 00:18:04,024
fouten uit het verleden en zich in realtime kunnen aanpassen aan

353
00:18:04,062 --> 00:18:07,144
veranderingen in de omgeving.  Met deze

354
00:18:07,182 --> 00:18:09,212
aanpak kunnen we systemen bouwen die

355
00:18:09,266 --> 00:18:11,996
fundamenteel veerkrachtiger en

356
00:18:12,018 --> 00:18:15,084
efficiënter zijn.  Naar mijn mening kan dit

357
00:18:15,122 --> 00:18:17,784
een grote verandering teweegbrengen in de betrouwbaarheid

358
00:18:17,912 --> 00:18:21,052
, prestaties en schaalbaarheid van software, en

359
00:18:21,106 --> 00:18:24,044
luidt het een nieuw computertijdperk in, waarbij

360
00:18:24,092 --> 00:18:27,264
principes van biologie en cognitie in

361
00:18:27,302 --> 00:18:30,060
de structuur van onze softwaresystemen worden verweven,

362
00:18:30,220 --> 00:18:32,416
waardoor ze dichter bij het leven komen

363
00:18:32,438 --> 00:18:36,420
.  Concluderend biedt

364
00:18:37,160 --> 00:18:39,636
de koppeling van actieve inferentie aan het

365
00:18:39,658 --> 00:18:42,803
actormodel een krachtige nieuwe

366
00:18:42,842 --> 00:18:44,564
lens waardoor we naar

367
00:18:44,602 --> 00:18:46,820
softwareontwerp en -engineering kunnen kijken.

368
00:18:47,180 --> 00:18:49,412
Of we nu gebruik maken van bestaande talen

369
00:18:49,476 --> 00:18:51,476
en bibliotheken die zijn afgestemd op actieve

370
00:18:51,508 --> 00:18:54,728
inferentie of nieuwe uitvinden,

371
00:18:54,894 --> 00:18:58,056
we staan ​​aan de vooravond van een

372
00:18:58,078 --> 00:19:01,944
opwindende grens.  Laten we dus

373
00:19:01,992 --> 00:19:05,068
de dag benutten, eens kijken naar het actormodel

374
00:19:05,154 --> 00:19:06,776
en de relatie ervan met actieve

375
00:19:06,808 --> 00:19:09,484
inferentie, en laten we de toekomst van

376
00:19:09,522 --> 00:19:11,980
intelligent gedistribueerd computergebruik vormgeven.

377
00:19:13,040 --> 00:19:14,460
Bedankt voor het luisteren.

378
00:19:17,790 --> 00:19:21,050
Geweldig.  Geweldig gesprek van

379
00:19:21,120 --> 00:19:23,126
Keith.  Bedankt, Keith, voor het sturen

380
00:19:23,158 --> 00:19:25,985
ervan. Er waren enkele opmerkingen in de

381
00:19:26,008 --> 00:19:28,978
chat.  Dus, Keith, misschien als je in de

382
00:19:28,984 --> 00:19:32,641
toekomst mee wilt doen aan A-Q-A, maar

383
00:19:32,696 --> 00:19:33,949
echt een coole presentatie.

