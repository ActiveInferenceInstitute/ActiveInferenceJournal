1
00:00:01,290 --> 00:00:04,494
Très bien, le prochain intervenant sera

2
00:00:04,532 --> 00:00:06,606
Keith Dugger, qui a soumis une

3
00:00:06,628 --> 00:00:09,118
vidéo préenregistrée.  La vidéo préenregistrée

4
00:00:09,204 --> 00:00:11,694
est appelée inférence active.  Et le

5
00:00:11,732 --> 00:00:14,765
modèle d'acteur. Je vais donc en

6
00:00:14,788 --> 00:00:15,920
parler tout de suite.

7
00:00:29,430 --> 00:00:32,958
D'accord, voici la

8
00:00:33,134 --> 00:00:35,910
vidéo préenregistrée de Keith sur l'inférence active

9
00:00:35,990 --> 00:00:37,660
et le modèle Actor.

10
00:00:44,240 --> 00:00:46,956
Inférence active et modèle d'acteur.

11
00:00:47,138 --> 00:00:49,608
Bonjour.  Bonjour.  Je suis le Dr Keith Thugger,

12
00:00:49,704 --> 00:00:52,684
CTO de la plateforme chez X Ray, une

13
00:00:52,732 --> 00:00:56,464
IA de réalité étendue.  Entreprise et co-animateur du

14
00:00:56,502 --> 00:00:58,880
podcast Machine Learning Street Talk.

15
00:00:59,780 --> 00:01:02,624
Aujourd’hui, alors que nous travaillons tous à construire un

16
00:01:02,662 --> 00:01:05,536
écosystème basé sur l’inférence active, les

17
00:01:05,728 --> 00:01:08,324
logiciels joueront évidemment un

18
00:01:08,362 --> 00:01:11,363
rôle fondamental pour tirer le meilleur parti de

19
00:01:11,402 --> 00:01:13,204
l’inférence active.  Nous devrons utiliser

20
00:01:13,242 --> 00:01:15,524
des paradigmes de génie logiciel qui

21
00:01:15,562 --> 00:01:17,636
s'alignent sur les principes de

22
00:01:17,668 --> 00:01:20,136
l'inférence active, et je pense qu'il en existe un

23
00:01:20,238 --> 00:01:22,664
sur mesure pour nos besoins.  C'est ce qu'on appelle

24
00:01:22,702 --> 00:01:26,084
le modèle d'acteur.  L'inférence active

25
00:01:26,132 --> 00:01:28,356
et le modèle d'acteur sont deux

26
00:01:28,388 --> 00:01:30,750
compréhensions du monde profondément liées.

27
00:01:31,280 --> 00:01:34,204
Ils fournissent des cadres fondamentaux pour

28
00:01:34,242 --> 00:01:36,280
gérer la dynamique des

29
00:01:36,360 --> 00:01:39,624
systèmes complexes, en mettant l’accent sur les

30
00:01:39,672 --> 00:01:42,672
agents autonomes qui interagissent dans une écologie de

31
00:01:42,726 --> 00:01:46,283
systèmes imbriqués.  J'aimerais explorer

32
00:01:46,332 --> 00:01:47,916
certaines de leurs connexions clés,

33
00:01:48,108 --> 00:01:50,050
notamment le rôle de la

34
00:01:50,500 --> 00:01:53,040
concurrence, de l'autonomie, de

35
00:01:53,380 --> 00:01:57,300
l'incertitude et de l'adaptation du comportement des agents.

36
00:01:58,680 --> 00:02:00,596
Nous verrons que l'inférence active et

37
00:02:00,618 --> 00:02:03,184
le modèle actif sont tous deux des

38
00:02:03,232 --> 00:02:06,300
changements de paradigme, passant d'une pensée déterministe et

39
00:02:06,480 --> 00:02:10,392
centralisée étape par étape à

40
00:02:10,446 --> 00:02:14,004
une perspective concurrente de réseau décentralisé de

41
00:02:14,052 --> 00:02:17,751
calcul et de

42
00:02:17,806 --> 00:02:21,052
cognition.  Juste un peu d’histoire

43
00:02:21,106 --> 00:02:25,100
sur le modèle Actor.  En 1973,

44
00:02:25,250 --> 00:02:28,504
Karl Hewitt, Peter Bishop et Richard

45
00:02:28,552 --> 00:02:30,555
Steiger travaillaient tous au laboratoire d'

46
00:02:30,578 --> 00:02:33,676
IA du Massachusetts Institute of Technology

47
00:02:33,708 --> 00:02:37,804
pour fondamentaliser, un concept

48
00:02:37,852 --> 00:02:40,972
de calcul simultané qui incluait à la

49
00:02:41,036 --> 00:02:44,304
fois la structure et

50
00:02:44,352 --> 00:02:46,020
l'exécution d'algorithmes adaptables.

51
00:02:47,480 --> 00:02:49,744
Les méthodes conventionnelles de l’époque manquaient de

52
00:02:49,792 --> 00:02:52,224
robustesse et de fondements mathématiques sûrs

53
00:02:52,272 --> 00:02:55,263
.  Leur effort de collaboration a

54
00:02:55,312 --> 00:02:57,576
finalement conduit à la création du

55
00:02:57,598 --> 00:03:01,076
modèle Actor.  À l’époque, il était considéré

56
00:03:01,108 --> 00:03:03,224
comme révolutionnaire en raison de ses

57
00:03:03,262 --> 00:03:05,764
caractéristiques de tolérance aux erreurs accrue

58
00:03:05,812 --> 00:03:08,784
et

59
00:03:08,852 --> 00:03:12,236
de capacités de calcul distribuées.  Tout au long des années 1980 et

60
00:03:12,258 --> 00:03:15,388
1990, le modèle Actor est devenu la

61
00:03:15,394 --> 00:03:18,476
base de nombreux projets de recherche

62
00:03:18,498 --> 00:03:20,856
ainsi que de projets pratiques, gagnant en

63
00:03:20,888 --> 00:03:23,184
popularité pour sa flexibilité et son

64
00:03:23,222 --> 00:03:25,516
approche intuitive du

65
00:03:25,548 --> 00:03:29,648
calcul simultané.  Il était principalement utilisé dans

66
00:03:29,734 --> 00:03:32,240
l’intelligence artificielle et les systèmes multi-agents

67
00:03:32,310 --> 00:03:34,400
.  Semble familier?  De

68
00:03:35,880 --> 00:03:38,784
nouveaux langages basés sur Actor comme Actor,

69
00:03:38,912 --> 00:03:42,116
Saulson et Erlang ont contribué

70
00:03:42,138 --> 00:03:44,356
au raffinement du modèle, le transformant

71
00:03:44,378 --> 00:03:47,203
en une approche plus robuste et plus flexible

72
00:03:47,332 --> 00:03:50,148
de l'informatique concurrente, et il reste

73
00:03:50,244 --> 00:03:52,164
bien vivant dans l'informatique

74
00:03:52,212 --> 00:03:55,272
aujourd'hui.  Plus récemment, le modèle Actor

75
00:03:55,326 --> 00:03:57,796
a suscité un regain d'intérêt, principalement en raison

76
00:03:57,828 --> 00:03:59,944
du besoin croissant de

77
00:03:59,992 --> 00:04:02,904
systèmes distribués, de cloud computing et de edge

78
00:04:02,952 --> 00:04:05,036
computing, qui alimentent l'Internet des

79
00:04:05,058 --> 00:04:07,310
objets et le Web 30.

80
00:04:08,480 --> 00:04:11,351
Ces tâches informatiques sont parfaitement adaptées

81
00:04:11,416 --> 00:04:13,436
pour tirer parti de l'architecture du modèle ACA.

82
00:04:13,468 --> 00:04:16,800
, qui est conçu exactement

83
00:04:16,950 --> 00:04:20,368
pour modéliser la gestion simultanée de

84
00:04:20,534 --> 00:04:23,409
grands volumes de données d'une part

85
00:04:23,800 --> 00:04:26,752
et de systèmes autonomes disparates à grain fin

86
00:04:26,816 --> 00:04:28,710
d'autre part.

87
00:04:29,640 --> 00:04:32,003
Cette application du modèle Actor a

88
00:04:32,042 --> 00:04:34,436
eu de profonds effets sur les grandes entreprises

89
00:04:34,538 --> 00:04:36,904
qui ont utilisé ses principes pour

90
00:04:36,942 --> 00:04:38,936
gérer des problèmes de Big Data telles que

91
00:04:38,958 --> 00:04:41,348
Twitter, Facebook,

92
00:04:41,524 --> 00:04:45,256
LinkedIn, alors qu'est-ce que cela a à

93
00:04:45,278 --> 00:04:47,636
voir avec l'inférence active ?  Je

94
00:04:47,668 --> 00:04:49,368
suppose que vous avez déjà entendu certains

95
00:04:49,374 --> 00:04:51,656
des parallèles dans l'intro.  Mais

96
00:04:51,688 --> 00:04:53,656
commençons par examiner quelques

97
00:04:53,688 --> 00:04:56,396
principes fondamentaux du modèle d'acteur et

98
00:04:56,418 --> 00:04:58,568
leur lien avec les principes de l'

99
00:04:58,584 --> 00:05:01,236
inférence active.  Commençons par la notion

100
00:05:01,288 --> 00:05:04,832
d'isolement.  L'isolement signifie

101
00:05:04,886 --> 00:05:07,664
qu'un acteur du modèle d'acteur

102
00:05:07,702 --> 00:05:10,464
ne partage son état avec aucun autre

103
00:05:10,502 --> 00:05:14,212
acteur.  Il ne peut être affecté que par la

104
00:05:14,266 --> 00:05:17,060
réception d'un message.  Et cela ne peut

105
00:05:17,130 --> 00:05:19,524
influer sur le changement de l’état des autres

106
00:05:19,562 --> 00:05:22,164
acteurs qu’en envoyant un nombre fini de

107
00:05:22,202 --> 00:05:25,776
messages en réponse.  D'un

108
00:05:25,808 --> 00:05:27,512
point de vue de l'ingénierie logicielle, ce

109
00:05:27,566 --> 00:05:30,051
principe d'isolation limite les

110
00:05:30,116 --> 00:05:33,111
effets secondaires potentiels d'une opération à un seul

111
00:05:33,166 --> 00:05:35,924
acteur, améliorant ainsi la

112
00:05:35,972 --> 00:05:39,072
fiabilité de la prévisibilité globale du système

113
00:05:39,236 --> 00:05:42,104
et, plus important encore, s'il est pleinement adopté,

114
00:05:42,232 --> 00:05:44,910
peut réellement simplifier la conception.

115
00:05:46,560 --> 00:05:48,636
En regardant le diagramme, nous voyons un

116
00:05:48,658 --> 00:05:51,616
écosystème d’acteurs qui envoient des messages à

117
00:05:51,638 --> 00:05:54,635
un acteur particulier, qui à son tour renvoie

118
00:05:54,668 --> 00:05:57,040
des messages à d’autres acteurs.

119
00:05:58,340 --> 00:06:00,690
Où est l’inférence active ?  Eh bien, transformons la

120
00:06:01,300 --> 00:06:03,816
réception et l'envoi de

121
00:06:03,868 --> 00:06:07,392
messages en un cycle d'action de perception

122
00:06:07,536 --> 00:06:09,620
et désignons les états externes,

123
00:06:10,200 --> 00:06:13,539
internes, sensoriels et

124
00:06:13,610 --> 00:06:17,112
actifs.  Et nous disposons désormais clairement

125
00:06:17,166 --> 00:06:19,956
des bases nécessaires à

126
00:06:19,988 --> 00:06:22,600
l’inférence active, une couverture markovienne.

127
00:06:23,660 --> 00:06:26,436
Les acteurs du modèle d'acteur correspondent

128
00:06:26,468 --> 00:06:28,848
directement aux agents d'

129
00:06:28,884 --> 00:06:32,840
inférence active.  De plus, la finitude,

130
00:06:33,000 --> 00:06:35,676
le fait qu’un acteur ne puisse envoyer qu’un

131
00:06:35,698 --> 00:06:39,003
nombre fini de messages en réponse est

132
00:06:39,042 --> 00:06:41,150
également une propriété partagée importante.

133
00:06:41,940 --> 00:06:44,780
Parce que l’inférence active modélise la réalité,

134
00:06:44,940 --> 00:06:47,452
elle respecte nécessairement les

135
00:06:47,516 --> 00:06:50,704
contraintes de ressources des systèmes réels.  Et cela

136
00:06:50,742 --> 00:06:53,376
s’inscrit parfaitement dans les fondements du

137
00:06:53,398 --> 00:06:56,496
modèle actif.  Examinons un autre

138
00:06:56,528 --> 00:06:59,860
principe de base du passage de messages asynchrone.

139
00:07:00,840 --> 00:07:03,012
La communication entre les acteurs est

140
00:07:03,066 --> 00:07:05,936
asynchrone.  Cela signifie qu'un acteur

141
00:07:05,968 --> 00:07:07,832
n'attend pas de réponse après

142
00:07:07,886 --> 00:07:10,680
avoir envoyé un message.  Il continue à travailler,

143
00:07:10,830 --> 00:07:13,210
il continue à vivre, pour ainsi dire.

144
00:07:13,820 --> 00:07:17,256
Ceci est essentiel car cela découple les

145
00:07:17,278 --> 00:07:20,284
acteurs, conduisant à un système qui peut

146
00:07:20,322 --> 00:07:23,020
continuer à fonctionner, à vivre et à

147
00:07:23,090 --> 00:07:25,948
progresser même lorsque certaines parties du système

148
00:07:26,034 --> 00:07:28,551
sont lentes ou même temporairement

149
00:07:28,616 --> 00:07:31,964
indisponibles.  Le professeur Friston

150
00:07:32,012 --> 00:07:34,028
a dit que le principe de l’énergie libre

151
00:07:34,124 --> 00:07:38,240
est la question existentielle ultime : si

152
00:07:38,310 --> 00:07:41,490
les choses existent, que doivent-elles faire ?

153
00:07:42,660 --> 00:07:45,412
Eh bien, l'acteur modèle prétend qu'il ne doit

154
00:07:45,466 --> 00:07:47,350
pas attendre les autres.

155
00:07:48,360 --> 00:07:51,572
Bien entendu, un acteur peut choisir d’attendre les

156
00:07:51,626 --> 00:07:55,284
autres, mais il ne doit pas y être contraint

157
00:07:55,322 --> 00:07:58,808
dans le modèle.  Il doit être libre

158
00:07:58,894 --> 00:07:59,770
de choisir.

159
00:08:01,820 --> 00:08:04,004
Cela nous amène à un autre

160
00:08:04,052 --> 00:08:06,456
principe critique selon lequel les deux modèles partagent

161
00:08:06,558 --> 00:08:09,719
l’autonomie.  Le principe de l’énergie libre

162
00:08:09,790 --> 00:08:12,860
est un modèle de réalité physique

163
00:08:13,280 --> 00:08:15,547
et notre réalité est, après tout,

164
00:08:15,634 --> 00:08:18,904
concurrente.  Partout dans l’

165
00:08:18,952 --> 00:08:21,572
espace infini, les systèmes évoluent

166
00:08:21,656 --> 00:08:24,048
simultanément en fonction de leurs

167
00:08:24,134 --> 00:08:27,696
dynamiques locales.  Et cela se

168
00:08:27,718 --> 00:08:29,344
reflète donc au cœur du

169
00:08:29,382 --> 00:08:33,024
principe de l’énergie libre.  Bien entendu, un modèle de

170
00:08:33,062 --> 00:08:35,796
calcul ne doit pas nécessairement se limiter à

171
00:08:35,818 --> 00:08:38,784
la physique.  Mais Hewitt et coll.  Nous cherchions

172
00:08:38,832 --> 00:08:41,395
à développer un modèle qui modélise la

173
00:08:41,418 --> 00:08:43,664
réalité des systèmes concurrents distribués

174
00:08:43,712 --> 00:08:47,056
.  Et heureusement pour nous, le modèle de l’acteur

175
00:08:47,088 --> 00:08:50,824
englobe à la fois la concurrence, vue

176
00:08:50,862 --> 00:08:53,352
du principe d’isolement, et l’

177
00:08:53,486 --> 00:08:56,500
autonomie des acteurs, ce qui le rend compatible

178
00:08:56,580 --> 00:08:58,040
avec l’inférence active.

179
00:08:59,200 --> 00:09:01,820
Venons-en ensuite à la nidification.

180
00:09:02,640 --> 00:09:05,532
Le modèle de l'acteur permet à un acteur

181
00:09:05,586 --> 00:09:08,552
non seulement de recevoir et d'envoyer un

182
00:09:08,616 --> 00:09:11,984
nombre fini de messages pour percevoir et agir, mais

183
00:09:12,182 --> 00:09:15,292
il permet également, en tant qu'action, la création

184
00:09:15,356 --> 00:09:18,240
d'un nombre fini de nouveaux acteurs.

185
00:09:19,220 --> 00:09:21,504
Ces acteurs peuvent soit être imbriqués dans

186
00:09:21,542 --> 00:09:24,336
la cellule mère, par exemple les parties d'une

187
00:09:24,368 --> 00:09:26,564
cellule animale, soit être libérés dans l'

188
00:09:26,602 --> 00:09:29,076
environnement en tant qu'acteurs indépendants.

189
00:09:29,098 --> 00:09:32,336
Partant de ce principe, le modèle s’intègre

190
00:09:32,368 --> 00:09:34,628
parfaitement aux beaux concepts d’

191
00:09:34,714 --> 00:09:37,960
imbrication multi-échelle et d’inférence active.

192
00:09:38,940 --> 00:09:41,460
Cela permet aux acteurs de contenir des

193
00:09:41,540 --> 00:09:44,791
écosystèmes d'acteurs à la fois vers le

194
00:09:44,846 --> 00:09:47,290
bas et vers le haut.

195
00:09:49,200 --> 00:09:51,976
Enfin, je souhaite aborder deux autres

196
00:09:52,008 --> 00:09:55,436
principes de conception de modèles d'acteurs, le changement de comportement

197
00:09:55,618 --> 00:09:57,020
et la persistance.  Les

198
00:09:59,040 --> 00:10:01,664
acteurs ont la capacité de modifier leur

199
00:10:01,702 --> 00:10:04,450
comportement en réponse à un message.

200
00:10:05,140 --> 00:10:08,192
Cette adaptabilité permet la

201
00:10:08,246 --> 00:10:10,924
construction d’entités avec état complexes

202
00:10:10,972 --> 00:10:14,130
qui peuvent évoluer au fil du temps.

203
00:10:14,760 --> 00:10:17,492
Et en effet, cela permet à des

204
00:10:17,626 --> 00:10:21,584
écosystèmes entiers de développer de nouveaux

205
00:10:21,632 --> 00:10:25,263
comportements émergents.  Lorsqu'il est utilisé pour l'

206
00:10:25,312 --> 00:10:28,264
ingénierie logicielle, cela ajoute un outil puissant

207
00:10:28,382 --> 00:10:31,800
pour gérer des systèmes dynamiques complexes.

208
00:10:32,700 --> 00:10:35,412
Bien entendu, l’inférence active va dans

209
00:10:35,476 --> 00:10:39,304
ce sens à l’extrême.  L’essence même

210
00:10:39,352 --> 00:10:42,363
de la chose est la tentative continue de

211
00:10:42,402 --> 00:10:45,324
prédire et de s’adapter à un environnement et

212
00:10:45,362 --> 00:10:48,439
ainsi de continuer à exister pour maintenir

213
00:10:48,520 --> 00:10:52,828
sa couverture markovienne dans une mer bouillonnante

214
00:10:53,004 --> 00:10:56,736
d’activité.  À

215
00:10:56,758 --> 00:10:58,912
cela s’ajoute également le concept de

216
00:10:58,966 --> 00:11:02,444
persistance.  La persistance permet aux acteurs

217
00:11:02,492 --> 00:11:05,524
de regretter leur état et de le restaurer ou de

218
00:11:05,562 --> 00:11:08,640
le modifier ultérieurement, une caractéristique

219
00:11:08,720 --> 00:11:11,300
qui incarne le principe de mémoire.

220
00:11:11,800 --> 00:11:14,675
La mémoire est une condition préalable à l’apprentissage

221
00:11:14,778 --> 00:11:18,504
et à l’adaptation.  La capacité de prédire d'un agent

222
00:11:18,622 --> 00:11:21,640
dépend de sa capacité à

223
00:11:21,710 --> 00:11:24,356
se souvenir des expériences passées et ainsi à

224
00:11:24,388 --> 00:11:27,176
minimiser la surprise associée à

225
00:11:27,198 --> 00:11:30,520
l'inattendu.  Le rôle vital de la mémoire

226
00:11:30,600 --> 00:11:34,056
est également souligné lorsque nous supposons

227
00:11:34,088 --> 00:11:36,199
que les agents ont des antécédents inductifs,

228
00:11:36,280 --> 00:11:39,100
issus de l'expérience ou de l'héritage,

229
00:11:39,440 --> 00:11:41,470
contribuant à leur modèle du monde.

230
00:11:42,340 --> 00:11:44,464
Ce modèle mondial guide à la fois leur

231
00:11:44,502 --> 00:11:47,291
comportement actuel et est continuellement

232
00:11:47,356 --> 00:11:50,028
mis à jour sur la base de nouvelles expériences

233
00:11:50,204 --> 00:11:52,939
contribuant à leur adaptation

234
00:11:53,020 --> 00:11:54,240
et à leur existence continues.

235
00:11:56,600 --> 00:11:59,684
D'accord génial.  Vous dites qu’il existe

236
00:11:59,722 --> 00:12:02,308
des liens clairs et profonds entre le modèle de l’acteur

237
00:12:02,394 --> 00:12:06,424
et l’inférence active.  Mais comment

238
00:12:06,462 --> 00:12:08,756
cela nous aide-t-il dans la communauté d’inférence active

239
00:12:08,788 --> 00:12:11,988
?  Eh bien, premièrement,

240
00:12:12,084 --> 00:12:14,084
à mon avis, c'est un

241
00:12:14,132 --> 00:12:16,520
paradigme de génie logiciel que nous devrions adopter.

242
00:12:16,860 --> 00:12:19,340
Et si nous le faisons, il existe bien sûr

243
00:12:19,410 --> 00:12:21,815
des bibliothèques et des frameworks de modèles d'acteurs

244
00:12:21,848 --> 00:12:25,448
que nous pouvons utiliser, tels que ACA,

245
00:12:25,624 --> 00:12:29,752
Orleans, thespian Actix

246
00:12:29,896 --> 00:12:33,055
Protoactor et bien d'autres, que nous pouvons

247
00:12:33,078 --> 00:12:35,516
immédiatement utiliser lors de la création de

248
00:12:35,548 --> 00:12:37,872
modules et

249
00:12:37,926 --> 00:12:41,596
d'applications logiciels d'inférence active.  Il existe également des bibliothèques, des

250
00:12:41,708 --> 00:12:43,944
langages et même des fonctionnalités de langage

251
00:12:44,012 --> 00:12:46,016
qui s'alignent très bien sur les

252
00:12:46,048 --> 00:12:49,380
principes du modèle d'acteur tels que Zero,

253
00:12:49,450 --> 00:12:52,640
MQ, Tokyo et Rust,

254
00:12:52,800 --> 00:12:56,284
Erlang, Async, Await et C. Sharp,

255
00:12:56,432 --> 00:13:00,104
et cetera.  Mais plus important que

256
00:13:00,142 --> 00:13:04,712
les outils dont nous disposons aujourd’hui est

257
00:13:04,766 --> 00:13:07,544
l’état d’esprit de conception logicielle qui

258
00:13:07,582 --> 00:13:10,136
guidera notre création du

259
00:13:10,168 --> 00:13:13,996
logiciel d’inférence active de demain.  Le

260
00:13:14,018 --> 00:13:16,764
modèle d'acteur fournit un paradigme de

261
00:13:16,802 --> 00:13:20,588
conception et d'ingénierie logicielle qui

262
00:13:20,754 --> 00:13:24,064
correspond le mieux à l'

263
00:13:24,102 --> 00:13:28,160
inférence active.  Cela ressort clairement

264
00:13:28,580 --> 00:13:30,876
non seulement de l’alignement des

265
00:13:30,908 --> 00:13:34,084
principes fondamentaux dont nous avons discuté précédemment, mais

266
00:13:34,122 --> 00:13:37,055
également des connaissances que l’

267
00:13:37,088 --> 00:13:39,156
inférence active dans le modèle d’acteur s’apportent les

268
00:13:39,178 --> 00:13:42,916
unes aux autres.  Par exemple, considérons ce qu'on

269
00:13:42,938 --> 00:13:46,604
appelle aujourd'hui la loi de Hewitt.  De manière informelle,

270
00:13:46,672 --> 00:13:49,800
comme tout est partout,

271
00:13:51,260 --> 00:13:54,824
cette loi signifie l'idée que

272
00:13:54,942 --> 00:13:57,844
dans un système distribué véritablement asynchrone

273
00:13:57,892 --> 00:14:00,652
, un temps arbitraire peut être nécessaire

274
00:14:00,706 --> 00:14:03,532
pour qu'un message passe d'un

275
00:14:03,586 --> 00:14:07,032
endroit à un autre, et tout acteur

276
00:14:07,096 --> 00:14:10,364
doit être préparé à cet événement.  L'

277
00:14:10,402 --> 00:14:13,900
instantané n'existe tout simplement pas

278
00:14:13,980 --> 00:14:17,888
dans un tel système, et aucun composant ne peut

279
00:14:17,974 --> 00:14:20,384
faire d'hypothèse sur le timing des

280
00:14:20,422 --> 00:14:23,548
actions d'un autre composant.  En fait,

281
00:14:23,734 --> 00:14:26,980
il faut faire comme si un message risquait de

282
00:14:27,050 --> 00:14:30,819
ne jamais arriver.  Cela a des

283
00:14:30,890 --> 00:14:34,644
implications importantes.  Cela suggère qu’il est

284
00:14:34,682 --> 00:14:36,744
impossible de déterminer avec précision et

285
00:14:36,782 --> 00:14:39,176
cohérence l’état de l’

286
00:14:39,198 --> 00:14:42,569
ensemble du système à un moment donné,

287
00:14:43,260 --> 00:14:45,464
car les informations ne se

288
00:14:45,502 --> 00:14:48,410
sont peut-être même pas propagées à travers le système.

289
00:14:49,760 --> 00:14:52,904
De plus, les tentatives de mise en œuvre d’une synchronisation globale

290
00:14:52,952 --> 00:14:55,400


291
00:14:55,480 --> 00:14:57,864
introduiront inévitablement des goulots d’étranglement et réduiront

292
00:14:57,912 --> 00:15:01,844
l’efficacité.  La loi de Hewitt souligne

293
00:15:01,912 --> 00:15:04,976
la nécessité de concevoir les systèmes de

294
00:15:04,998 --> 00:15:07,580
manière à pouvoir gérer efficacement

295
00:15:07,660 --> 00:15:09,504
ces retards et

296
00:15:09,542 --> 00:15:11,776
incertitudes inévitables, en soulignant l'

297
00:15:11,798 --> 00:15:14,424
importance de mécanismes de communication robustes et non bloquants

298
00:15:14,492 --> 00:15:17,540
et de

299
00:15:17,690 --> 00:15:21,284
capacités de prise de décision locale.  En bref, les

300
00:15:21,482 --> 00:15:24,240
systèmes modèles Hector sont par nature

301
00:15:24,400 --> 00:15:27,944
non déterministes.  Cela vous semble-t-il

302
00:15:27,982 --> 00:15:31,800
familier ?  Quel autre paradigme met en avant le

303
00:15:32,140 --> 00:15:34,616
fonctionnement dans l’incertitude et l’

304
00:15:34,638 --> 00:15:36,904
autonomie pour continuer malgré l’

305
00:15:36,942 --> 00:15:40,328
environnement ?  L'inférence active et le

306
00:15:40,334 --> 00:15:43,767
principe de l'énergie libre ?  L'inférence active

307
00:15:43,864 --> 00:15:46,552
reflète la réalité d'un

308
00:15:46,616 --> 00:15:48,792
monde imprévisible dans lequel nos systèmes logiciels

309
00:15:48,856 --> 00:15:51,920
fonctionnent.  Des résultats différents peuvent résulter

310
00:15:51,990 --> 00:15:55,136
des mêmes conditions initiales en raison de

311
00:15:55,158 --> 00:15:57,756
la survenance d’événements dans un

312
00:15:57,868 --> 00:16:01,644
ordre aléatoire et imprévisible.  Il s’agit du concept

313
00:16:01,692 --> 00:16:04,310
de surprise que nous connaissons tous bien,

314
00:16:05,000 --> 00:16:07,572
où un agent met à jour ses croyances sur

315
00:16:07,626 --> 00:16:10,404
le monde lorsque les informations sensorielles qu’il

316
00:16:10,442 --> 00:16:13,060
reçoit ne correspondent pas à ses prédictions.

317
00:16:13,720 --> 00:16:15,856
Le modèle de l’acteur et l’inférence active reconnaissent tous deux

318
00:16:15,888 --> 00:16:18,328
que le monde est

319
00:16:18,414 --> 00:16:21,624
imprévisible.  Bien plus que de

320
00:16:21,662 --> 00:16:24,632
le reconnaître, les modèles acceptent cette

321
00:16:24,686 --> 00:16:27,688
incertitude comme un acquis et non comme quelque chose

322
00:16:27,774 --> 00:16:29,530
qu’il faut gérer.

323
00:16:30,780 --> 00:16:33,752
En effet, comme nous le savons dans le principe de l’énergie libre

324
00:16:33,806 --> 00:16:36,204
, l’incertitude que nous

325
00:16:36,242 --> 00:16:38,459
entretenons dans nos modèles est ce qui nous donne

326
00:16:38,530 --> 00:16:41,020
la flexibilité de nous adapter.

327
00:16:43,540 --> 00:16:46,555
Ce n'est peut-être que ma fantaisie personnelle

328
00:16:46,588 --> 00:16:49,199
, mais j'imagine un avenir dans lequel

329
00:16:49,270 --> 00:16:51,596
les modules logiciels guidés par

330
00:16:51,628 --> 00:16:54,976
l'inférence active suppriment la gestion des erreurs codées en dur

331
00:16:55,008 --> 00:16:57,792
et remplacent

332
00:16:57,856 --> 00:17:00,672
les algorithmes d'apprentissage probabiliste qui s'optimisent

333
00:17:00,736 --> 00:17:03,200
eux-mêmes à mesure que le paysage des erreurs

334
00:17:03,280 --> 00:17:07,316
évolue.  Modules qui sont des

335
00:17:07,428 --> 00:17:11,268
systèmes distribués robustes et auto-réparateurs,

336
00:17:11,364 --> 00:17:13,672
sans point de défaillance unique, qui se

337
00:17:13,726 --> 00:17:17,716
concentrent sur la prévention prédictive des sinistres

338
00:17:17,907 --> 00:17:21,659
plutôt que sur la récupération réactive après sinistre.

339
00:17:23,040 --> 00:17:25,308
En regardant vers l’avenir, nous, en tant que

340
00:17:25,314 --> 00:17:28,044
communauté, avons le potentiel de repousser les

341
00:17:28,082 --> 00:17:31,700
limites de la théorie des empreintes actives

342
00:17:31,880 --> 00:17:34,576
et des mises en œuvre pratiques du

343
00:17:34,598 --> 00:17:37,611
modèle de l’acteur.  En exploitant ensemble les atouts

344
00:17:37,676 --> 00:17:40,096
de ces deux paradigmes, nous pouvons

345
00:17:40,118 --> 00:17:42,860
créer des systèmes logiciels robustes,

346
00:17:43,020 --> 00:17:45,876
adaptatifs et mieux alignés sur le

347
00:17:45,898 --> 00:17:48,500
monde physique dans lequel ils

348
00:17:48,650 --> 00:17:52,100
fonctionnent réellement.  Imaginez un avenir dans

349
00:17:52,170 --> 00:17:54,976
lequel les composants logiciels utilisant

350
00:17:55,008 --> 00:17:57,112
l'inférence active dans le modèle d'acteur pourront

351
00:17:57,166 --> 00:18:00,344
anticiper les problèmes potentiels, tirer les leçons des

352
00:18:00,382 --> 00:18:04,024
erreurs passées et s'adapter en temps réel aux

353
00:18:04,062 --> 00:18:07,144
changements environnementaux.  Grâce à cette

354
00:18:07,182 --> 00:18:09,212
approche, nous pouvons construire des systèmes

355
00:18:09,266 --> 00:18:11,996
fondamentalement plus résilients et plus

356
00:18:12,018 --> 00:18:15,084
efficaces.  À mon avis, cela peut apporter

357
00:18:15,122 --> 00:18:17,784
un changement radical dans la fiabilité

358
00:18:17,912 --> 00:18:21,052
, les performances et l'évolutivité des logiciels, et

359
00:18:21,106 --> 00:18:24,044
annonce une nouvelle ère informatique, intégrant

360
00:18:24,092 --> 00:18:27,264
les principes de la biologie et de la cognition dans

361
00:18:27,302 --> 00:18:30,060
la structure de nos systèmes logiciels,

362
00:18:30,220 --> 00:18:32,416
les rapprochant ainsi de la vie

363
00:18:32,438 --> 00:18:36,420
.  En conclusion,

364
00:18:37,160 --> 00:18:39,636
le couplage de l’inférence active au

365
00:18:39,658 --> 00:18:42,803
modèle d’acteur fournit une nouvelle

366
00:18:42,842 --> 00:18:44,564
lentille puissante à travers laquelle nous pouvons examiner la

367
00:18:44,602 --> 00:18:46,820
conception et l’ingénierie logicielles.

368
00:18:47,180 --> 00:18:49,412
Que nous exploitions les langages

369
00:18:49,476 --> 00:18:51,476
et bibliothèques existants alignés sur

370
00:18:51,508 --> 00:18:54,728
l’inférence active ou que nous en inventions de nouveaux,

371
00:18:54,894 --> 00:18:58,056
nous nous trouvons au bord d’une

372
00:18:58,078 --> 00:19:01,944
frontière passionnante.  Alors profitons de

373
00:19:01,992 --> 00:19:05,068
l'occasion, examinons le modèle d'acteur

374
00:19:05,154 --> 00:19:06,776
et sa relation avec l'

375
00:19:06,808 --> 00:19:09,484
inférence active, et façonnons l'avenir de

376
00:19:09,522 --> 00:19:11,980
l'informatique distribuée intelligente.

377
00:19:13,040 --> 00:19:14,460
Merci de votre attention.

378
00:19:17,790 --> 00:19:21,050
Génial.  Excellent discours de

379
00:19:21,120 --> 00:19:23,126
Keith.  Merci, Keith, d'avoir envoyé

380
00:19:23,158 --> 00:19:25,985
cela. Il y a eu quelques commentaires dans le

381
00:19:26,008 --> 00:19:28,978
chat.  Donc, Keith, potentiellement si vous souhaitez

382
00:19:28,984 --> 00:19:32,641
participer à A-Q-A dans le futur, mais une

383
00:19:32,696 --> 00:19:33,949
présentation vraiment sympa.

